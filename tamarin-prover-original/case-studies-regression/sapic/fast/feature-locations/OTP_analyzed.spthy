theory OTP begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, cde/1, chall/1, chall2/1, check_rep/2, dcde/1,
           dchall/1, dchall2/1, dscode/1, dshared/1, dsko/1, fst/1, get_rep/1, h/1,
           hash/2, list/2, pair/2, pk/1, prog/2, rep/2 [private], report/1, scode/1,
           sdec/2, senc/2, shared/1, sko/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = true,
    dcde(cde(m)) = m,
    dscode(scode(m)) = m,
    dshared(shared(m)) = m,
    dsko(sko(m)) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: Report( x, y )<->¬(y = 'loc')

lemma secrecy_key [reuse]:
  all-traces "¬(∃ k #t1 #t2. (Key( k ) @ #t1) ∧ (!KU( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ k #t1 #t2. (Key( k ) @ #t1) ∧ (!KU( k ) @ #t2)"
*/
simplify
solve( state_1111111( cu, pc, pw, k ) ▶₀ #t1 )
  case outpw_0_111111
  solve( !KU( ~n.3 ) @ #t2 )
    case outcdecode_0_111111111121111
    solve( state_11111111112111( code, cu, pc, pw, skV ) ▶₀ #vr.10 )
      case inpccode_0_1111111111211
      solve( (#vr.9, 0) ~~> (#t2, 0) )
        case d_0_fst
        by solve( state_11111111112111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.25 )
      next
        case d_0_snd
        by solve( (#vr.26, 0) ~~> (#t2, 0) )
      qed
    qed
  qed
qed

lemma key_ex [reuse]:
  all-traces
  "∀ pka k #t1.
    (SessionV( pka, k ) @ #t1) ⇒
    (∃ #t2. (SessionP( pka, k ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1.
  (SessionV( pka, k ) @ #t1)
 ∧
  ∀ #t2. (SessionP( pka, k ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
by solve( state_1111111111111( cu, pc, pw, k, signed, skV ) ▶₀ #t1 )

lemma secrecy_ex [reuse]:
  all-traces
  "¬(∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2)"
*/
simplify
by solve( state_1111111111111( cu, pc, pw, k, signed, skV ) ▶₀ #t1 )

lemma unic [reuse]:
  all-traces
  "¬(∃ #t1 #t2 pw fr.
      ((AskU( pw, fr ) @ #t1) ∧ (AskU( pw, fr ) @ #t2)) ∧ (¬(#t1 = #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pw fr.
  (AskU( pw, fr ) @ #t1) ∧ (AskU( pw, fr ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( state_111111111121111111( code, cu, fr, pc, pw, skV ) ▶₀ #t1 )
    case newfr_0_11111111112111111
    solve( state_111111111121111111( code.1, cu.1, ~n, pc.1, pw, skV.1
           ) ▶₀ #t2 )
      case newfr_0_11111111112111111
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( state_111111111121111111( code, cu, fr, pc, pw, skV ) ▶₀ #t1 )
    case newfr_0_11111111112111111
    solve( state_111111111121111111( code.1, cu.1, ~n, pc.1, pw, skV.1
           ) ▶₀ #t2 )
      case newfr_0_11111111112111111
      by contradiction /* cyclic */
    qed
  qed
qed

lemma secrecy_chall [reuse]:
  all-traces
  "¬(∃ pw chal fr k #t1 #t2.
      (Ask( pw, chal, fr, k ) @ #t1) ∧ (!KU( chal ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pw chal fr k #t1 #t2.
  (Ask( pw, chal, fr, k ) @ #t1) ∧ (!KU( chal ) @ #t2)"
*/
simplify
solve( state_111111111121211111111111( chal, code, cu, fr, kOTP, pc, pw,
                                       k, skV
       ) ▶₀ #t1 )
  case insencchallengesharedk_0_11111111112121111111111
  solve( state_11111111112111( code.1, ~n, pc, ~n.3, skV ) ▶₀ #vr.15 )
    case inpccode_0_1111111111211
    by solve( state_11111111112111( code.1, ~n.2, pc, pw, skV ) ▶₀ #vr.48 )
  qed
qed

lemma valid [reuse]:
  all-traces
  "∀ #t1 pw ch.
    (Accept( pw, ch ) @ #t1) ⇒
    (∃ #t2 fr k. (Ask( pw, ch, fr, k ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 pw ch.
  (Accept( pw, ch ) @ #t1)
 ∧
  ∀ #t2 fr k. (Ask( pw, ch, fr, k ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
by solve( state_1111111111111111111111111( ch, code, cu, kOTP, pc, pw,
                                           shared_k, signed, skV
          ) ▶₀ #t1 )

lemma unic_2 [reuse]:
  all-traces
  "¬(∃ #t1 #t2 pw ch fr k.
      ((Ask( pw, ch, fr, k ) @ #t1) ∧ (Ask( pw, ch, fr, k ) @ #t2)) ∧
      (¬(#t1 = #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pw ch fr k.
  (Ask( pw, ch, fr, k ) @ #t1) ∧ (Ask( pw, ch, fr, k ) @ #t2)
 ∧
  ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( state_111111111121211111111111( ch, code, cu, fr, kOTP, pc, pw, k,
                                         skV
         ) ▶₀ #t1 )
    case insencchallengesharedk_0_11111111112121111111111
    solve( state_111111111121211111111111( ch, code.1, cu, ~n.1, kOTP.1, pc,
                                           ~n.3, ~n.4, skV
           ) ▶₀ #t2 )
      case insencchallengesharedk_0_11111111112121111111111
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( state_111111111121211111111111( ch, code, cu, fr, kOTP, pc, pw, k,
                                         skV
         ) ▶₀ #t1 )
    case insencchallengesharedk_0_11111111112121111111111
    solve( state_111111111121211111111111( ch, code.1, cu, ~n.1, kOTP.1, pc,
                                           ~n.3, ~n.4, skV
           ) ▶₀ #t2 )
      case insencchallengesharedk_0_11111111112121111111111
      by contradiction /* cyclic */
    qed
  qed
qed

lemma valid_final:
  all-traces
  "∀ #t1 pw ch.
    (Accept( pw, ch ) @ #t1) ⇒
    (∃ #t2 #t3 fr k.
      (((((Ask( pw, ch, fr, k ) @ #t2) ∧ (AskU( pw, fr ) @ #t3)) ∧
         (#t2 < #t1)) ∧
        (#t3 < #t2)) ∧
       (¬(∃ #t5. (Ask( pw, ch, fr, k ) @ #t5) ∧ (¬(#t2 = #t5))))) ∧
      (¬(∃ #t6. (AskU( pw, fr ) @ #t6) ∧ (¬(#t3 = #t6)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 pw ch.
  (Accept( pw, ch ) @ #t1)
 ∧
  ∀ #t2 #t3 fr k.
   (Ask( pw, ch, fr, k ) @ #t2) ∧ (AskU( pw, fr ) @ #t3)
  ⇒
   ((¬(#t2 < #t1)) ∨
    (¬(#t3 < #t2)) ∨
    (∃ #t5. (Ask( pw, ch, fr, k ) @ #t5) ∧ ¬(#t2 = #t5)) ∨
    (∃ #t6. (AskU( pw, fr ) @ #t6) ∧ ¬(#t3 = #t6)))"
*/
simplify
by solve( state_1111111111111111111111111( ch, code, cu, kOTP, pc, pw,
                                           shared_k, signed, skV
          ) ▶₀ #t1 )

rule (modulo E) Report-rule[color=#ffffff process=new skV;]:
   [ In( <x, loc> ) ] --[ Report( x, loc ) ]-> [ Out( rep(x, loc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff process=new skV;]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newskV_0_[color=#ffffff process=new skV;]:
   [ state_( ), Fr( skV ) ] --> [ state_1( skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newpc_0_1[color=#ffffff process=new pc;]:
   [ state_1( skV ), Fr( pc ) ] --> [ state_11( pc, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newcu_0_11[color=#ffffff process=new cu;]:
   [ state_11( pc, skV ), Fr( cu ) ] --> [ state_111( cu, pc, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newpw_0_111[color=#ffffff process=new pw;]:
   [ state_111( cu, pc, skV ), Fr( pw ) ]
  -->
   [ state_1111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventChancu_0_1111[color=#ffffff process=event Chan( cu );]:
   [ state_1111( cu, pc, pw, skV ) ]
  --[ Chan( cu ) ]->
   [ state_11111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventChanpc_0_11111[color=#ffffff process=event Chan( pc );]:
   [ state_11111( cu, pc, pw, skV ) ]
  --[ Chan( pc ) ]->
   [ state_111111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpw_0_111111[color=#ffffff process=out(pw);]:
   [ state_111111( cu, pc, pw, skV ) ]
  -->
   [ state_1111111( cu, pc, pw, skV ), Out( pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventKeyskV_0_1111111[color=#ffffff process=event Key( skV );]:
   [ state_1111111( cu, pc, pw, skV ) ]
  --[ Key( skV ) ]->
   [ state_11111111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpkskV_0_11111111[color=#ffffff process=out(pk(skV));]:
   [ state_11111111( cu, pc, pw, skV ) ]
  -->
   [ state_111111111( cu, pc, pw, skV ), Out( pk(skV) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111111111[color=#ffffff process=!]:
   [ state_111111111( cu, pc, pw, skV ) ]
  -->
   [ !semistate_1111111111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_111111111[color=#ffffff process=!]:
   [ !semistate_1111111111( cu, pc, pw, skV ) ]
  -->
   [ state_1111111111( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111[color=#ffffff process=|]:
   [ state_1111111111( cu, pc, pw, skV ) ]
  -->
   [
   state_11111111111( cu, pc, pw, skV ),
   state_11111111112( cu, pc, pw, skV )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insharedaencsharedkpkskVsigned_0_11111111111[color=#658040 process=in(shared(<aenc(shared_k, pk(skV)), signed>));]:
   [
   state_11111111111( cu, pc, pw, skV ),
   In( shared(<aenc(shared_k, pk(skV)), signed>) )
   ]
  -->
   [ state_111111111111( cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifaencsharedkpkskVcheckrepsignedloc_0_111111111111[color=#658040 process=if aenc(shared_k, pk(skV))=check_rep(signed, 'loc')]:
   [ state_111111111111( cu, pc, pw, shared_k, signed, skV ) ]
  --[ Pred_Eq( aenc(shared_k, pk(skV)), check_rep(signed, 'loc') ) ]->
   [ state_1111111111111( cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifaencsharedkpkskVcheckrepsignedloc_1_111111111111[color=#658040 process=if aenc(shared_k, pk(skV))=check_rep(signed, 'loc')]:
   [ state_111111111111( cu, pc, pw, shared_k, signed, skV ) ]
  --[ Pred_Not_Eq( aenc(shared_k, pk(skV)), check_rep(signed, 'loc') ) ]->
   [ state_1111111111112( cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionVpkskVsharedk_0_1111111111111[color=#658040 process=event SessionV( pk(skV), shared_k );]:
   [ state_1111111111111( cu, pc, pw, shared_k, signed, skV ) ]
  --[ SessionV( pk(skV), shared_k ) ]->
   [ state_11111111111111( cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newcode_0_11111111111111[color=#658040 process=new code;]:
   [ state_11111111111111( cu, pc, pw, shared_k, signed, skV ), Fr( code ) ]
  -->
   [ state_111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpccode_0_111111111111111[color=#658040 process=out(pc,code);]:
   [ state_111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]
  -->
   [
   Message( pc, code ),
   semistate_1111111111111111( code, cu, pc, pw, shared_k, signed, skV )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpccode_1_111111111111111[color=#658040 process=out(pc,code);]:
   [
   semistate_1111111111111111( code, cu, pc, pw, shared_k, signed, skV ),
   Ack( pc, code )
   ]
  -->
   [ state_1111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inscodesenccodesharedk_0_1111111111111111[color=#658040 process=in(scode(senc(code, shared_k)));]:
   [
   state_1111111111111111( code, cu, pc, pw, shared_k, signed, skV ),
   In( scode(senc(code, shared_k)) )
   ]
  -->
   [ state_11111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventProvScode_0_11111111111111111[color=#658040 process=event ProvS( code );]:
   [ state_11111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]
  --[ ProvS( code ) ]->
   [ state_111111111111111111( code, cu, pc, pw, shared_k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newkOTP_0_111111111111111111[color=#658040 process=new kOTP;]:
   [
   state_111111111111111111( code, cu, pc, pw, shared_k, signed, skV ),
   Fr( kOTP )
   ]
  -->
   [
   state_1111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outskosenckOTPsharedk_0_1111111111111111111[color=#658040 process=out(sko(senc(kOTP, shared_k)));]:
   [
   state_1111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed, skV
   )
   ]
  -->
   [
   state_11111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed, skV
   ),
   Out( sko(senc(kOTP, shared_k)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111111111111111[color=#658040 process=!]:
   [
   state_11111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed, skV
   )
   ]
  -->
   [
   !semistate_111111111111111111111( code, cu, kOTP, pc, pw, shared_k,
                                     signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11111111111111111111[color=#658040 process=!]:
   [
   !semistate_111111111111111111111( code, cu, kOTP, pc, pw, shared_k,
                                     signed, skV
   )
   ]
  -->
   [
   state_111111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed,
                                skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) newchallenge_0_111111111111111111111[color=#658040 process=new challenge;]:
   [
   state_111111111111111111111( code, cu, kOTP, pc, pw, shared_k, signed,
                                skV
   ),
   Fr( challenge )
   ]
  -->
   [
   state_1111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                 shared_k, signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventChallchallengesharedk_0_1111111111111111111111[color=#658040 process=event Chall( challenge, shared_k );]:
   [
   state_1111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                 shared_k, signed, skV
   )
   ]
  --[ Chall( challenge, shared_k ) ]->
   [
   state_11111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                  shared_k, signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsencchallengesharedk_0_11111111111111111111111[color=#658040 process=out(senc(challenge, shared_k));]:
   [
   state_11111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                  shared_k, signed, skV
   )
   ]
  -->
   [
   state_111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                   shared_k, signed, skV
   ),
   Out( senc(challenge, shared_k) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) inhpwhashkOTPchallenge_0_111111111111111111111111[color=#658040 process=in(<h(pw), hash(kOTP, challenge)>);]:
   [
   state_111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                   shared_k, signed, skV
   ),
   In( <h(pw), hash(kOTP, challenge)> )
   ]
  -->
   [
   state_1111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                    shared_k, signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAcceptpwchallenge_0_1111111111111111111111111[color=#658040 process=event Accept( pw, challenge );]:
   [
   state_1111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                    shared_k, signed, skV
   )
   ]
  --[ Accept( pw, challenge ) ]->
   [
   state_11111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                     shared_k, signed, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111111111111111111111[color=#658040 process=0]:
   [
   state_11111111111111111111111111( challenge, code, cu, kOTP, pc, pw,
                                     shared_k, signed, skV
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111112[color=#658040 process=0]:
   [ state_1111111111112( cu, pc, pw, shared_k, signed, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111112[color=#ffffff process=!]:
   [ state_11111111112( cu, pc, pw, skV ) ]
  -->
   [ !semistate_111111111121( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11111111112[color=#ffffff process=!]:
   [ !semistate_111111111121( cu, pc, pw, skV ) ]
  -->
   [ state_111111111121( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111111111121[color=#ffffff process=|]:
   [ state_111111111121( cu, pc, pw, skV ) ]
  -->
   [
   state_1111111111211( cu, pc, pw, skV ),
   state_1111111111212( cu, pc, pw, skV )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) inpccode_0_1111111111211[color=#504080 process=in(pc,code);]:
   [ state_1111111111211( cu, pc, pw, skV ), Message( pc, code ) ]
  -->
   [ Ack( pc, code ), state_11111111112111( code, cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventProvUcode_0_11111111112111[color=#504080 process=event ProvU( code );]:
   [ state_11111111112111( code, cu, pc, pw, skV ) ]
  --[ ProvU( code ) ]->
   [ state_111111111121111( code, cu, pc, pw, skV ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) outcdecode_0_111111111121111[color=#504080 process=out(cde(code));]:
   [ state_111111111121111( code, cu, pc, pw, skV ) ]
  -->
   [ state_1111111111211111( code, cu, pc, pw, skV ), Out( cde(code) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111211111[color=#504080 process=!]:
   [ state_1111111111211111( code, cu, pc, pw, skV ) ]
  -->
   [ !semistate_11111111112111111( code, cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1111111111211111[color=#504080 process=!]:
   [ !semistate_11111111112111111( code, cu, pc, pw, skV ) ]
  -->
   [ state_11111111112111111( code, cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newfr_0_11111111112111111[color=#504080 process=new fr;]:
   [ state_11111111112111111( code, cu, pc, pw, skV ), Fr( fr ) ]
  -->
   [ state_111111111121111111( code, cu, fr, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAskUpwfr_0_111111111121111111[color=#504080 process=event AskU( pw, fr );]:
   [ state_111111111121111111( code, cu, fr, pc, pw, skV ) ]
  --[ AskU( pw, fr ) ]->
   [ state_1111111111211111111( code, cu, fr, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outcupwfr_0_1111111111211111111[color=#504080 process=out(cu,<pw, fr>);]:
   [ state_1111111111211111111( code, cu, fr, pc, pw, skV ) ]
  -->
   [
   Message( cu, <pw, fr> ),
   semistate_11111111112111111111( code, cu, fr, pc, pw, skV )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outcupwfr_1_1111111111211111111[color=#504080 process=out(cu,<pw, fr>);]:
   [
   semistate_11111111112111111111( code, cu, fr, pc, pw, skV ),
   Ack( cu, <pw, fr> )
   ]
  -->
   [ state_11111111112111111111( code, cu, fr, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111112111111111[color=#504080 process=0]:
   [ state_11111111112111111111( code, cu, fr, pc, pw, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111212[color=#ffffff process=!]:
   [ state_1111111111212( cu, pc, pw, skV ) ]
  -->
   [ !semistate_11111111112121( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1111111111212[color=#ffffff process=!]:
   [ !semistate_11111111112121( cu, pc, pw, skV ) ]
  -->
   [ state_11111111112121( cu, pc, pw, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newsharedk_0_11111111112121[color=#80407b process=new shared_k;]:
   [ state_11111111112121( cu, pc, pw, skV ), Fr( shared_k ) ]
  -->
   [ state_111111111121211( cu, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionPpkskVsharedk_0_111111111121211[color=#80407b process=event SessionP( pk(skV), shared_k );]:
   [ state_111111111121211( cu, pc, pw, shared_k, skV ) ]
  --[ SessionP( pk(skV), shared_k ) ]->
   [ state_1111111111212111( cu, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsharedaencsharedkpkskVreportaencsharedkpkskV_0_1111111111212111[color=#80407b process=out(shared(<aenc(shared_k, pk(skV)), report(aenc(shared_k, pk(skV)))>));]:
   [ state_1111111111212111( cu, pc, pw, shared_k, skV ) ]
  -->
   [
   state_11111111112121111( cu, pc, pw, shared_k, skV ),
   Out( shared(<aenc(shared_k, pk(skV)), report(aenc(shared_k, pk(skV)))>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) incdecode_0_11111111112121111[color=#80407b process=in(cde(code));]:
   [ state_11111111112121111( cu, pc, pw, shared_k, skV ), In( cde(code) ) ]
  -->
   [ state_111111111121211111( code, cu, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventProvEcode_0_111111111121211111[color=#80407b process=event ProvE( code );]:
   [ state_111111111121211111( code, cu, pc, pw, shared_k, skV ) ]
  --[ ProvE( code ) ]->
   [ state_1111111111212111111( code, cu, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outdscodesenccodesharedk_0_1111111111212111111[color=#80407b process=out(dscode(senc(code, shared_k)));]:
   [ state_1111111111212111111( code, cu, pc, pw, shared_k, skV ) ]
  -->
   [
   state_11111111112121111111( code, cu, pc, pw, shared_k, skV ),
   Out( dscode(senc(code, shared_k)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) inskosenckOTPsharedk_0_11111111112121111111[color=#80407b process=in(sko(senc(kOTP, shared_k)));]:
   [
   state_11111111112121111111( code, cu, pc, pw, shared_k, skV ),
   In( sko(senc(kOTP, shared_k)) )
   ]
  -->
   [ state_111111111121211111111( code, cu, kOTP, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111111111121211111111[color=#80407b process=!]:
   [ state_111111111121211111111( code, cu, kOTP, pc, pw, shared_k, skV ) ]
  -->
   [
   !semistate_1111111111212111111111( code, cu, kOTP, pc, pw, shared_k, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_111111111121211111111[color=#80407b process=!]:
   [
   !semistate_1111111111212111111111( code, cu, kOTP, pc, pw, shared_k, skV
   )
   ]
  -->
   [ state_1111111111212111111111( code, cu, kOTP, pc, pw, shared_k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incupwfr_0_1111111111212111111111[color=#80407b process=in(cu,<pw, fr>);]:
   [
   state_1111111111212111111111( code, cu, kOTP, pc, pw, shared_k, skV ),
   Message( cu, <pw, fr> )
   ]
  -->
   [
   Ack( cu, <pw, fr> ),
   state_11111111112121111111111( code, cu, fr, kOTP, pc, pw, shared_k, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insencchallengesharedk_0_11111111112121111111111[color=#80407b process=in(senc(challenge, shared_k));]:
   [
   state_11111111112121111111111( code, cu, fr, kOTP, pc, pw, shared_k, skV
   ),
   In( senc(challenge, shared_k) )
   ]
  -->
   [
   state_111111111121211111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                   shared_k, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAskpwchallengefrsharedk_0_111111111121211111111111[color=#80407b process=event Ask( pw, challenge, fr, shared_k );]:
   [
   state_111111111121211111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                   shared_k, skV
   )
   ]
  --[ Ask( pw, challenge, fr, shared_k ) ]->
   [
   state_1111111111212111111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                    shared_k, skV
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outhpwhashkOTPchallenge_0_1111111111212111111111111[color=#80407b process=out(<h(pw), hash(kOTP, challenge)>);]:
   [
   state_1111111111212111111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                    shared_k, skV
   )
   ]
  -->
   [
   state_11111111112121111111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                     shared_k, skV
   ),
   Out( <h(pw), hash(kOTP, challenge)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111112121111111111111[color=#80407b process=0]:
   [
   state_11111111112121111111111111( challenge, code, cu, fr, kOTP, pc, pw,
                                     shared_k, skV
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-locations/OTP.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-locations/OTP.spthy

  output:          examples/sapic/fast/feature-locations/OTP.spthy.tmp
  processing time: 2.779823s
  secrecy_key (all-traces): verified (7 steps)
  key_ex (all-traces): verified (2 steps)
  secrecy_ex (all-traces): verified (2 steps)
  unic (all-traces): verified (8 steps)
  secrecy_chall (all-traces): verified (4 steps)
  valid (all-traces): verified (2 steps)
  unic_2 (all-traces): verified (8 steps)
  valid_final (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/OTP.spthy

  output:          examples/sapic/fast/feature-locations/OTP.spthy.tmp
  processing time: 2.779823s
  secrecy_key (all-traces): verified (7 steps)
  key_ex (all-traces): verified (2 steps)
  secrecy_ex (all-traces): verified (2 steps)
  unic (all-traces): verified (8 steps)
  secrecy_chall (all-traces): verified (4 steps)
  valid (all-traces): verified (2 steps)
  unic_2 (all-traces): verified (8 steps)
  valid_final (all-traces): verified (2 steps)

==============================================================================
*/
