theory PKCS11TemplatePolicy begin

// Function signature and definition of the equational theory E

functions: attdec/1, attenc/1, attextr/1, attsens/1, atttrus/1,
           attunwrap/1, attut/1, attwrap/1, attwt/1, attwwt/1, fst/1, key/1,
           pair/2, sdec/2, senc/2, snd/1, tem/1
equations:
    attdec(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = dec,
    attenc(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = enc,
    attextr(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = extr,
    attsens(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = sens,
    atttrus(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = trus,
    attunwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = unwrap,
    attut(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = ut,
    attwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = wrap,
    attwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = wt,
    attwwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = wwt,
    fst(<x.1, x.2>) = x.1,
    key(<k, templ>) = k,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    tem(<k, templ>) = templ

rule (modulo E) 0:
   [ ] --[ Init( ) ]-> [ State_0( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0:
   [ State_0( ) ]
  --[
  Insert( <'template', 'trusted'>,
          <'on', 'on', 'off', 'off', 'on', 'on', 'on', 'on', 'usage', 'usage'
          >
  )
  ]->
   [ State_01( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01:
   [ State_01( ) ]
  --[
  Insert( <'template', 'usage'>,
          <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
           'undef'>
  )
  ]->
   [ State_011( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011:
   [ State_011( ) ]
  --[
  Insert( <'template', 'untrusted'>,
          <'off', 'off', 'on', 'on', 'off', 'on', 'off', 'off', 'undef', 
           'undef'>
  )
  ]->
   [ !State_0111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep0111:
   [ !State_0111( ) ] --> [ State_01111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111:
   [ State_01111( ) ] --> [ State_011111( ), State_011112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111:
   [ State_011111( ) ] --> [ State_0111111( ), State_0111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111:
   [ State_0111111( ) ] --> [ State_01111111( ), State_01111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111:
   [ State_01111111( ) ]
  -->
   [ State_011111111( ), State_011111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111:
   [ State_011111111( ) ]
  -->
   [ State_0111111111( ), State_0111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___create___atts__ptr_0111111111:
   [ State_0111111111( ), In( <'create', atts, ptr> ) ]
  -->
   [ State_01111111111( atts, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_01111111111:
   [ State_01111111111( atts, ptr ), Fr( ~lock13 ) ]
  --[ Lock( ~lock13, 'device' ) ]->
   [ State_011111111111( ~lock13, atts, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_h011111111111:
   [ State_011111111111( ~lock13, atts, ptr ), Fr( h ) ]
  -->
   [ State_0111111111111( ~lock13, atts, h, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_k0111111111111:
   [ State_0111111111111( ~lock13, atts, h, ptr ), Fr( k ) ]
  -->
   [ State_01111111111111( ~lock13, atts, h, k, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___template___ptr__as_templ01111111111111:
   [ State_01111111111111( ~lock13, atts, h, k, ptr ) ]
  --[ IsIn( <'template', ptr>, templ ) ]->
   [ State_011111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___template___ptr__as_templ01111111111111:
   [ State_01111111111111( ~lock13, atts, h, k, ptr ) ]
  --[ IsNotSet( <'template', ptr> ) ]->
   [ State_011111111111112( ~lock13, atts, h, k, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111:
   [ State_011111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[
  Pred_permits( attwrap(templ), attunwrap(templ), attenc(templ),
                attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
                attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
                attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
                attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
                attut(atts)
  )
  ]->
   [ State_0111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111:
     [ State_011111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[
    Pred_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9, z.10,
                  z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_0111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.27
       templ = templ.27
       z     = attwrap(templ.27)
       z.1   = attunwrap(templ.27)
       z.2   = attenc(templ.27)
       z.3   = attdec(templ.27)
       z.4   = attsens(templ.27)
       z.5   = attextr(templ.27)
       z.6   = atttrus(templ.27)
       z.7   = attwwt(templ.27)
       z.8   = attwt(templ.27)
       z.9   = attut(templ.27)
       z.10  = attwrap(atts.27)
       z.11  = attunwrap(atts.27)
       z.12  = attenc(atts.27)
       z.13  = attdec(atts.27)
       z.14  = attsens(atts.27)
       z.15  = attextr(atts.27)
       z.16  = atttrus(atts.27)
       z.17  = attwwt(atts.27)
       z.18  = attwt(atts.27)
       z.19  = attut(atts.27)
    
    2. atts  = atts.37
       templ = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36
               >
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(atts.37)
       z.11  = attunwrap(atts.37)
       z.12  = attenc(atts.37)
       z.13  = attdec(atts.37)
       z.14  = attsens(atts.37)
       z.15  = attextr(atts.37)
       z.16  = atttrus(atts.37)
       z.17  = attwwt(atts.37)
       z.18  = attwt(atts.37)
       z.19  = attut(atts.37)
    
    3. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36>
       templ = templ.37
       z     = attwrap(templ.37)
       z.1   = attunwrap(templ.37)
       z.2   = attenc(templ.37)
       z.3   = attdec(templ.37)
       z.4   = attsens(templ.37)
       z.5   = attextr(templ.37)
       z.6   = atttrus(templ.37)
       z.7   = attwwt(templ.37)
       z.8   = attwt(templ.37)
       z.9   = attut(templ.37)
       z.10  = x.27
       z.11  = x.28
       z.12  = x.29
       z.13  = x.30
       z.14  = x.31
       z.15  = x.32
       z.16  = x.33
       z.17  = x.34
       z.18  = x.35
       z.19  = x.36
    
    4. atts  = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45>
       templ = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, x.46
               >
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.27
       z.11  = x.29
       z.12  = x.31
       z.13  = x.33
       z.14  = x.35
       z.15  = x.37
       z.16  = x.39
       z.17  = x.41
       z.18  = x.43
       z.19  = x.45
  */

rule (modulo E) else__if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111:
   [ State_011111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[
  Pred_not_permits( attwrap(templ), attunwrap(templ), attenc(templ),
                    attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
                    attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
                    attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
                    attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
                    attut(atts)
  )
  ]->
   [ State_0111111111111112( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) else__if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111:
     [ State_011111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[
    Pred_not_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9,
                      z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_0111111111111112( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.27
       templ = templ.27
       z     = attwrap(templ.27)
       z.1   = attunwrap(templ.27)
       z.2   = attenc(templ.27)
       z.3   = attdec(templ.27)
       z.4   = attsens(templ.27)
       z.5   = attextr(templ.27)
       z.6   = atttrus(templ.27)
       z.7   = attwwt(templ.27)
       z.8   = attwt(templ.27)
       z.9   = attut(templ.27)
       z.10  = attwrap(atts.27)
       z.11  = attunwrap(atts.27)
       z.12  = attenc(atts.27)
       z.13  = attdec(atts.27)
       z.14  = attsens(atts.27)
       z.15  = attextr(atts.27)
       z.16  = atttrus(atts.27)
       z.17  = attwwt(atts.27)
       z.18  = attwt(atts.27)
       z.19  = attut(atts.27)
    
    2. atts  = atts.37
       templ = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36
               >
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(atts.37)
       z.11  = attunwrap(atts.37)
       z.12  = attenc(atts.37)
       z.13  = attdec(atts.37)
       z.14  = attsens(atts.37)
       z.15  = attextr(atts.37)
       z.16  = atttrus(atts.37)
       z.17  = attwwt(atts.37)
       z.18  = attwt(atts.37)
       z.19  = attut(atts.37)
    
    3. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36>
       templ = templ.37
       z     = attwrap(templ.37)
       z.1   = attunwrap(templ.37)
       z.2   = attenc(templ.37)
       z.3   = attdec(templ.37)
       z.4   = attsens(templ.37)
       z.5   = attextr(templ.37)
       z.6   = atttrus(templ.37)
       z.7   = attwwt(templ.37)
       z.8   = attwt(templ.37)
       z.9   = attut(templ.37)
       z.10  = x.27
       z.11  = x.28
       z.12  = x.29
       z.13  = x.30
       z.14  = x.31
       z.15  = x.32
       z.16  = x.33
       z.17  = x.34
       z.18  = x.35
       z.19  = x.36
    
    4. atts  = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45>
       templ = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, x.46
               >
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.27
       z.11  = x.29
       z.12  = x.31
       z.13  = x.33
       z.14  = x.35
       z.15  = x.37
       z.16  = x.39
       z.17  = x.41
       z.18  = x.43
       z.19  = x.45
  */

rule (modulo E) event_NewKey_h__k__attsens_atts__0111111111111111:
   [ State_0111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Event( ), NewKey( h, k, attsens(atts) ) ]->
   [ State_01111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) event_NewKey_h__k__attsens_atts__0111111111111111:
     [ State_0111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[ Event( ), NewKey( h, k, z ) ]->
     [ State_01111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attsens(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, 
                x.17>
       z     = x.12
  */

rule (modulo E) insert___obj___h___k__atts_01111111111111111:
   [ State_01111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Insert( <'obj', h>, <k, atts> ) ]->
   [ State_011111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_WrapKey_h__k__attwrap_atts__011111111111111111:
   [ State_011111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Event( ), WrapKey( h, k, attwrap(atts) ) ]->
   [ State_0111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) event_WrapKey_h__k__attwrap_atts__011111111111111111:
     [ State_011111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[ Event( ), WrapKey( h, k, z ) ]->
     [ State_0111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attwrap(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, 
                x.17>
       z     = x.8
  */

rule (modulo E) event_DecKey_h__k__attdec_atts__0111111111111111111:
   [ State_0111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Event( ), DecKey( h, k, attdec(atts) ) ]->
   [ State_01111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) event_DecKey_h__k__attdec_atts__0111111111111111111:
     [ State_0111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[ Event( ), DecKey( h, k, z ) ]->
     [ State_01111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attdec(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, 
                x.17>
       z     = x.11
  */

rule (modulo E) event_EncKey_h__k__attenc_atts__01111111111111111111:
   [ State_01111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Event( ), EncKey( h, k, attenc(atts) ) ]->
   [ State_011111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) event_EncKey_h__k__attenc_atts__01111111111111111111:
     [ State_01111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[ Event( ), EncKey( h, k, z ) ]->
     [ State_011111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attenc(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, 
                x.17>
       z     = x.10
  */

rule (modulo E) event_UnwrapKey_h__k__attunwrap_atts__011111111111111111111:
   [ State_011111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  --[ Event( ), UnwrapKey( h, k, attunwrap(atts) ) ]->
   [ State_0111111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]

  /*
  rule (modulo AC) event_UnwrapKey_h__k__attunwrap_atts__011111111111111111111:
     [ State_011111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    --[ Event( ), UnwrapKey( h, k, z ) ]->
     [ State_0111111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attunwrap(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, 
                x.17>
       z     = x.9
  */

rule (modulo E) out_h0111111111111111111111:
   [ State_0111111111111111111111( ~lock13, atts, h, k, ptr, templ ) ]
  -->
   [
   Out( h ),
   State_01111111111111111111111( ~lock13, atts, h, k, ptr, templ )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock__device_01111111111111111111111:
   [ State_01111111111111111111111( ~lock13, atts, h, k, ptr, templ )
   ]
  --[ Unlock( ~lock13, 'device' ) ]->
   [ State_011111111111111111111111( ~lock13, atts, h, k, ptr, templ )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero0111111111111112:
   [ State_0111111111111112( ~lock13, atts, h, k, ptr, templ ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in__h__senc_m__k__0111111112:
   [ State_0111111112( ), In( <h, senc(m, k)> ) ]
  -->
   [ State_01111111121( h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_01111111121:
   [ State_01111111121( h, k, m ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, 'device' ) ]->
   [ State_011111111211( ~lock7, h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h__as_v011111111211:
   [ State_011111111211( ~lock7, h, k, m ) ]
  --[ IsIn( <'obj', h>, v ) ]->
   [ State_0111111112111( ~lock7, h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h__as_v011111111211:
   [ State_011111111211( ~lock7, h, k, m ) ]
  --[ IsNotSet( <'obj', h> ) ]->
   [ State_0111111112112( ~lock7, h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_can_decrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111111112111:
   [ State_0111111112111( ~lock7, h, k, m, v ) ]
  --[
  Pred_can_decrypt( attwrap(tem(v)), attunwrap(tem(v)),
                    attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                    atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_01111111121111( ~lock7, h, k, m, v ) ]

  /*
  rule (modulo AC) if_can_decrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111111112111:
     [ State_0111111112111( ~lock7, h, k, m, v ) ]
    --[
    Pred_can_decrypt( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9 )
    ]->
     [ State_01111111121111( ~lock7, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.16
       z     = attwrap(tem(v.16))
       z.1   = attunwrap(tem(v.16))
       z.2   = attenc(tem(v.16))
       z.3   = attdec(tem(v.16))
       z.4   = attsens(tem(v.16))
       z.5   = attextr(tem(v.16))
       z.6   = atttrus(tem(v.16))
       z.7   = attwwt(tem(v.16))
       z.8   = attwt(tem(v.16))
       z.9   = attut(tem(v.16))
    
    2. v     = <x.16, x.17>
       z     = attwrap(x.17)
       z.1   = attunwrap(x.17)
       z.2   = attenc(x.17)
       z.3   = attdec(x.17)
       z.4   = attsens(x.17)
       z.5   = attextr(x.17)
       z.6   = atttrus(x.17)
       z.7   = attwwt(x.17)
       z.8   = attwt(x.17)
       z.9   = attut(x.17)
    
    3. v     = <x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, 
                x.25, x.26>
       z     = x.17
       z.1   = x.18
       z.2   = x.19
       z.3   = x.20
       z.4   = x.21
       z.5   = x.22
       z.6   = x.23
       z.7   = x.24
       z.8   = x.25
       z.9   = x.26
  */

rule (modulo E) else__if_can_decrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111111112111:
   [ State_0111111112111( ~lock7, h, k, m, v ) ]
  --[
  Pred_not_can_decrypt( attwrap(tem(v)), attunwrap(tem(v)),
                        attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                        atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_01111111121112( ~lock7, h, k, m, v ) ]

  /*
  rule (modulo AC) else__if_can_decrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111111112111:
     [ State_0111111112111( ~lock7, h, k, m, v ) ]
    --[
    Pred_not_can_decrypt( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8,
                          z.9
    )
    ]->
     [ State_01111111121112( ~lock7, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.16
       z     = attwrap(tem(v.16))
       z.1   = attunwrap(tem(v.16))
       z.2   = attenc(tem(v.16))
       z.3   = attdec(tem(v.16))
       z.4   = attsens(tem(v.16))
       z.5   = attextr(tem(v.16))
       z.6   = atttrus(tem(v.16))
       z.7   = attwwt(tem(v.16))
       z.8   = attwt(tem(v.16))
       z.9   = attut(tem(v.16))
    
    2. v     = <x.16, x.17>
       z     = attwrap(x.17)
       z.1   = attunwrap(x.17)
       z.2   = attenc(x.17)
       z.3   = attdec(x.17)
       z.4   = attsens(x.17)
       z.5   = attextr(x.17)
       z.6   = atttrus(x.17)
       z.7   = attwwt(x.17)
       z.8   = attwt(x.17)
       z.9   = attut(x.17)
    
    3. v     = <x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, 
                x.25, x.26>
       z     = x.17
       z.1   = x.18
       z.2   = x.19
       z.3   = x.20
       z.4   = x.21
       z.5   = x.22
       z.6   = x.23
       z.7   = x.24
       z.8   = x.25
       z.9   = x.26
  */

rule (modulo E) if_eq_key_v___k_01111111121111:
   [ State_01111111121111( ~lock7, h, k, m, v ) ]
  --[ Pred_eq( key(v), k ) ]->
   [ State_011111111211111( ~lock7, h, k, m, v ) ]

  /*
  rule (modulo AC) if_eq_key_v___k_01111111121111:
     [ State_01111111121111( ~lock7, h, k, m, v ) ]
    --[ Pred_eq( z, k ) ]->
     [ State_011111111211111( ~lock7, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = key(v.7)
    
    2. v     = <x.7, x.8>
       z     = x.7
  */

rule (modulo E) else__if_eq_key_v___k_01111111121111:
   [ State_01111111121111( ~lock7, h, k, m, v ) ]
  --[ Pred_not_eq( key(v), k ) ]->
   [ State_011111111211112( ~lock7, h, k, m, v ) ]

  /*
  rule (modulo AC) else__if_eq_key_v___k_01111111121111:
     [ State_01111111121111( ~lock7, h, k, m, v ) ]
    --[ Pred_not_eq( z, k ) ]->
     [ State_011111111211112( ~lock7, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = key(v.7)
    
    2. v     = <x.7, x.8>
       z     = x.7
  */

rule (modulo E) event_DecUsing_k__m_011111111211111:
   [ State_011111111211111( ~lock7, h, k, m, v ) ]
  --[ Event( ), DecUsing( k, m ) ]->
   [ State_0111111112111111( ~lock7, h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_m0111111112111111:
   [ State_0111111112111111( ~lock7, h, k, m, v ) ]
  -->
   [ Out( m ), State_01111111121111111( ~lock7, h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock__device_01111111121111111:
   [ State_01111111121111111( ~lock7, h, k, m, v ) ]
  --[ Unlock( ~lock7, 'device' ) ]->
   [ State_011111111211111111( ~lock7, h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero011111111211112:
   [ State_011111111211112( ~lock7, h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero01111111121112:
   [ State_01111111121112( ~lock7, h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in__h__m_011111112:
   [ State_011111112( ), In( <h, m> ) ]
  -->
   [ State_0111111121( h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_0111111121:
   [ State_0111111121( h, m ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, 'device' ) ]->
   [ State_01111111211( ~lock6, h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h__as_v01111111211:
   [ State_01111111211( ~lock6, h, m ) ]
  --[ IsIn( <'obj', h>, v ) ]->
   [ State_011111112111( ~lock6, h, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h__as_v01111111211:
   [ State_01111111211( ~lock6, h, m ) ]
  --[ IsNotSet( <'obj', h> ) ]->
   [ State_011111112112( ~lock6, h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_can_encrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011111112111:
   [ State_011111112111( ~lock6, h, m, v ) ]
  --[
  Pred_can_encrypt( attwrap(tem(v)), attunwrap(tem(v)),
                    attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                    atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_0111111121111( ~lock6, h, m, v ) ]

  /*
  rule (modulo AC) if_can_encrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011111112111:
     [ State_011111112111( ~lock6, h, m, v ) ]
    --[
    Pred_can_encrypt( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9 )
    ]->
     [ State_0111111121111( ~lock6, h, m, v ) ]
    variants (modulo AC)
    1. v     = v.15
       z     = attwrap(tem(v.15))
       z.1   = attunwrap(tem(v.15))
       z.2   = attenc(tem(v.15))
       z.3   = attdec(tem(v.15))
       z.4   = attsens(tem(v.15))
       z.5   = attextr(tem(v.15))
       z.6   = atttrus(tem(v.15))
       z.7   = attwwt(tem(v.15))
       z.8   = attwt(tem(v.15))
       z.9   = attut(tem(v.15))
    
    2. v     = <x.15, x.16>
       z     = attwrap(x.16)
       z.1   = attunwrap(x.16)
       z.2   = attenc(x.16)
       z.3   = attdec(x.16)
       z.4   = attsens(x.16)
       z.5   = attextr(x.16)
       z.6   = atttrus(x.16)
       z.7   = attwwt(x.16)
       z.8   = attwt(x.16)
       z.9   = attut(x.16)
    
    3. v     = <x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, 
                x.24, x.25>
       z     = x.16
       z.1   = x.17
       z.2   = x.18
       z.3   = x.19
       z.4   = x.20
       z.5   = x.21
       z.6   = x.22
       z.7   = x.23
       z.8   = x.24
       z.9   = x.25
  */

rule (modulo E) else__if_can_encrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011111112111:
   [ State_011111112111( ~lock6, h, m, v ) ]
  --[
  Pred_not_can_encrypt( attwrap(tem(v)), attunwrap(tem(v)),
                        attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                        atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_0111111121112( ~lock6, h, m, v ) ]

  /*
  rule (modulo AC) else__if_can_encrypt_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011111112111:
     [ State_011111112111( ~lock6, h, m, v ) ]
    --[
    Pred_not_can_encrypt( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8,
                          z.9
    )
    ]->
     [ State_0111111121112( ~lock6, h, m, v ) ]
    variants (modulo AC)
    1. v     = v.15
       z     = attwrap(tem(v.15))
       z.1   = attunwrap(tem(v.15))
       z.2   = attenc(tem(v.15))
       z.3   = attdec(tem(v.15))
       z.4   = attsens(tem(v.15))
       z.5   = attextr(tem(v.15))
       z.6   = atttrus(tem(v.15))
       z.7   = attwwt(tem(v.15))
       z.8   = attwt(tem(v.15))
       z.9   = attut(tem(v.15))
    
    2. v     = <x.15, x.16>
       z     = attwrap(x.16)
       z.1   = attunwrap(x.16)
       z.2   = attenc(x.16)
       z.3   = attdec(x.16)
       z.4   = attsens(x.16)
       z.5   = attextr(x.16)
       z.6   = atttrus(x.16)
       z.7   = attwwt(x.16)
       z.8   = attwt(x.16)
       z.9   = attut(x.16)
    
    3. v     = <x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, 
                x.24, x.25>
       z     = x.16
       z.1   = x.17
       z.2   = x.18
       z.3   = x.19
       z.4   = x.20
       z.5   = x.21
       z.6   = x.22
       z.7   = x.23
       z.8   = x.24
       z.9   = x.25
  */

rule (modulo E) event_EncUsing_key_v___m_0111111121111:
   [ State_0111111121111( ~lock6, h, m, v ) ]
  --[ Event( ), EncUsing( key(v), m ) ]->
   [ State_01111111211111( ~lock6, h, m, v ) ]

  /*
  rule (modulo AC) event_EncUsing_key_v___m_0111111121111:
     [ State_0111111121111( ~lock6, h, m, v ) ]
    --[ Event( ), EncUsing( z, m ) ]->
     [ State_01111111211111( ~lock6, h, m, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) out_senc_m__key_v__01111111211111:
   [ State_01111111211111( ~lock6, h, m, v ) ]
  -->
   [ Out( senc(m, key(v)) ), State_011111112111111( ~lock6, h, m, v )
   ]

  /*
  rule (modulo AC) out_senc_m__key_v__01111111211111:
     [ State_01111111211111( ~lock6, h, m, v ) ]
    -->
     [ Out( senc(m, z) ), State_011111112111111( ~lock6, h, m, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) unlock__device_011111112111111:
   [ State_011111112111111( ~lock6, h, m, v ) ]
  --[ Unlock( ~lock6, 'device' ) ]->
   [ State_0111111121111111( ~lock6, h, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero0111111121112:
   [ State_0111111121112( ~lock6, h, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in__h1__h2_01111112:
   [ State_01111112( ), In( <h1, h2> ) ]
  -->
   [ State_011111121( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_011111121:
   [ State_011111121( h1, h2 ), Fr( ~lock9 ) ]
  --[ Lock( ~lock9, 'device' ) ]->
   [ State_0111111211( ~lock9, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h1__as_v10111111211:
   [ State_0111111211( ~lock9, h1, h2 ) ]
  --[ IsIn( <'obj', h1>, v1 ) ]->
   [ State_01111112111( ~lock9, h1, h2, v1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h1__as_v10111111211:
   [ State_0111111211( ~lock9, h1, h2 ) ]
  --[ IsNotSet( <'obj', h1> ) ]->
   [ State_01111112112( ~lock9, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h2__as_v201111112111:
   [ State_01111112111( ~lock9, h1, h2, v1 ) ]
  --[ IsIn( <'obj', h2>, v2 ) ]->
   [ State_011111121111( ~lock9, h1, h2, v1, v2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h2__as_v201111112111:
   [ State_01111112111( ~lock9, h1, h2, v1 ) ]
  --[ IsNotSet( <'obj', h2> ) ]->
   [ State_011111121112( ~lock9, h1, h2, v1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_can_wrap_attwrap_tem_v1____attunwrap_tem_v1____attenc_tem_v1____attdec_tem_v1____attsens_tem_v1____attextr_tem_v1____atttrus_tem_v1____attwwt_tem_v1____attwt_tem_v1____attut_tem_v1____attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___011111121111:
   [ State_011111121111( ~lock9, h1, h2, v1, v2 ) ]
  --[
  Pred_can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)),
                 attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)),
                 attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)),
                 attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)),
                 attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)),
                 attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)),
                 attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
  )
  ]->
   [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]

  /*
  rule (modulo AC) if_can_wrap_attwrap_tem_v1____attunwrap_tem_v1____attenc_tem_v1____attdec_tem_v1____attsens_tem_v1____attextr_tem_v1____atttrus_tem_v1____attwwt_tem_v1____attwt_tem_v1____attut_tem_v1____attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___011111121111:
     [ State_011111121111( ~lock9, h1, h2, v1, v2 ) ]
    --[
    Pred_can_wrap( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9,
                   z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]
    variants (modulo AC)
    1. v1    = v1.26
       v2    = v2.26
       z     = attwrap(tem(v1.26))
       z.1   = attunwrap(tem(v1.26))
       z.2   = attenc(tem(v1.26))
       z.3   = attdec(tem(v1.26))
       z.4   = attsens(tem(v1.26))
       z.5   = attextr(tem(v1.26))
       z.6   = atttrus(tem(v1.26))
       z.7   = attwwt(tem(v1.26))
       z.8   = attwt(tem(v1.26))
       z.9   = attut(tem(v1.26))
       z.10  = attwrap(tem(v2.26))
       z.11  = attunwrap(tem(v2.26))
       z.12  = attenc(tem(v2.26))
       z.13  = attdec(tem(v2.26))
       z.14  = attsens(tem(v2.26))
       z.15  = attextr(tem(v2.26))
       z.16  = atttrus(tem(v2.26))
       z.17  = attwwt(tem(v2.26))
       z.18  = attwt(tem(v2.26))
       z.19  = attut(tem(v2.26))
    
    2. v1    = v1.28
       v2    = <x.26, x.27>
       z     = attwrap(tem(v1.28))
       z.1   = attunwrap(tem(v1.28))
       z.2   = attenc(tem(v1.28))
       z.3   = attdec(tem(v1.28))
       z.4   = attsens(tem(v1.28))
       z.5   = attextr(tem(v1.28))
       z.6   = atttrus(tem(v1.28))
       z.7   = attwwt(tem(v1.28))
       z.8   = attwt(tem(v1.28))
       z.9   = attut(tem(v1.28))
       z.10  = attwrap(x.27)
       z.11  = attunwrap(x.27)
       z.12  = attenc(x.27)
       z.13  = attdec(x.27)
       z.14  = attsens(x.27)
       z.15  = attextr(x.27)
       z.16  = atttrus(x.27)
       z.17  = attwwt(x.27)
       z.18  = attwt(x.27)
       z.19  = attut(x.27)
    
    3. v1    = v1.37
       v2    = <x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, 
                x.35, x.36>
       z     = attwrap(tem(v1.37))
       z.1   = attunwrap(tem(v1.37))
       z.2   = attenc(tem(v1.37))
       z.3   = attdec(tem(v1.37))
       z.4   = attsens(tem(v1.37))
       z.5   = attextr(tem(v1.37))
       z.6   = atttrus(tem(v1.37))
       z.7   = attwwt(tem(v1.37))
       z.8   = attwt(tem(v1.37))
       z.9   = attut(tem(v1.37))
       z.10  = x.27
       z.11  = x.28
       z.12  = x.29
       z.13  = x.30
       z.14  = x.31
       z.15  = x.32
       z.16  = x.33
       z.17  = x.34
       z.18  = x.35
       z.19  = x.36
    
    4. v1    = <x.26, x.27>
       v2    = v2.28
       z     = attwrap(x.27)
       z.1   = attunwrap(x.27)
       z.2   = attenc(x.27)
       z.3   = attdec(x.27)
       z.4   = attsens(x.27)
       z.5   = attextr(x.27)
       z.6   = atttrus(x.27)
       z.7   = attwwt(x.27)
       z.8   = attwt(x.27)
       z.9   = attut(x.27)
       z.10  = attwrap(tem(v2.28))
       z.11  = attunwrap(tem(v2.28))
       z.12  = attenc(tem(v2.28))
       z.13  = attdec(tem(v2.28))
       z.14  = attsens(tem(v2.28))
       z.15  = attextr(tem(v2.28))
       z.16  = atttrus(tem(v2.28))
       z.17  = attwwt(tem(v2.28))
       z.18  = attwt(tem(v2.28))
       z.19  = attut(tem(v2.28))
    
    5. v1    = <x.26, x.28>
       v2    = <x.27, x.29>
       z     = attwrap(x.28)
       z.1   = attunwrap(x.28)
       z.2   = attenc(x.28)
       z.3   = attdec(x.28)
       z.4   = attsens(x.28)
       z.5   = attextr(x.28)
       z.6   = atttrus(x.28)
       z.7   = attwwt(x.28)
       z.8   = attwt(x.28)
       z.9   = attut(x.28)
       z.10  = attwrap(x.29)
       z.11  = attunwrap(x.29)
       z.12  = attenc(x.29)
       z.13  = attdec(x.29)
       z.14  = attsens(x.29)
       z.15  = attextr(x.29)
       z.16  = atttrus(x.29)
       z.17  = attwwt(x.29)
       z.18  = attwt(x.29)
       z.19  = attut(x.29)
    
    6. v1    = <x.26, x.37>
       v2    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.38>
       z     = attwrap(x.37)
       z.1   = attunwrap(x.37)
       z.2   = attenc(x.37)
       z.3   = attdec(x.37)
       z.4   = attsens(x.37)
       z.5   = attextr(x.37)
       z.6   = atttrus(x.37)
       z.7   = attwwt(x.37)
       z.8   = attwt(x.37)
       z.9   = attut(x.37)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.38
    
    7. v1    = <x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, 
                x.35, x.36>
       v2    = v2.37
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(tem(v2.37))
       z.11  = attunwrap(tem(v2.37))
       z.12  = attenc(tem(v2.37))
       z.13  = attdec(tem(v2.37))
       z.14  = attsens(tem(v2.37))
       z.15  = attextr(tem(v2.37))
       z.16  = atttrus(tem(v2.37))
       z.17  = attwwt(tem(v2.37))
       z.18  = attwt(tem(v2.37))
       z.19  = attut(tem(v2.37))
    
    8. v1    = <x.26, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.38>
       v2    = <x.27, x.37>
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.38
       z.10  = attwrap(x.37)
       z.11  = attunwrap(x.37)
       z.12  = attenc(x.37)
       z.13  = attdec(x.37)
       z.14  = attsens(x.37)
       z.15  = attextr(x.37)
       z.16  = atttrus(x.37)
       z.17  = attwwt(x.37)
       z.18  = attwt(x.37)
       z.19  = attut(x.37)
    
    9. v1    = <x.26, x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, 
                x.44, x.46>
       v2    = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45, x.47>
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.29
       z.11  = x.31
       z.12  = x.33
       z.13  = x.35
       z.14  = x.37
       z.15  = x.39
       z.16  = x.41
       z.17  = x.43
       z.18  = x.45
       z.19  = x.47
  */

rule (modulo E) else__if_can_wrap_attwrap_tem_v1____attunwrap_tem_v1____attenc_tem_v1____attdec_tem_v1____attsens_tem_v1____attextr_tem_v1____atttrus_tem_v1____attwwt_tem_v1____attwt_tem_v1____attut_tem_v1____attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___011111121111:
   [ State_011111121111( ~lock9, h1, h2, v1, v2 ) ]
  --[
  Pred_not_can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)),
                     attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)),
                     attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)),
                     attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)),
                     attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)),
                     attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)),
                     attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
  )
  ]->
   [ State_0111111211112( ~lock9, h1, h2, v1, v2 ) ]

  /*
  rule (modulo AC) else__if_can_wrap_attwrap_tem_v1____attunwrap_tem_v1____attenc_tem_v1____attdec_tem_v1____attsens_tem_v1____attextr_tem_v1____atttrus_tem_v1____attwwt_tem_v1____attwt_tem_v1____attut_tem_v1____attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___011111121111:
     [ State_011111121111( ~lock9, h1, h2, v1, v2 ) ]
    --[
    Pred_not_can_wrap( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9,
                       z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_0111111211112( ~lock9, h1, h2, v1, v2 ) ]
    variants (modulo AC)
    1. v1    = v1.26
       v2    = v2.26
       z     = attwrap(tem(v1.26))
       z.1   = attunwrap(tem(v1.26))
       z.2   = attenc(tem(v1.26))
       z.3   = attdec(tem(v1.26))
       z.4   = attsens(tem(v1.26))
       z.5   = attextr(tem(v1.26))
       z.6   = atttrus(tem(v1.26))
       z.7   = attwwt(tem(v1.26))
       z.8   = attwt(tem(v1.26))
       z.9   = attut(tem(v1.26))
       z.10  = attwrap(tem(v2.26))
       z.11  = attunwrap(tem(v2.26))
       z.12  = attenc(tem(v2.26))
       z.13  = attdec(tem(v2.26))
       z.14  = attsens(tem(v2.26))
       z.15  = attextr(tem(v2.26))
       z.16  = atttrus(tem(v2.26))
       z.17  = attwwt(tem(v2.26))
       z.18  = attwt(tem(v2.26))
       z.19  = attut(tem(v2.26))
    
    2. v1    = v1.28
       v2    = <x.26, x.27>
       z     = attwrap(tem(v1.28))
       z.1   = attunwrap(tem(v1.28))
       z.2   = attenc(tem(v1.28))
       z.3   = attdec(tem(v1.28))
       z.4   = attsens(tem(v1.28))
       z.5   = attextr(tem(v1.28))
       z.6   = atttrus(tem(v1.28))
       z.7   = attwwt(tem(v1.28))
       z.8   = attwt(tem(v1.28))
       z.9   = attut(tem(v1.28))
       z.10  = attwrap(x.27)
       z.11  = attunwrap(x.27)
       z.12  = attenc(x.27)
       z.13  = attdec(x.27)
       z.14  = attsens(x.27)
       z.15  = attextr(x.27)
       z.16  = atttrus(x.27)
       z.17  = attwwt(x.27)
       z.18  = attwt(x.27)
       z.19  = attut(x.27)
    
    3. v1    = v1.37
       v2    = <x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, 
                x.35, x.36>
       z     = attwrap(tem(v1.37))
       z.1   = attunwrap(tem(v1.37))
       z.2   = attenc(tem(v1.37))
       z.3   = attdec(tem(v1.37))
       z.4   = attsens(tem(v1.37))
       z.5   = attextr(tem(v1.37))
       z.6   = atttrus(tem(v1.37))
       z.7   = attwwt(tem(v1.37))
       z.8   = attwt(tem(v1.37))
       z.9   = attut(tem(v1.37))
       z.10  = x.27
       z.11  = x.28
       z.12  = x.29
       z.13  = x.30
       z.14  = x.31
       z.15  = x.32
       z.16  = x.33
       z.17  = x.34
       z.18  = x.35
       z.19  = x.36
    
    4. v1    = <x.26, x.27>
       v2    = v2.28
       z     = attwrap(x.27)
       z.1   = attunwrap(x.27)
       z.2   = attenc(x.27)
       z.3   = attdec(x.27)
       z.4   = attsens(x.27)
       z.5   = attextr(x.27)
       z.6   = atttrus(x.27)
       z.7   = attwwt(x.27)
       z.8   = attwt(x.27)
       z.9   = attut(x.27)
       z.10  = attwrap(tem(v2.28))
       z.11  = attunwrap(tem(v2.28))
       z.12  = attenc(tem(v2.28))
       z.13  = attdec(tem(v2.28))
       z.14  = attsens(tem(v2.28))
       z.15  = attextr(tem(v2.28))
       z.16  = atttrus(tem(v2.28))
       z.17  = attwwt(tem(v2.28))
       z.18  = attwt(tem(v2.28))
       z.19  = attut(tem(v2.28))
    
    5. v1    = <x.26, x.28>
       v2    = <x.27, x.29>
       z     = attwrap(x.28)
       z.1   = attunwrap(x.28)
       z.2   = attenc(x.28)
       z.3   = attdec(x.28)
       z.4   = attsens(x.28)
       z.5   = attextr(x.28)
       z.6   = atttrus(x.28)
       z.7   = attwwt(x.28)
       z.8   = attwt(x.28)
       z.9   = attut(x.28)
       z.10  = attwrap(x.29)
       z.11  = attunwrap(x.29)
       z.12  = attenc(x.29)
       z.13  = attdec(x.29)
       z.14  = attsens(x.29)
       z.15  = attextr(x.29)
       z.16  = atttrus(x.29)
       z.17  = attwwt(x.29)
       z.18  = attwt(x.29)
       z.19  = attut(x.29)
    
    6. v1    = <x.26, x.37>
       v2    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.38>
       z     = attwrap(x.37)
       z.1   = attunwrap(x.37)
       z.2   = attenc(x.37)
       z.3   = attdec(x.37)
       z.4   = attsens(x.37)
       z.5   = attextr(x.37)
       z.6   = atttrus(x.37)
       z.7   = attwwt(x.37)
       z.8   = attwt(x.37)
       z.9   = attut(x.37)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.38
    
    7. v1    = <x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, 
                x.35, x.36>
       v2    = v2.37
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(tem(v2.37))
       z.11  = attunwrap(tem(v2.37))
       z.12  = attenc(tem(v2.37))
       z.13  = attdec(tem(v2.37))
       z.14  = attsens(tem(v2.37))
       z.15  = attextr(tem(v2.37))
       z.16  = atttrus(tem(v2.37))
       z.17  = attwwt(tem(v2.37))
       z.18  = attwt(tem(v2.37))
       z.19  = attut(tem(v2.37))
    
    8. v1    = <x.26, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.38>
       v2    = <x.27, x.37>
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.38
       z.10  = attwrap(x.37)
       z.11  = attunwrap(x.37)
       z.12  = attenc(x.37)
       z.13  = attdec(x.37)
       z.14  = attsens(x.37)
       z.15  = attextr(x.37)
       z.16  = atttrus(x.37)
       z.17  = attwwt(x.37)
       z.18  = attwt(x.37)
       z.19  = attut(x.37)
    
    9. v1    = <x.26, x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, 
                x.44, x.46>
       v2    = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45, x.47>
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.29
       z.11  = x.31
       z.12  = x.33
       z.13  = x.35
       z.14  = x.37
       z.15  = x.39
       z.16  = x.41
       z.17  = x.43
       z.18  = x.45
       z.19  = x.47
  */

rule (modulo E) lookup___template___attwt_tem_v1____as_wt0111111211111:
   [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]
  --[ IsIn( <'template', attwt(tem(v1))>, wt ) ]->
   [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]

  /*
  rule (modulo AC) lookup___template___attwt_tem_v1____as_wt0111111211111:
     [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]
    --[ IsIn( <'template', z>, wt ) ]->
     [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]
    variants (modulo AC)
    1. v1    = v1.10
       z     = attwt(tem(v1.10))
    
    2. v1    = <x.11, x.12>
       z     = attwt(x.12)
    
    3. v1    = <x.21, x.22, x.23, x.24, x.25, x.26, x.27, x.28, x.29, 
                z.20, x.31>
       z     = z.20
  */

rule (modulo E) else__lookup___template___attwt_tem_v1____as_wt0111111211111:
   [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]
  --[ IsNotSet( <'template', attwt(tem(v1))> ) ]->
   [ State_01111112111112( ~lock9, h1, h2, v1, v2 ) ]

  /*
  rule (modulo AC) else__lookup___template___attwt_tem_v1____as_wt0111111211111:
     [ State_0111111211111( ~lock9, h1, h2, v1, v2 ) ]
    --[ IsNotSet( <'template', z> ) ]->
     [ State_01111112111112( ~lock9, h1, h2, v1, v2 ) ]
    variants (modulo AC)
    1. v1    = v1.9
       z     = attwt(tem(v1.9))
    
    2. v1    = <x.10, x.11>
       z     = attwt(x.11)
    
    3. v1    = <x.20, x.21, x.22, x.23, x.24, x.25, x.26, x.27, x.28, 
                z.19, x.30>
       z     = z.19
  */

rule (modulo E) if_permits_attwrap_wt___attunwrap_wt___attenc_wt___attdec_wt___attsens_wt___attextr_wt___atttrus_wt___attwwt_wt___attwt_wt___attut_wt___attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___01111112111111:
   [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]
  --[
  Pred_permits( attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt),
                attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt),
                attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
                attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
                atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
  )
  ]->
   [ State_011111121111111( ~lock9, h1, h2, v1, v2, wt ) ]

  /*
  rule (modulo AC) if_permits_attwrap_wt___attunwrap_wt___attenc_wt___attdec_wt___attsens_wt___attextr_wt___atttrus_wt___attwwt_wt___attwt_wt___attut_wt___attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___01111112111111:
     [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]
    --[
    Pred_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9, z.10,
                  z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_011111121111111( ~lock9, h1, h2, v1, v2, wt ) ]
    variants (modulo AC)
    1. v2    = v2.27
       wt    = wt.27
       z     = attwrap(wt.27)
       z.1   = attunwrap(wt.27)
       z.2   = attenc(wt.27)
       z.3   = attdec(wt.27)
       z.4   = attsens(wt.27)
       z.5   = attextr(wt.27)
       z.6   = atttrus(wt.27)
       z.7   = attwwt(wt.27)
       z.8   = attwt(wt.27)
       z.9   = attut(wt.27)
       z.10  = attwrap(tem(v2.27))
       z.11  = attunwrap(tem(v2.27))
       z.12  = attenc(tem(v2.27))
       z.13  = attdec(tem(v2.27))
       z.14  = attsens(tem(v2.27))
       z.15  = attextr(tem(v2.27))
       z.16  = atttrus(tem(v2.27))
       z.17  = attwwt(tem(v2.27))
       z.18  = attwt(tem(v2.27))
       z.19  = attut(tem(v2.27))
    
    2. v2    = v2.37
       wt    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36
               >
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(tem(v2.37))
       z.11  = attunwrap(tem(v2.37))
       z.12  = attenc(tem(v2.37))
       z.13  = attdec(tem(v2.37))
       z.14  = attsens(tem(v2.37))
       z.15  = attextr(tem(v2.37))
       z.16  = atttrus(tem(v2.37))
       z.17  = attwwt(tem(v2.37))
       z.18  = attwt(tem(v2.37))
       z.19  = attut(tem(v2.37))
    
    3. v2    = <x.27, x.28>
       wt    = wt.29
       z     = attwrap(wt.29)
       z.1   = attunwrap(wt.29)
       z.2   = attenc(wt.29)
       z.3   = attdec(wt.29)
       z.4   = attsens(wt.29)
       z.5   = attextr(wt.29)
       z.6   = atttrus(wt.29)
       z.7   = attwwt(wt.29)
       z.8   = attwt(wt.29)
       z.9   = attut(wt.29)
       z.10  = attwrap(x.28)
       z.11  = attunwrap(x.28)
       z.12  = attenc(x.28)
       z.13  = attdec(x.28)
       z.14  = attsens(x.28)
       z.15  = attextr(x.28)
       z.16  = atttrus(x.28)
       z.17  = attwwt(x.28)
       z.18  = attwt(x.28)
       z.19  = attut(x.28)
    
    4. v2    = <x.27, x.37>
       wt    = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.38
               >
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.38
       z.10  = attwrap(x.37)
       z.11  = attunwrap(x.37)
       z.12  = attenc(x.37)
       z.13  = attdec(x.37)
       z.14  = attsens(x.37)
       z.15  = attextr(x.37)
       z.16  = atttrus(x.37)
       z.17  = attwwt(x.37)
       z.18  = attwt(x.37)
       z.19  = attut(x.37)
    
    5. v2    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.37>
       wt    = wt.38
       z     = attwrap(wt.38)
       z.1   = attunwrap(wt.38)
       z.2   = attenc(wt.38)
       z.3   = attdec(wt.38)
       z.4   = attsens(wt.38)
       z.5   = attextr(wt.38)
       z.6   = atttrus(wt.38)
       z.7   = attwwt(wt.38)
       z.8   = attwt(wt.38)
       z.9   = attut(wt.38)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.37
    
    6. v2    = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45, x.47>
       wt    = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, x.46
               >
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.29
       z.11  = x.31
       z.12  = x.33
       z.13  = x.35
       z.14  = x.37
       z.15  = x.39
       z.16  = x.41
       z.17  = x.43
       z.18  = x.45
       z.19  = x.47
  */

rule (modulo E) else__if_permits_attwrap_wt___attunwrap_wt___attenc_wt___attdec_wt___attsens_wt___attextr_wt___atttrus_wt___attwwt_wt___attwt_wt___attut_wt___attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___01111112111111:
   [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]
  --[
  Pred_not_permits( attwrap(wt), attunwrap(wt), attenc(wt),
                    attdec(wt), attsens(wt), attextr(wt), atttrus(wt), attwwt(wt),
                    attwt(wt), attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)),
                    attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)),
                    attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)),
                    attwt(tem(v2)), attut(tem(v2))
  )
  ]->
   [ State_011111121111112( ~lock9, h1, h2, v1, v2, wt ) ]

  /*
  rule (modulo AC) else__if_permits_attwrap_wt___attunwrap_wt___attenc_wt___attdec_wt___attsens_wt___attextr_wt___atttrus_wt___attwwt_wt___attwt_wt___attut_wt___attwrap_tem_v2____attunwrap_tem_v2____attenc_tem_v2____attdec_tem_v2____attsens_tem_v2____attextr_tem_v2____atttrus_tem_v2____attwwt_tem_v2____attwt_tem_v2____attut_tem_v2___01111112111111:
     [ State_01111112111111( ~lock9, h1, h2, v1, v2, wt ) ]
    --[
    Pred_not_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9,
                      z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_011111121111112( ~lock9, h1, h2, v1, v2, wt ) ]
    variants (modulo AC)
    1. v2    = v2.27
       wt    = wt.27
       z     = attwrap(wt.27)
       z.1   = attunwrap(wt.27)
       z.2   = attenc(wt.27)
       z.3   = attdec(wt.27)
       z.4   = attsens(wt.27)
       z.5   = attextr(wt.27)
       z.6   = atttrus(wt.27)
       z.7   = attwwt(wt.27)
       z.8   = attwt(wt.27)
       z.9   = attut(wt.27)
       z.10  = attwrap(tem(v2.27))
       z.11  = attunwrap(tem(v2.27))
       z.12  = attenc(tem(v2.27))
       z.13  = attdec(tem(v2.27))
       z.14  = attsens(tem(v2.27))
       z.15  = attextr(tem(v2.27))
       z.16  = atttrus(tem(v2.27))
       z.17  = attwwt(tem(v2.27))
       z.18  = attwt(tem(v2.27))
       z.19  = attut(tem(v2.27))
    
    2. v2    = v2.37
       wt    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36
               >
       z     = x.27
       z.1   = x.28
       z.2   = x.29
       z.3   = x.30
       z.4   = x.31
       z.5   = x.32
       z.6   = x.33
       z.7   = x.34
       z.8   = x.35
       z.9   = x.36
       z.10  = attwrap(tem(v2.37))
       z.11  = attunwrap(tem(v2.37))
       z.12  = attenc(tem(v2.37))
       z.13  = attdec(tem(v2.37))
       z.14  = attsens(tem(v2.37))
       z.15  = attextr(tem(v2.37))
       z.16  = atttrus(tem(v2.37))
       z.17  = attwwt(tem(v2.37))
       z.18  = attwt(tem(v2.37))
       z.19  = attut(tem(v2.37))
    
    3. v2    = <x.27, x.28>
       wt    = wt.29
       z     = attwrap(wt.29)
       z.1   = attunwrap(wt.29)
       z.2   = attenc(wt.29)
       z.3   = attdec(wt.29)
       z.4   = attsens(wt.29)
       z.5   = attextr(wt.29)
       z.6   = atttrus(wt.29)
       z.7   = attwwt(wt.29)
       z.8   = attwt(wt.29)
       z.9   = attut(wt.29)
       z.10  = attwrap(x.28)
       z.11  = attunwrap(x.28)
       z.12  = attenc(x.28)
       z.13  = attdec(x.28)
       z.14  = attsens(x.28)
       z.15  = attextr(x.28)
       z.16  = atttrus(x.28)
       z.17  = attwwt(x.28)
       z.18  = attwt(x.28)
       z.19  = attut(x.28)
    
    4. v2    = <x.27, x.37>
       wt    = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.38
               >
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.38
       z.10  = attwrap(x.37)
       z.11  = attunwrap(x.37)
       z.12  = attenc(x.37)
       z.13  = attdec(x.37)
       z.14  = attsens(x.37)
       z.15  = attextr(x.37)
       z.16  = atttrus(x.37)
       z.17  = attwwt(x.37)
       z.18  = attwt(x.37)
       z.19  = attut(x.37)
    
    5. v2    = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                x.36, x.37>
       wt    = wt.38
       z     = attwrap(wt.38)
       z.1   = attunwrap(wt.38)
       z.2   = attenc(wt.38)
       z.3   = attdec(wt.38)
       z.4   = attsens(wt.38)
       z.5   = attextr(wt.38)
       z.6   = atttrus(wt.38)
       z.7   = attwwt(wt.38)
       z.8   = attwt(wt.38)
       z.9   = attut(wt.38)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.37
    
    6. v2    = <x.27, x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, 
                x.45, x.47>
       wt    = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, x.46
               >
       z     = x.28
       z.1   = x.30
       z.2   = x.32
       z.3   = x.34
       z.4   = x.36
       z.5   = x.38
       z.6   = x.40
       z.7   = x.42
       z.8   = x.44
       z.9   = x.46
       z.10  = x.29
       z.11  = x.31
       z.12  = x.33
       z.13  = x.35
       z.14  = x.37
       z.15  = x.39
       z.16  = x.41
       z.17  = x.43
       z.18  = x.45
       z.19  = x.47
  */

rule (modulo E) event_Wrap_key_v1___key_v2__011111121111111:
   [ State_011111121111111( ~lock9, h1, h2, v1, v2, wt ) ]
  --[ Event( ), Wrap( key(v1), key(v2) ) ]->
   [ State_0111111211111111( ~lock9, h1, h2, v1, v2, wt ) ]

  /*
  rule (modulo AC) event_Wrap_key_v1___key_v2__011111121111111:
     [ State_011111121111111( ~lock9, h1, h2, v1, v2, wt ) ]
    --[ Event( ), Wrap( z, z.1 ) ]->
     [ State_0111111211111111( ~lock9, h1, h2, v1, v2, wt ) ]
    variants (modulo AC)
    1. v1    = v1.9
       v2    = v2.9
       z     = key(v1.9)
       z.1   = key(v2.9)
    
    2. v1    = v1.11
       v2    = <x.9, x.10>
       z     = key(v1.11)
       z.1   = x.9
    
    3. v1    = <x.9, x.10>
       v2    = v2.11
       z     = x.9
       z.1   = key(v2.11)
    
    4. v1    = <x.9, x.11>
       v2    = <x.10, x.12>
       z     = x.9
       z.1   = x.10
  */

rule (modulo E) out_senc_key_v2___key_v1__0111111211111111:
   [ State_0111111211111111( ~lock9, h1, h2, v1, v2, wt ) ]
  -->
   [
   Out( senc(key(v2), key(v1)) ),
   State_01111112111111111( ~lock9, h1, h2, v1, v2, wt )
   ]

  /*
  rule (modulo AC) out_senc_key_v2___key_v1__0111111211111111:
     [ State_0111111211111111( ~lock9, h1, h2, v1, v2, wt ) ]
    -->
     [
     Out( senc(z, z.1) ),
     State_01111112111111111( ~lock9, h1, h2, v1, v2, wt )
     ]
    variants (modulo AC)
    1. v1    = v1.9
       v2    = v2.9
       z     = key(v2.9)
       z.1   = key(v1.9)
    
    2. v1    = v1.11
       v2    = <x.9, x.10>
       z     = x.9
       z.1   = key(v1.11)
    
    3. v1    = <x.9, x.10>
       v2    = v2.11
       z     = key(v2.11)
       z.1   = x.9
    
    4. v1    = <x.9, x.11>
       v2    = <x.10, x.12>
       z     = x.10
       z.1   = x.9
  */

rule (modulo E) unlock__device_01111112111111111:
   [ State_01111112111111111( ~lock9, h1, h2, v1, v2, wt ) ]
  --[ Unlock( ~lock9, 'device' ) ]->
   [ State_011111121111111111( ~lock9, h1, h2, v1, v2, wt ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero011111121111112:
   [ State_011111121111112( ~lock9, h1, h2, v1, v2, wt ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero0111111211112:
   [ State_0111111211112( ~lock9, h1, h2, v1, v2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in__h__senc_m__k___atts_0111112:
   [ State_0111112( ), In( <h, senc(m, k), atts> ) ]
  -->
   [ State_01111121( atts, h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_01111121:
   [ State_01111121( atts, h, k, m ), Fr( ~lock15 ) ]
  --[ Lock( ~lock15, 'device' ) ]->
   [ State_011111211( ~lock15, atts, h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h__as_v011111211:
   [ State_011111211( ~lock15, atts, h, k, m ) ]
  --[ IsIn( <'obj', h>, v ) ]->
   [ State_0111112111( ~lock15, atts, h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h__as_v011111211:
   [ State_011111211( ~lock15, atts, h, k, m ) ]
  --[ IsNotSet( <'obj', h> ) ]->
   [ State_0111112112( ~lock15, atts, h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_can_unwrap_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111112111:
   [ State_0111112111( ~lock15, atts, h, k, m, v ) ]
  --[
  Pred_can_unwrap( attwrap(tem(v)), attunwrap(tem(v)),
                   attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                   atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_01111121111( ~lock15, atts, h, k, m, v ) ]

  /*
  rule (modulo AC) if_can_unwrap_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111112111:
     [ State_0111112111( ~lock15, atts, h, k, m, v ) ]
    --[
    Pred_can_unwrap( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9 )
    ]->
     [ State_01111121111( ~lock15, atts, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.17
       z     = attwrap(tem(v.17))
       z.1   = attunwrap(tem(v.17))
       z.2   = attenc(tem(v.17))
       z.3   = attdec(tem(v.17))
       z.4   = attsens(tem(v.17))
       z.5   = attextr(tem(v.17))
       z.6   = atttrus(tem(v.17))
       z.7   = attwwt(tem(v.17))
       z.8   = attwt(tem(v.17))
       z.9   = attut(tem(v.17))
    
    2. v     = <x.17, x.18>
       z     = attwrap(x.18)
       z.1   = attunwrap(x.18)
       z.2   = attenc(x.18)
       z.3   = attdec(x.18)
       z.4   = attsens(x.18)
       z.5   = attextr(x.18)
       z.6   = atttrus(x.18)
       z.7   = attwwt(x.18)
       z.8   = attwt(x.18)
       z.9   = attut(x.18)
    
    3. v     = <x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, x.25, 
                x.26, x.27>
       z     = x.18
       z.1   = x.19
       z.2   = x.20
       z.3   = x.21
       z.4   = x.22
       z.5   = x.23
       z.6   = x.24
       z.7   = x.25
       z.8   = x.26
       z.9   = x.27
  */

rule (modulo E) else__if_can_unwrap_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111112111:
   [ State_0111112111( ~lock15, atts, h, k, m, v ) ]
  --[
  Pred_not_can_unwrap( attwrap(tem(v)), attunwrap(tem(v)),
                       attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                       atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_01111121112( ~lock15, atts, h, k, m, v ) ]

  /*
  rule (modulo AC) else__if_can_unwrap_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___0111112111:
     [ State_0111112111( ~lock15, atts, h, k, m, v ) ]
    --[
    Pred_not_can_unwrap( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9
    )
    ]->
     [ State_01111121112( ~lock15, atts, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.17
       z     = attwrap(tem(v.17))
       z.1   = attunwrap(tem(v.17))
       z.2   = attenc(tem(v.17))
       z.3   = attdec(tem(v.17))
       z.4   = attsens(tem(v.17))
       z.5   = attextr(tem(v.17))
       z.6   = atttrus(tem(v.17))
       z.7   = attwwt(tem(v.17))
       z.8   = attwt(tem(v.17))
       z.9   = attut(tem(v.17))
    
    2. v     = <x.17, x.18>
       z     = attwrap(x.18)
       z.1   = attunwrap(x.18)
       z.2   = attenc(x.18)
       z.3   = attdec(x.18)
       z.4   = attsens(x.18)
       z.5   = attextr(x.18)
       z.6   = atttrus(x.18)
       z.7   = attwwt(x.18)
       z.8   = attwt(x.18)
       z.9   = attut(x.18)
    
    3. v     = <x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, x.25, 
                x.26, x.27>
       z     = x.18
       z.1   = x.19
       z.2   = x.20
       z.3   = x.21
       z.4   = x.22
       z.5   = x.23
       z.6   = x.24
       z.7   = x.25
       z.8   = x.26
       z.9   = x.27
  */

rule (modulo E) if_eq_key_v___k_01111121111:
   [ State_01111121111( ~lock15, atts, h, k, m, v ) ]
  --[ Pred_eq( key(v), k ) ]->
   [ State_011111211111( ~lock15, atts, h, k, m, v ) ]

  /*
  rule (modulo AC) if_eq_key_v___k_01111121111:
     [ State_01111121111( ~lock15, atts, h, k, m, v ) ]
    --[ Pred_eq( z, k ) ]->
     [ State_011111211111( ~lock15, atts, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) else__if_eq_key_v___k_01111121111:
   [ State_01111121111( ~lock15, atts, h, k, m, v ) ]
  --[ Pred_not_eq( key(v), k ) ]->
   [ State_011111211112( ~lock15, atts, h, k, m, v ) ]

  /*
  rule (modulo AC) else__if_eq_key_v___k_01111121111:
     [ State_01111121111( ~lock15, atts, h, k, m, v ) ]
    --[ Pred_not_eq( z, k ) ]->
     [ State_011111211112( ~lock15, atts, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) lookup___template___attut_tem_v____as_ut011111211111:
   [ State_011111211111( ~lock15, atts, h, k, m, v ) ]
  --[ IsIn( <'template', attut(tem(v))>, ut ) ]->
   [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]

  /*
  rule (modulo AC) lookup___template___attut_tem_v____as_ut011111211111:
     [ State_011111211111( ~lock15, atts, h, k, m, v ) ]
    --[ IsIn( <'template', z>, ut ) ]->
     [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]
    variants (modulo AC)
    1. v     = v.11
       z     = attut(tem(v.11))
    
    2. v     = <x.12, x.13>
       z     = attut(x.13)
    
    3. v     = <x.22, x.23, x.24, x.25, x.26, x.27, x.28, x.29, x.30, 
                x.31, z.21>
       z     = z.21
  */

rule (modulo E) else__lookup___template___attut_tem_v____as_ut011111211111:
   [ State_011111211111( ~lock15, atts, h, k, m, v ) ]
  --[ IsNotSet( <'template', attut(tem(v))> ) ]->
   [ State_0111112111112( ~lock15, atts, h, k, m, v ) ]

  /*
  rule (modulo AC) else__lookup___template___attut_tem_v____as_ut011111211111:
     [ State_011111211111( ~lock15, atts, h, k, m, v ) ]
    --[ IsNotSet( <'template', z> ) ]->
     [ State_0111112111112( ~lock15, atts, h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.10
       z     = attut(tem(v.10))
    
    2. v     = <x.11, x.12>
       z     = attut(x.12)
    
    3. v     = <x.21, x.22, x.23, x.24, x.25, x.26, x.27, x.28, x.29, 
                x.30, z.20>
       z     = z.20
  */

rule (modulo E) if_permits_attwrap_ut___attunwrap_ut___attenc_ut___attdec_ut___attsens_ut___attextr_ut___atttrus_ut___attwwt_ut___attwt_ut___attut_ut___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__0111112111111:
   [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]
  --[
  Pred_permits( attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut),
                attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut),
                attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
                attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
                attwwt(atts), attwt(atts), attut(atts)
  )
  ]->
   [ State_01111121111111( ~lock15, atts, h, k, m, ut, v ) ]

  /*
  rule (modulo AC) if_permits_attwrap_ut___attunwrap_ut___attenc_ut___attdec_ut___attsens_ut___attextr_ut___atttrus_ut___attwwt_ut___attwt_ut___attut_ut___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__0111112111111:
     [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]
    --[
    Pred_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9, z.10,
                  z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_01111121111111( ~lock15, atts, h, k, m, ut, v ) ]
    variants (modulo AC)
    1. atts  = atts.28
       ut    = ut.28
       z     = attwrap(ut.28)
       z.1   = attunwrap(ut.28)
       z.2   = attenc(ut.28)
       z.3   = attdec(ut.28)
       z.4   = attsens(ut.28)
       z.5   = attextr(ut.28)
       z.6   = atttrus(ut.28)
       z.7   = attwwt(ut.28)
       z.8   = attwt(ut.28)
       z.9   = attut(ut.28)
       z.10  = attwrap(atts.28)
       z.11  = attunwrap(atts.28)
       z.12  = attenc(atts.28)
       z.13  = attdec(atts.28)
       z.14  = attsens(atts.28)
       z.15  = attextr(atts.28)
       z.16  = atttrus(atts.28)
       z.17  = attwwt(atts.28)
       z.18  = attwt(atts.28)
       z.19  = attut(atts.28)
    
    2. atts  = atts.38
       ut    = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37
               >
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.37
       z.10  = attwrap(atts.38)
       z.11  = attunwrap(atts.38)
       z.12  = attenc(atts.38)
       z.13  = attdec(atts.38)
       z.14  = attsens(atts.38)
       z.15  = attextr(atts.38)
       z.16  = atttrus(atts.38)
       z.17  = attwwt(atts.38)
       z.18  = attwt(atts.38)
       z.19  = attut(atts.38)
    
    3. atts  = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, 
                x.37>
       ut    = ut.38
       z     = attwrap(ut.38)
       z.1   = attunwrap(ut.38)
       z.2   = attenc(ut.38)
       z.3   = attdec(ut.38)
       z.4   = attsens(ut.38)
       z.5   = attextr(ut.38)
       z.6   = atttrus(ut.38)
       z.7   = attwwt(ut.38)
       z.8   = attwt(ut.38)
       z.9   = attut(ut.38)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.37
    
    4. atts  = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, 
                x.46>
       ut    = <x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, x.45, x.47
               >
       z     = x.29
       z.1   = x.31
       z.2   = x.33
       z.3   = x.35
       z.4   = x.37
       z.5   = x.39
       z.6   = x.41
       z.7   = x.43
       z.8   = x.45
       z.9   = x.47
       z.10  = x.28
       z.11  = x.30
       z.12  = x.32
       z.13  = x.34
       z.14  = x.36
       z.15  = x.38
       z.16  = x.40
       z.17  = x.42
       z.18  = x.44
       z.19  = x.46
  */

rule (modulo E) else__if_permits_attwrap_ut___attunwrap_ut___attenc_ut___attdec_ut___attsens_ut___attextr_ut___atttrus_ut___attwwt_ut___attwt_ut___attut_ut___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__0111112111111:
   [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]
  --[
  Pred_not_permits( attwrap(ut), attunwrap(ut), attenc(ut),
                    attdec(ut), attsens(ut), attextr(ut), atttrus(ut), attwwt(ut),
                    attwt(ut), attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
                    attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
                    attwwt(atts), attwt(atts), attut(atts)
  )
  ]->
   [ State_01111121111112( ~lock15, atts, h, k, m, ut, v ) ]

  /*
  rule (modulo AC) else__if_permits_attwrap_ut___attunwrap_ut___attenc_ut___attdec_ut___attsens_ut___attextr_ut___atttrus_ut___attwwt_ut___attwt_ut___attut_ut___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__0111112111111:
     [ State_0111112111111( ~lock15, atts, h, k, m, ut, v ) ]
    --[
    Pred_not_permits( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8, z.9,
                      z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19
    )
    ]->
     [ State_01111121111112( ~lock15, atts, h, k, m, ut, v ) ]
    variants (modulo AC)
    1. atts  = atts.28
       ut    = ut.28
       z     = attwrap(ut.28)
       z.1   = attunwrap(ut.28)
       z.2   = attenc(ut.28)
       z.3   = attdec(ut.28)
       z.4   = attsens(ut.28)
       z.5   = attextr(ut.28)
       z.6   = atttrus(ut.28)
       z.7   = attwwt(ut.28)
       z.8   = attwt(ut.28)
       z.9   = attut(ut.28)
       z.10  = attwrap(atts.28)
       z.11  = attunwrap(atts.28)
       z.12  = attenc(atts.28)
       z.13  = attdec(atts.28)
       z.14  = attsens(atts.28)
       z.15  = attextr(atts.28)
       z.16  = atttrus(atts.28)
       z.17  = attwwt(atts.28)
       z.18  = attwt(atts.28)
       z.19  = attut(atts.28)
    
    2. atts  = atts.38
       ut    = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37
               >
       z     = x.28
       z.1   = x.29
       z.2   = x.30
       z.3   = x.31
       z.4   = x.32
       z.5   = x.33
       z.6   = x.34
       z.7   = x.35
       z.8   = x.36
       z.9   = x.37
       z.10  = attwrap(atts.38)
       z.11  = attunwrap(atts.38)
       z.12  = attenc(atts.38)
       z.13  = attdec(atts.38)
       z.14  = attsens(atts.38)
       z.15  = attextr(atts.38)
       z.16  = atttrus(atts.38)
       z.17  = attwwt(atts.38)
       z.18  = attwt(atts.38)
       z.19  = attut(atts.38)
    
    3. atts  = <x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36, 
                x.37>
       ut    = ut.38
       z     = attwrap(ut.38)
       z.1   = attunwrap(ut.38)
       z.2   = attenc(ut.38)
       z.3   = attdec(ut.38)
       z.4   = attsens(ut.38)
       z.5   = attextr(ut.38)
       z.6   = atttrus(ut.38)
       z.7   = attwwt(ut.38)
       z.8   = attwt(ut.38)
       z.9   = attut(ut.38)
       z.10  = x.28
       z.11  = x.29
       z.12  = x.30
       z.13  = x.31
       z.14  = x.32
       z.15  = x.33
       z.16  = x.34
       z.17  = x.35
       z.18  = x.36
       z.19  = x.37
    
    4. atts  = <x.28, x.30, x.32, x.34, x.36, x.38, x.40, x.42, x.44, 
                x.46>
       ut    = <x.29, x.31, x.33, x.35, x.37, x.39, x.41, x.43, x.45, x.47
               >
       z     = x.29
       z.1   = x.31
       z.2   = x.33
       z.3   = x.35
       z.4   = x.37
       z.5   = x.39
       z.6   = x.41
       z.7   = x.43
       z.8   = x.45
       z.9   = x.47
       z.10  = x.28
       z.11  = x.30
       z.12  = x.32
       z.13  = x.34
       z.14  = x.36
       z.15  = x.38
       z.16  = x.40
       z.17  = x.42
       z.18  = x.44
       z.19  = x.46
  */

rule (modulo E) new_h201111121111111:
   [ State_01111121111111( ~lock15, atts, h, k, m, ut, v ), Fr( h2 ) ]
  -->
   [ State_011111211111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___obj___h2___m__atts_011111211111111:
   [ State_011111211111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Insert( <'obj', h2>, <m, atts> ) ]->
   [ State_0111112111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Unwrapped_h2__m__atts_0111112111111111:
   [ State_0111112111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Event( ), Unwrapped( h2, m, atts ) ]->
   [ State_01111121111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_WrapKey_h2__m__attwrap_atts__01111121111111111:
   [ State_01111121111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Event( ), WrapKey( h2, m, attwrap(atts) ) ]->
   [ State_011111211111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /*
  rule (modulo AC) event_WrapKey_h2__m__attwrap_atts__01111121111111111:
     [ State_01111121111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    --[ Event( ), WrapKey( h2, m, z ) ]->
     [ State_011111211111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    variants (modulo AC)
    1. atts  = atts.10
       z     = attwrap(atts.10)
    
    2. atts  = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, 
                x.19>
       z     = x.10
  */

rule (modulo E) event_DecKey_h2__m__attdec_atts__011111211111111111:
   [ State_011111211111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Event( ), DecKey( h2, m, attdec(atts) ) ]->
   [ State_0111112111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /*
  rule (modulo AC) event_DecKey_h2__m__attdec_atts__011111211111111111:
     [ State_011111211111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    --[ Event( ), DecKey( h2, m, z ) ]->
     [ State_0111112111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    variants (modulo AC)
    1. atts  = atts.10
       z     = attdec(atts.10)
    
    2. atts  = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, 
                x.19>
       z     = x.13
  */

rule (modulo E) event_EncKey_h2__m__attenc_atts__0111112111111111111:
   [ State_0111112111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Event( ), EncKey( h2, m, attenc(atts) ) ]->
   [ State_01111121111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]

  /*
  rule (modulo AC) event_EncKey_h2__m__attenc_atts__0111112111111111111:
     [ State_0111112111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    --[ Event( ), EncKey( h2, m, z ) ]->
     [ State_01111121111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    variants (modulo AC)
    1. atts  = atts.10
       z     = attenc(atts.10)
    
    2. atts  = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, 
                x.19>
       z     = x.12
  */

rule (modulo E) event_UnwrapKey_h2__m__attunwrap_atts__01111121111111111111:
   [ State_01111121111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
  --[ Event( ), UnwrapKey( h2, m, attunwrap(atts) ) ]->
   [ State_011111211111111111111( ~lock15, atts, h, h2, k, m, ut, v )
   ]

  /*
  rule (modulo AC) event_UnwrapKey_h2__m__attunwrap_atts__01111121111111111111:
     [ State_01111121111111111111( ~lock15, atts, h, h2, k, m, ut, v ) ]
    --[ Event( ), UnwrapKey( h2, m, z ) ]->
     [ State_011111211111111111111( ~lock15, atts, h, h2, k, m, ut, v )
     ]
    variants (modulo AC)
    1. atts  = atts.10
       z     = attunwrap(atts.10)
    
    2. atts  = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, 
                x.19>
       z     = x.11
  */

rule (modulo E) out_h2011111211111111111111:
   [ State_011111211111111111111( ~lock15, atts, h, h2, k, m, ut, v )
   ]
  -->
   [
   Out( h2 ),
   State_0111112111111111111111( ~lock15, atts, h, h2, k, m, ut, v )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock__device_0111112111111111111111:
   [ State_0111112111111111111111( ~lock15, atts, h, h2, k, m, ut, v )
   ]
  --[ Unlock( ~lock15, 'device' ) ]->
   [
   State_01111121111111111111111( ~lock15, atts, h, h2, k, m, ut, v )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero01111121111112:
   [ State_01111121111112( ~lock15, atts, h, k, m, ut, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero011111211112:
   [ State_011111211112( ~lock15, atts, h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero01111121112:
   [ State_01111121112( ~lock15, atts, h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_h011112:
   [ State_011112( ), In( h ) ] --> [ State_0111121( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock__device_0111121:
   [ State_0111121( h ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, 'device' ) ]->
   [ State_01111211( ~lock6, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___obj___h__as_v01111211:
   [ State_01111211( ~lock6, h ) ]
  --[ IsIn( <'obj', h>, v ) ]->
   [ State_011112111( ~lock6, h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___obj___h__as_v01111211:
   [ State_01111211( ~lock6, h ) ]
  --[ IsNotSet( <'obj', h> ) ]->
   [ State_011112112( ~lock6, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_can_get_keyvalue_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011112111:
   [ State_011112111( ~lock6, h, v ) ]
  --[
  Pred_can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                         attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                         atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_0111121111( ~lock6, h, v ) ]

  /*
  rule (modulo AC) if_can_get_keyvalue_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011112111:
     [ State_011112111( ~lock6, h, v ) ]
    --[
    Pred_can_get_keyvalue( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7, z.8,
                           z.9
    )
    ]->
     [ State_0111121111( ~lock6, h, v ) ]
    variants (modulo AC)
    1. v     = v.14
       z     = attwrap(tem(v.14))
       z.1   = attunwrap(tem(v.14))
       z.2   = attenc(tem(v.14))
       z.3   = attdec(tem(v.14))
       z.4   = attsens(tem(v.14))
       z.5   = attextr(tem(v.14))
       z.6   = atttrus(tem(v.14))
       z.7   = attwwt(tem(v.14))
       z.8   = attwt(tem(v.14))
       z.9   = attut(tem(v.14))
    
    2. v     = <x.14, x.15>
       z     = attwrap(x.15)
       z.1   = attunwrap(x.15)
       z.2   = attenc(x.15)
       z.3   = attdec(x.15)
       z.4   = attsens(x.15)
       z.5   = attextr(x.15)
       z.6   = atttrus(x.15)
       z.7   = attwwt(x.15)
       z.8   = attwt(x.15)
       z.9   = attut(x.15)
    
    3. v     = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23, x.24>
       z     = x.15
       z.1   = x.16
       z.2   = x.17
       z.3   = x.18
       z.4   = x.19
       z.5   = x.20
       z.6   = x.21
       z.7   = x.22
       z.8   = x.23
       z.9   = x.24
  */

rule (modulo E) else__if_can_get_keyvalue_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011112111:
   [ State_011112111( ~lock6, h, v ) ]
  --[
  Pred_not_can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                             attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                             atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
  )
  ]->
   [ State_0111121112( ~lock6, h, v ) ]

  /*
  rule (modulo AC) else__if_can_get_keyvalue_attwrap_tem_v____attunwrap_tem_v____attenc_tem_v____attdec_tem_v____attsens_tem_v____attextr_tem_v____atttrus_tem_v____attwwt_tem_v____attwt_tem_v____attut_tem_v___011112111:
     [ State_011112111( ~lock6, h, v ) ]
    --[
    Pred_not_can_get_keyvalue( z, z.1, z.2, z.3, z.4, z.5, z.6, z.7,
                               z.8, z.9
    )
    ]->
     [ State_0111121112( ~lock6, h, v ) ]
    variants (modulo AC)
    1. v     = v.14
       z     = attwrap(tem(v.14))
       z.1   = attunwrap(tem(v.14))
       z.2   = attenc(tem(v.14))
       z.3   = attdec(tem(v.14))
       z.4   = attsens(tem(v.14))
       z.5   = attextr(tem(v.14))
       z.6   = atttrus(tem(v.14))
       z.7   = attwwt(tem(v.14))
       z.8   = attwt(tem(v.14))
       z.9   = attut(tem(v.14))
    
    2. v     = <x.14, x.15>
       z     = attwrap(x.15)
       z.1   = attunwrap(x.15)
       z.2   = attenc(x.15)
       z.3   = attdec(x.15)
       z.4   = attsens(x.15)
       z.5   = attextr(x.15)
       z.6   = atttrus(x.15)
       z.7   = attwwt(x.15)
       z.8   = attwt(x.15)
       z.9   = attut(x.15)
    
    3. v     = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23, x.24>
       z     = x.15
       z.1   = x.16
       z.2   = x.17
       z.3   = x.18
       z.4   = x.19
       z.5   = x.20
       z.6   = x.21
       z.7   = x.22
       z.8   = x.23
       z.9   = x.24
  */

rule (modulo E) event_GetKeyValue_key_v__0111121111:
   [ State_0111121111( ~lock6, h, v ) ]
  --[ Event( ), GetKeyValue( key(v) ) ]->
   [ State_01111211111( ~lock6, h, v ) ]

  /*
  rule (modulo AC) event_GetKeyValue_key_v__0111121111:
     [ State_0111121111( ~lock6, h, v ) ]
    --[ Event( ), GetKeyValue( z ) ]->
     [ State_01111211111( ~lock6, h, v ) ]
    variants (modulo AC)
    1. v     = v.5
       z     = key(v.5)
    
    2. v     = <x.5, x.6>
       z     = x.5
  */

rule (modulo E) out_key_v_01111211111:
   [ State_01111211111( ~lock6, h, v ) ]
  -->
   [ Out( key(v) ), State_011112111111( ~lock6, h, v ) ]

  /*
  rule (modulo AC) out_key_v_01111211111:
     [ State_01111211111( ~lock6, h, v ) ]
    -->
     [ Out( z ), State_011112111111( ~lock6, h, v ) ]
    variants (modulo AC)
    1. v     = v.5
       z     = key(v.5)
    
    2. v     = <x.5, x.6>
       z     = x.5
  */

rule (modulo E) unlock__device_011112111111:
   [ State_011112111111( ~lock6, h, v ) ]
  --[ Unlock( ~lock6, 'device' ) ]->
   [ State_0111121111111( ~lock6, h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero0111121112:
   [ State_0111121112( ~lock6, h, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒
        (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction immeadiate_in:
  "∀ t #i.
    (ChannelInEvent( t ) @ #i) ⇒
    (∃ #j.
      (((K( t ) @ #j) ∧ (#j < #i)) ∧
       (∀ #k. (Event( ) @ #k) ⇒ ((#k < #j) ∨ (#i < #k)))) ∧
      (∀ #k t2. (K( t2 ) @ #k) ⇒ (((#k < #j) ∨ (#i < #k)) ∨ (#k = #j))))"

restriction locking:
  "∀ n x np #i #j.
    ((Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)) ⇒
    ((((#i < #j) ∧
       (∃ #k.
         (((((Unlock( n, x ) @ #k) ∧ (#i < #k)) ∧ (#k < #j)) ∧
           (∀ #l. (Unlock( n, x ) @ #l) ⇒ (#l = #k))) ∧
          (∀ np.1 #l.
            (Lock( np.1, x ) @ #l) ⇒ (((#l < #i) ∨ (#l = #i)) ∨ (#k < #l)))) ∧
         (∀ np.1 #l.
           (Unlock( np.1, x ) @ #l) ⇒
           (((#l < #i) ∨ (#k < #l)) ∨ (#k = #l))))) ∨
      (#j < #i)) ∨
     (#i = #j))"

restriction predicate11:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_not_can_encrypt( wrap, unwrap, enc, dec, sens, extr, trus,
                           wwt, wt, ut
     ) @ #i) ⇒
    (¬(enc = 'on'))"
  // safety formula

restriction predicate10:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_can_encrypt( wrap, unwrap, enc, dec, sens, extr, trus, wwt,
                       wt, ut
     ) @ #i) ⇒
    (enc = 'on')"
  // safety formula

restriction predicate9:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_not_can_decrypt( wrap, unwrap, enc, dec, sens, extr, trus,
                           wwt, wt, ut
     ) @ #i) ⇒
    (¬(dec = 'on'))"
  // safety formula

restriction predicate8:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_can_decrypt( wrap, unwrap, enc, dec, sens, extr, trus, wwt,
                       wt, ut
     ) @ #i) ⇒
    (dec = 'on')"
  // safety formula

restriction predicate7:
  "∀ #i wrap1 unwrap1 enc1 dec1 sens1 extr1 trus1 wwt1 wt1 ut1 wrap2
     unwrap2 enc2 dec2 sens2 extr2 trus2 wwt2 wt2 ut2.
    (Pred_not_can_wrap( wrap1, unwrap1, enc1, dec1, sens1, extr1,
                        trus1, wwt1, wt1, ut1, wrap2, unwrap2, enc2, dec2, sens2, extr2,
                        trus2, wwt2, wt2, ut2
     ) @ #i) ⇒
    (¬(((wrap1 = 'on') ∧ (extr2 = 'on')) ∧
       ((wwt2 = 'off') ∨ ((wwt2 = 'on') ∧ (trus1 = 'on')))))"
  // safety formula

restriction predicate6:
  "∀ #i wrap1 unwrap1 enc1 dec1 sens1 extr1 trus1 wwt1 wt1 ut1 wrap2
     unwrap2 enc2 dec2 sens2 extr2 trus2 wwt2 wt2 ut2.
    (Pred_can_wrap( wrap1, unwrap1, enc1, dec1, sens1, extr1, trus1,
                    wwt1, wt1, ut1, wrap2, unwrap2, enc2, dec2, sens2, extr2, trus2,
                    wwt2, wt2, ut2
     ) @ #i) ⇒
    (((wrap1 = 'on') ∧ (extr2 = 'on')) ∧
     ((wwt2 = 'off') ∨ ((wwt2 = 'on') ∧ (trus1 = 'on'))))"
  // safety formula

restriction predicate5:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_not_can_unwrap( wrap, unwrap, enc, dec, sens, extr, trus,
                          wwt, wt, ut
     ) @ #i) ⇒
    (¬(unwrap = 'on'))"
  // safety formula

restriction predicate4:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_can_unwrap( wrap, unwrap, enc, dec, sens, extr, trus, wwt,
                      wt, ut
     ) @ #i) ⇒
    (unwrap = 'on')"
  // safety formula

restriction predicate3:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_not_can_get_keyvalue( wrap, unwrap, enc, dec, sens, extr,
                                trus, wwt, wt, ut
     ) @ #i) ⇒
    (¬(sens = 'off'))"
  // safety formula

restriction predicate2:
  "∀ #i wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_can_get_keyvalue( wrap, unwrap, enc, dec, sens, extr, trus,
                            wwt, wt, ut
     ) @ #i) ⇒
    (sens = 'off')"
  // safety formula

restriction predicate1:
  "∀ #i t_wrap t_unwrap t_enc t_dec t_sens t_extr t_trus t_wwt t_wt
     t_ut wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_not_permits( t_wrap, t_unwrap, t_enc, t_dec, t_sens, t_extr,
                       t_trus, t_wwt, t_wt, t_ut, wrap, unwrap, enc, dec, sens, extr,
                       trus, wwt, wt, ut
     ) @ #i) ⇒
    (¬((t_wrap = wrap) ∧
       ((t_unwrap = unwrap) ∧
        ((t_enc = enc) ∧
         ((t_dec = dec) ∧
          ((t_sens = sens) ∧
           ((t_extr = extr) ∧
            ((t_trus = trus) ∧
             ((t_wwt = wwt) ∧ ((t_wt = wt) ∧ (t_ut = ut)))))))))))"
  // safety formula

restriction predicate0:
  "∀ #i t_wrap t_unwrap t_enc t_dec t_sens t_extr t_trus t_wwt t_wt
     t_ut wrap unwrap enc dec sens extr trus wwt wt ut.
    (Pred_permits( t_wrap, t_unwrap, t_enc, t_dec, t_sens, t_extr,
                   t_trus, t_wwt, t_wt, t_ut, wrap, unwrap, enc, dec, sens, extr,
                   trus, wwt, wt, ut
     ) @ #i) ⇒
    ((t_wrap = wrap) ∧
     ((t_unwrap = unwrap) ∧
      ((t_enc = enc) ∧
       ((t_dec = dec) ∧
        ((t_sens = sens) ∧
         ((t_extr = extr) ∧
          ((t_trus = trus) ∧
           ((t_wwt = wwt) ∧ ((t_wt = wt) ∧ (t_ut = ut))))))))))"
  // safety formula

lemma dec_limits [sources]:
  all-traces
  "(((((∀ k m #t1.
         (DecUsing( k, m ) @ #t1) ⇒
         (((((∃ h2 k2 #t2 #t3.
               (((NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧
                (#t2 < #t1)) ∧
               (#t3 < #t1)) ∨
             (∃ h2 #t2 #t3 #t4.
               (((((NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3)) ∧
                  (!KU( m ) @ #t4)) ∧
                 (#t2 < #t1)) ∧
                (#t3 < #t1)) ∧
               (#t4 < #t1))) ∨
            (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (#t2 < #t1))) ∨
           (∃ h2 k2 #t2 #t3 a.
             (((Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧
              (#t2 < #t1)) ∧
             (#t3 < #t1))) ∨
          (∃ #t2 #t3 h1 h2 k2.
            (((WrapKey( h2, k2, 'on' ) @ #t2) ∧
              (DecKey( h1, k2, 'on' ) @ #t3)) ∧
             (#t2 < #t1)) ∧
            (#t3 < #t1)))) ∧
       (∀ k #t2.
         (GetKeyValue( k ) @ #t2) ⇒
         (∃ h #t1. NewKey( h, k, 'off' ) @ #t1))) ∧
      (¬(∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
          Insert( <'obj', h>,
                  <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
          ) @ #t))) ∧
     (¬(∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
         Insert( <'obj', h>,
                 <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
         ) @ #t))) ∧
    (¬(∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
        Insert( <'obj', h>,
                <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
        ) @ #t))) ∧
   (¬(∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
       Insert( <'obj', h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
       ) @ #t))"
/*
guarded formula characterizing all counter-examples:
"(∃ k m #t1.
   (DecUsing( k, m ) @ #t1)
  ∧
   (∀ h2 k2 #t2 #t3.
     (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
    ⇒
     (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))) ∧
   (∀ h2 #t2 #t3 #t4.
     (NewKey( h2, k, 'off' ) @ #t2) ∧
     (!KU( k ) @ #t3) ∧
     (!KU( m ) @ #t4)
    ⇒
     (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)) ∨ (¬(#t4 < #t1))) ∧
   (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
   (∀ h2 k2 #t2 #t3 a.
     (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
    ⇒
     (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))) ∧
   (∀ #t2 #t3 h1 h2 k2.
     (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
    ⇒
     (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∨
 (∃ k #t2.
   (GetKeyValue( k ) @ #t2)
  ∧
   ∀ h #t1. (NewKey( h, k, 'off' ) @ #t1) ⇒ ⊥) ∨
 (∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
   (Insert( <'obj', h>,
            <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
    ) @ #t)) ∨
 (∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
   (Insert( <'obj', h>,
            <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
    ) @ #t)) ∨
 (∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
   (Insert( <'obj', h>,
            <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
    ) @ #t)) ∨
 (∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
   (Insert( <'obj', h>,
            <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
    ) @ #t))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (∃ k m #t1.
           (DecUsing( k, m ) @ #t1)
          ∧
           (∀ h2 k2 #t2 #t3.
             (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ⇒
             (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))) ∧
           (∀ h2 #t2 #t3 #t4.
             (NewKey( h2, k, 'off' ) @ #t2) ∧
             (!KU( k ) @ #t3) ∧
             (!KU( m ) @ #t4)
            ⇒
             (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)) ∨ (¬(#t4 < #t1))) ∧
           (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
           (∀ h2 k2 #t2 #t3 a.
             (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ⇒
             (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))) ∧
           (∀ #t2 #t3 h1 h2 k2.
             (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
            ⇒
             (¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))))  ∥
         (∃ k #t2.
           (GetKeyValue( k ) @ #t2)
          ∧
           ∀ h #t1. (NewKey( h, k, 'off' ) @ #t1) ⇒ ⊥)  ∥
         (∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
           (Insert( <'obj', h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
            ) @ #t))  ∥
         (∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
           (Insert( <'obj', h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
            ) @ #t))  ∥
         (∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
           (Insert( <'obj', h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
            ) @ #t))  ∥
         (∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
           (Insert( <'obj', h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
            ) @ #t)) )
    case case_1
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              (last(#t1)) ∨
              (∃ h2 k2 #t2 #t3.
                (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
               ∧
                (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
              (∃ h2 #t2 #t3 #t4.
                (NewKey( h2, k, 'off' ) @ #t2) ∧
                (!KU( k ) @ #t3) ∧
                (!KU( m ) @ #t4)
               ∧
                (¬(last(#t4))) ∧
                (¬(last(#t3))) ∧
                (¬(last(#t2))) ∧
                (#t2 < #t1) ∧
                (#t3 < #t1) ∧
                (#t4 < #t1)) ∨
              (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
              (∃ h2 k2 #t2 #t3 a.
                (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
               ∧
                (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
              (∃ #t2 #t3 h1 h2 k2.
                (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
               ∧
                (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              (last(#t2)) ∨
              (∃ h #t1. (NewKey( h, k, 'off' ) @ #t1) ∧ ¬(last(#t1)))) ∧
            (∀ h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               (last(#t2)) ∨
               (#t2 = #t3) ∨
               (#t3 < #t2) ∨
               (∃ #t1.
                 (Delete( x ) @ #t1)
                ∧
                 (¬(last(#t1))) ∧
                 ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
                 ((#t3 = #t1) ∨ (#t1 < #t3))) ∨
               (∃ #t1 yp.
                 (Insert( x, yp ) @ #t1)
                ∧
                 (¬(last(#t1))) ∧
                 ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
                 (¬(#t1 = #t2)) ∧
                 ((#t3 = #t1) ∨ (#t1 < #t3)))))  ∥
           (∃ x #t3.
             (IsNotSet( x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∃ #t1 y.
               (Insert( x, y ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ ((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (∀ #t1.
               (Delete( x ) @ #t1)
              ⇒
               (last(#t1)) ∨
               (#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∃ #t2 y.
                 (Insert( x, y ) @ #t2)
                ∧
                 (¬(last(#t2))) ∧ (#t2 < #t3) ∧ ((#t2 = #t1) ∨ (#t1 < #t2)))))  ∥
           (∃ t #i.
             (ChannelInEvent( t ) @ #i)
            ∧
             (¬(last(#i))) ∧
             (∀ #j.
               (K( t ) @ #j)
              ⇒
               (last(#j)) ∨
               (#j = #i) ∨
               (#i < #j) ∨
               (∃ #k.
                 (Event( ) @ #k)
                ∧
                 (¬(last(#k))) ∧
                 ((#k = #j) ∨ (#j < #k)) ∧
                 ((#i = #k) ∨ (#k < #i))) ∨
               (∃ #k t2.
                 (K( t2 ) @ #k)
                ∧
                 (¬(last(#k))) ∧
                 ((#k = #j) ∨ (#j < #k)) ∧
                 ((#i = #k) ∨ (#k < #i)) ∧
                 (¬(#k = #j)))))  ∥
           (∃ n x np #i #j.
             (Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)
            ∧
             (¬(last(#j))) ∧
             (¬(last(#i))) ∧
             ((#i = #j) ∨
              (#j < #i) ∨
              (∀ #k.
                (Unlock( n, x ) @ #k)
               ⇒
                (last(#k)) ∨
                (#i = #k) ∨
                (#k < #i) ∨
                (#k = #j) ∨
                (#j < #k) ∨
                (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
                (∃ np.1 #l.
                  (Lock( np.1, x ) @ #l)
                 ∧
                  (¬(last(#l))) ∧
                  ((#l = #i) ∨ (#i < #l)) ∧
                  (¬(#l = #i)) ∧
                  ((#k = #l) ∨ (#l < #k))) ∨
                (∃ np.1 #l.
                  (Unlock( np.1, x ) @ #l)
                 ∧
                  (¬(last(#l))) ∧
                  ((#l = #i) ∨ (#i < #l)) ∧
                  ((#k = #l) ∨ (#l < #k)) ∧
                  (¬(#k = #l))))) ∧
             ((#j = #i) ∨ (#i < #j)) ∧
             (¬(#i = #j))) )
      case case_1
      solve( (last(#t1))  ∥
             (∃ h2 k2 #t2 #t3.
               (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
             (∃ h2 #t2 #t3 #t4.
               (NewKey( h2, k, 'off' ) @ #t2) ∧
               (!KU( k ) @ #t3) ∧
               (!KU( m ) @ #t4)
              ∧
               (¬(last(#t4))) ∧
               (¬(last(#t3))) ∧
               (¬(last(#t2))) ∧
               (#t2 < #t1) ∧
               (#t3 < #t1) ∧
               (#t4 < #t1))  ∥
             (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1))  ∥
             (∃ h2 k2 #t2 #t3 a.
               (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
             (∃ #t2 #t3 h1 h2 k2.
               (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) )
        case case_1
        solve( State_011111111211111( ~lock7, h, k, m, v ) ▶₀ #t1 )
          case if_eq_key_v___k_01111111121111
          solve( !KU( senc(m, k) ) @ #vk.2 )
            case csenc
            by sorry
          next
            case out_key_v_01111211111
            solve( State_0111111111111111( ~lock13,
                                           <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, h.2,
                                           t, ptr, templ
                   ) ▶₀ #t1.1 )
              case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
              by contradiction
            qed
          next
            case out_m0111111112111111
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_1
            solve( Insert( <'obj', h1>,
                           <k, 'on', z.9, z.10, z.11, z.12, z.13, z.14, z.15, z.16, z.17>
                   ) @ #t2.3 )
              case insert___obj___h2___m__atts_011111211111111
              by sorry
            next
              case insert___obj___h___k__atts_01111111111111111
              by sorry
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_2
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_3
            solve( Insert( <'obj', h1>,
                           <z.10, 'on', z.11, z.12, z.13, z.14, z.15, 'on', z.16, z.17, z.18>
                   ) @ #t2.3 )
              case insert___obj___h2___m__atts_011111211111111
              by sorry
            next
              case insert___obj___h___k__atts_01111111111111111
              solve( State_01111111111111111( ~lock13,
                                              <'on', z.11, z.12, z.13, z.14, z.15, 'on', z.16, 
                                               z.17, z.18>,
                                              h1, z.10, ptr, templ
                     ) ▶₀ #t2 )
                case event_NewKey_h__k__attsens_atts__0111111111111111
                solve( Insert( <'template', ptr>,
                               <'on', z.9, z.10, z.11, z.12, z.13, 'on', z.14, z.15, z.16>
                       ) @ #t2.4 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction
                qed
              qed
            qed
          next
            case out_senc_m__key_v__01111111211111
            by contradiction
          qed
        qed
      next
        case case_2
        by contradiction
      next
        case case_3
        by contradiction
      next
        case case_4
        by contradiction
      next
        case case_5
        by contradiction
      next
        case case_6
        by contradiction
      qed
    next
      case case_2
      by sorry
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by sorry
      next
        case case_2
        by sorry
      qed
    next
      case case_4
      by sorry
    next
      case case_5
      by sorry
    qed
  next
    case case_2
    by sorry
  next
    case case_3
    by sorry
  next
    case case_4
    by sorry
  next
    case case_5
    by sorry
  next
    case case_6
    by sorry
  qed
qed

lemma trusted_as_ut_impossible [reuse]:
  all-traces
  "¬(∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
      Insert( <'obj', h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
  (Insert( <'obj', h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
   ) @ #t)"
*/
simplify
solve( Insert( <'obj', h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
       ) @ #t )
  case insert___obj___h2___m__atts_011111211111111
  solve( State_011111211111111( ~lock15,
                                <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>, h,
                                h.1, k, k.1, ut, v
         ) ▶₀ #t )
    case new_h201111121111111
    by solve( Insert( <'template', z.8>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
              ) @ #t2 )
  qed
next
  case insert___obj___h___k__atts_01111111111111111
  solve( State_01111111111111111( ~lock13,
                                  <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>, h,
                                  k, ptr, templ
         ) ▶₀ #t )
    case event_NewKey_h__k__attsens_atts__0111111111111111
    by solve( Insert( <'template', ptr>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
              ) @ #t2 )
  qed
qed

lemma untrusted_as_ut_impossible [reuse]:
  all-traces
  "¬(∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
      Insert( <'obj', h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ h k wrap unwrap enc dec sens extr trus wwt wt #t.
  (Insert( <'obj', h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
   ) @ #t)"
*/
simplify
solve( Insert( <'obj', h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
       ) @ #t )
  case insert___obj___h2___m__atts_011111211111111
  solve( State_011111211111111( ~lock15,
                                <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>,
                                h, h.1, k, k.1, ut, v
         ) ▶₀ #t )
    case new_h201111121111111
    by solve( Insert( <'template', z.8>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
              ) @ #t2 )
  qed
next
  case insert___obj___h___k__atts_01111111111111111
  solve( State_01111111111111111( ~lock13,
                                  <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>,
                                  h, k, ptr, templ
         ) ▶₀ #t )
    case event_NewKey_h__k__attsens_atts__0111111111111111
    by solve( Insert( <'template', ptr>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
              ) @ #t2 )
  qed
qed

lemma untrusted_as_wt_impossible [reuse]:
  all-traces
  "¬(∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
      Insert( <'obj', h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
  (Insert( <'obj', h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
   ) @ #t)"
*/
simplify
solve( Insert( <'obj', h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
       ) @ #t )
  case insert___obj___h2___m__atts_011111211111111
  solve( State_011111211111111( ~lock15,
                                <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>,
                                h, h.1, k, k.1, ut.1, v
         ) ▶₀ #t )
    case new_h201111121111111
    by solve( Insert( <'template', z.8>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
              ) @ #t2 )
  qed
next
  case insert___obj___h___k__atts_01111111111111111
  solve( State_01111111111111111( ~lock13,
                                  <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>,
                                  h, k, ptr, templ
         ) ▶₀ #t )
    case event_NewKey_h__k__attsens_atts__0111111111111111
    by solve( Insert( <'template', ptr>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
              ) @ #t2 )
  qed
qed

lemma trusted_as_wt_impossible [reuse]:
  all-traces
  "¬(∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
      Insert( <'obj', h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ h k wrap unwrap enc dec sens extr trus wwt ut #t.
  (Insert( <'obj', h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
   ) @ #t)"
*/
simplify
solve( Insert( <'obj', h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
       ) @ #t )
  case insert___obj___h2___m__atts_011111211111111
  solve( State_011111211111111( ~lock15,
                                <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>, h,
                                h.1, k, k.1, ut.1, v
         ) ▶₀ #t )
    case new_h201111121111111
    by solve( Insert( <'template', z.8>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
              ) @ #t2 )
  qed
next
  case insert___obj___h___k__atts_01111111111111111
  solve( State_01111111111111111( ~lock13,
                                  <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>, h,
                                  k, ptr, templ
         ) ▶₀ #t )
    case event_NewKey_h__k__attsens_atts__0111111111111111
    by solve( Insert( <'template', ptr>,
                      <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
              ) @ #t2 )
  qed
qed

lemma bad_keys [reuse, use_induction]:
  all-traces
  "∀ h2 k #t2 a.
    (Unwrapped( h2, k, a ) @ #t2) ⇒
    ((((∃ h1 #t1. (NewKey( h1, k, 'on' ) @ #t1) ∧ (#t1 < #t2)) ∨
       (∃ h k2 #t1 #t0.
         (((NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
          (#t1 < #t2)) ∧
         (#t0 < #t2))) ∨
      (∃ #t0 #t1 h1 h2.1 k.1.
        (((WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
          (DecKey( h1, k.1, 'on' ) @ #t1)) ∧
         (#t0 < #t2)) ∧
        (#t1 < #t2))) ∨
     (∃ #t0 #t1 h1 h2.1 k.1.
       (((UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
         (EncKey( h1, k.1, 'on' ) @ #t1)) ∧
        (#t0 < #t2)) ∧
       (#t1 < #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ h2 k #t2 a.
  (Unwrapped( h2, k, a ) @ #t2)
 ∧
  (∀ h1 #t1. (NewKey( h1, k, 'on' ) @ #t1) ⇒ ¬(#t1 < #t2)) ∧
  (∀ h k2 #t1 #t0.
    (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    (¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
    (DecKey( h1, k.1, 'on' ) @ #t1)
   ⇒
    (¬(#t0 < #t2)) ∨ (¬(#t1 < #t2))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
    (EncKey( h1, k.1, 'on' ) @ #t1)
   ⇒
    (¬(#t0 < #t2)) ∨ (¬(#t1 < #t2)))"
*/
induction
  case empty_trace
  by contradiction // from formulas
next
  case non_empty_trace
  simplify
  solve( (∀ h2 k #t2 a.
           (Unwrapped( h2, k, a ) @ #t2)
          ⇒
           (last(#t2)) ∨
           (∃ h1 #t1.
             (NewKey( h1, k, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∨
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2)) ∨
           (∃ #t0 #t1 h1 h2.1 k.1.
             (WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
             (DecKey( h1, k.1, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) ∨
           (∃ #t0 #t1 h1 h2.1 k.1.
             (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
             (EncKey( h1, k.1, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             (last(#t2)) ∨
             (#t2 = #t3) ∨
             (#t3 < #t2) ∨
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3))) ∨
             (∃ #t1 yp.
               (Insert( x, yp ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               (¬(#t1 = #t2)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3)))))  ∥
         (∃ x #t3.
           (IsNotSet( x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∃ #t1 y.
             (Insert( x, y ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ ((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (∀ #t1.
             (Delete( x ) @ #t1)
            ⇒
             (last(#t1)) ∨
             (#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∃ #t2 y.
               (Insert( x, y ) @ #t2)
              ∧
               (¬(last(#t2))) ∧ (#t2 < #t3) ∧ ((#t2 = #t1) ∨ (#t1 < #t2)))))  ∥
         (∃ t #i.
           (ChannelInEvent( t ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (K( t ) @ #j)
            ⇒
             (last(#j)) ∨
             (#j = #i) ∨
             (#i < #j) ∨
             (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i))) ∨
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j)))))  ∥
         (∃ n x np #i #j.
           (Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)
          ∧
           (¬(last(#j))) ∧
           (¬(last(#i))) ∧
           ((#i = #j) ∨
            (#j < #i) ∨
            (∀ #k.
              (Unlock( n, x ) @ #k)
             ⇒
              (last(#k)) ∨
              (#i = #k) ∨
              (#k < #i) ∨
              (#k = #j) ∨
              (#j < #k) ∨
              (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
              (∃ np.1 #l.
                (Lock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                (¬(#l = #i)) ∧
                ((#k = #l) ∨ (#l < #k))) ∨
              (∃ np.1 #l.
                (Unlock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                ((#k = #l) ∨ (#l < #k)) ∧
                (¬(#k = #l))))) ∧
           ((#j = #i) ∨ (#i < #j)) ∧
           (¬(#i = #j))) )
    case case_1
    solve( (last(#t2))  ∥
           (∃ h1 #t1.
             (NewKey( h1, k.1, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) )
      case case_1
      solve( State_0111112111111111( ~lock15, a, h, h2, k, k.1, ut, v
             ) ▶₀ #t2 )
        case insert___obj___h2___m__atts_011111211111111
        solve( !KU( senc(k.1, k) ) @ #vk.3 )
          case csenc
          solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
            case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
            by contradiction // from formulas
          next
            case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
            by contradiction // from formulas
          next
            case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
            solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
              case case_1
              solve( State_01( ) ▶₀ #t2.1 )
                case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                by contradiction // cyclic
              qed
            next
              case case_2
              solve( Insert( <'obj', h>,
                             <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                     ) @ #t2.2 )
                case insert___obj___h2___m__atts_011111211111111
                solve( State_011111211111111( ~lock15.1,
                                              <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>,
                                              h.1, h, k.2, k, ut, v
                       ) ▶₀ #t2.2 )
                  case new_h201111121111111
                  solve( ((#vr.7 < #vr.21) ∧
                          (∃ #k.
                            (Unlock( ~lock15, 'device' ) @ #k)
                           ∧
                            (#vr.7 < #k) ∧
                            (#k < #vr.21) ∧
                            (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                            (∀ np #l.
                              (Lock( np, 'device' ) @ #l)
                             ⇒
                              (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                            (∀ np #l.
                              (Unlock( np, 'device' ) @ #l)
                             ⇒
                              (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                         (#vr.21 < #vr.7) )
                    case case_1
                    solve( Unlock( ~lock15, 'device' ) @ #k.3 )
                      case unlock__device_01111111111111111111111
                      by solve( State_01111111111111111111111( ~lock15, atts, h.1, k.4,
                                                               ptr, templ
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_01111111121111111
                      by solve( State_01111111121111111( ~lock15, h.1, k.4, m, v
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_011111112111111
                      by solve( State_011111112111111( ~lock15, h.1, m, v ) ▶₀ #k.3 )
                    next
                      case unlock__device_01111112111111111
                      by solve( State_01111112111111111( ~lock15, h1, h2, v1, v2, wt
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_0111112111111111111111
                      solve( State_0111112111111111111111( ~lock15, atts, h.1, h2, k.4,
                                                           m, ut, v
                             ) ▶₀ #k.3 )
                        case out_h2011111211111111111111
                        by contradiction // cyclic
                      qed
                    next
                      case unlock__device_011112111111
                      by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.3 )
                    qed
                  next
                    case case_2
                    solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                      case unlock__device_01111111111111111111111
                      by solve( State_01111111111111111111111( ~lock15.1, atts, h.1, k.4,
                                                               ptr, templ
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_01111111121111111
                      by solve( State_01111111121111111( ~lock15.1, h.1, k.4, m, v
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_011111112111111
                      by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.3 )
                    next
                      case unlock__device_01111112111111111
                      by solve( State_01111112111111111( ~lock15.1, h1, h2, v1, v2, wt
                                ) ▶₀ #k.3 )
                    next
                      case unlock__device_0111112111111111111111
                      solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2, k.4,
                                                           m, ut, v
                             ) ▶₀ #k.3 )
                        case out_h2011111211111111111111
                        solve( (∃ h1 #t1.
                                 (NewKey( h1, k, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.31))  ∥
                               (∃ h k2 #t1 #t0.
                                 (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                ∧
                                 (¬(last(#t0))) ∧
                                 (¬(last(#t1))) ∧
                                 (#t1 < #vr.31) ∧
                                 (#t0 < #vr.31))  ∥
                               (∃ #t0 #t1 h1 h2 k.
                                 (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                ∧
                                 (¬(last(#t1))) ∧
                                 (¬(last(#t0))) ∧
                                 (#t0 < #vr.31) ∧
                                 (#t1 < #vr.31))  ∥
                               (∃ #t0 #t1 h1 h2 k.
                                 (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                ∧
                                 (¬(last(#t1))) ∧
                                 (¬(last(#t0))) ∧
                                 (#t0 < #vr.31) ∧
                                 (#t1 < #vr.31)) )
                          case case_1
                          by contradiction // from formulas
                        next
                          case case_2
                          by contradiction // from formulas
                        next
                          case case_3
                          by contradiction // from formulas
                        next
                          case case_4
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case unlock__device_011112111111
                      by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.3 )
                    qed
                  qed
                qed
              next
                case insert___obj___h___k__atts_01111111111111111
                solve( State_01111111111111111( ~lock13,
                                                <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'
                                                >,
                                                h, k, ptr, templ
                       ) ▶₀ #t2.2 )
                  case event_NewKey_h__k__attsens_atts__0111111111111111
                  solve( ((#vr.7 < #vr.20) ∧
                          (∃ #k.
                            (Unlock( ~lock15, 'device' ) @ #k)
                           ∧
                            (#vr.7 < #k) ∧
                            (#k < #vr.20) ∧
                            (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                            (∀ np #l.
                              (Lock( np, 'device' ) @ #l)
                             ⇒
                              (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                            (∀ np #l.
                              (Unlock( np, 'device' ) @ #l)
                             ⇒
                              (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                         (#vr.20 < #vr.7) )
                    case case_1
                    solve( Unlock( ~lock15, 'device' ) @ #k.1 )
                      case unlock__device_01111111111111111111111
                      by solve( State_01111111111111111111111( ~lock15, atts, h, k.2,
                                                               ptr, templ
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_01111111121111111
                      by solve( State_01111111121111111( ~lock15, h, k.2, m, v
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_011111112111111
                      by solve( State_011111112111111( ~lock15, h, m, v ) ▶₀ #k.1 )
                    next
                      case unlock__device_01111112111111111
                      by solve( State_01111112111111111( ~lock15, h1, h2, v1, v2, wt
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_0111112111111111111111
                      solve( State_0111112111111111111111( ~lock15, atts, h, h2, k.2, m,
                                                           ut, v
                             ) ▶₀ #k.1 )
                        case out_h2011111211111111111111
                        by contradiction // cyclic
                      qed
                    next
                      case unlock__device_011112111111
                      by solve( State_011112111111( ~lock15, h, v ) ▶₀ #k.1 )
                    qed
                  next
                    case case_2
                    solve( Unlock( ~lock13, 'device' ) @ #k.1 )
                      case unlock__device_01111111111111111111111
                      solve( State_01111111111111111111111( ~lock13, atts, h, k.2, ptr,
                                                            templ
                             ) ▶₀ #k.1 )
                        case out_h0111111111111111111111
                        solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                          case case_1
                          by contradiction // from formulas
                        next
                          case case_2
                          solve( !KU( ~n ) @ #vk.3 )
                            case out_h0111111111111111111111
                            solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                              case case_1
                              by contradiction // from formulas
                            next
                              case case_2
                              solve( !KU( ~n.2 ) @ #vk.6 )
                                case out_key_v_01111211111
                                solve( (#vr.37 < #vr.20)  ∥ (#k.1 < #vr.37) )
                                  case case_1
                                  solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( Unlock( ~lock6, 'device' ) @ #k.2 )
                                      case unlock__device_01111111111111111111111
                                      by solve( State_01111111111111111111111( ~lock6, atts, h, k.3,
                                                                               ptr.1, templ
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_01111111121111111
                                      by solve( State_01111111121111111( ~lock6, h, k.3, m, v
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_011111112111111
                                      by solve( State_011111112111111( ~lock6, h, m, v ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_01111112111111111
                                      by solve( State_01111112111111111( ~lock6, h1, h2, v1, v2, wt
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_0111112111111111111111
                                      by solve( State_0111112111111111111111( ~lock6, atts, h, h2,
                                                                              k.3, m, ut, v
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_011112111111
                                      solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.2 )
                                        case out_key_v_01111211111
                                        solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            by solve( Insert( <'template', ptr>,
                                                              <z, 'on', z.1, z.2, 'off', z.3, z.4, 
                                                               z.5, z.6, 'usage'>
                                                      ) @ #t2.3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( Unlock( ~lock6, 'device' ) @ #k.2 )
                                      case unlock__device_01111111111111111111111
                                      by solve( State_01111111111111111111111( ~lock6, atts, h, k.3,
                                                                               ptr.1, templ
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_01111111121111111
                                      by solve( State_01111111121111111( ~lock6, h, k.3, m, v
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_011111112111111
                                      by solve( State_011111112111111( ~lock6, h, m, v ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_01111112111111111
                                      by solve( State_01111112111111111( ~lock6, h1, h2, v1, v2, wt
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_0111112111111111111111
                                      by solve( State_0111112111111111111111( ~lock6, atts, h, h2,
                                                                              k.3, m, ut, v
                                                ) ▶₀ #k.2 )
                                    next
                                      case unlock__device_011112111111
                                      solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.2 )
                                        case out_key_v_01111211111
                                        solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            by solve( Insert( <'template', ptr>,
                                                              <z, 'on', z.1, z.2, 'off', z.3, z.4, 
                                                               z.5, z.6, 'usage'>
                                                      ) @ #t2.3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case out_m0111111112111111_case_1
                                by contradiction // from formulas
                              next
                                case out_m0111111112111111_case_2
                                solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                                  case case_1
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                qed
                              next
                                case out_m0111111112111111_case_3
                                solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                                  case case_1
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                qed
                              next
                                case out_m0111111112111111_case_4
                                solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                                  case case_1
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                qed
                              next
                                case out_m0111111112111111_case_5
                                solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                                  case case_1
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                    case case_1
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  next
                                    case case_2
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k2, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #t2.3) ∧
                                             (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #t2.3) ∧
                                             (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                qed
                              next
                                case out_m0111111112111111_case_6
                                by contradiction // from formulas
                              next
                                case out_m0111111112111111_case_7
                                by contradiction // from formulas
                              next
                                case out_m0111111112111111_case_8
                                by contradiction // from formulas
                              next
                                case out_m0111111112111111_case_9
                                by contradiction // from formulas
                              next
                                case out_senc_key_v2___key_v1__0111111211111111_case_1
                                solve( (#vr.41 < #vr.20)  ∥ (#k.1 < #vr.41) )
                                  case case_1
                                  solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                             ptr.1, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock9, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                           ) ▶₀ #k.2 )
                                      case out_senc_key_v2___key_v1__0111111211111111
                                      solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'template', ptr>,
                                                           <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                            z.7, 'usage'>
                                                   ) @ #t2.3 )
                                              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                              by contradiction // from formulas
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock9, atts, h, h2,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                             ptr.1, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock9, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                           ) ▶₀ #k.2 )
                                      case out_senc_key_v2___key_v1__0111111211111111
                                      solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'template', ptr>,
                                                           <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                            z.7, 'usage'>
                                                   ) @ #t2.3 )
                                              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                              by contradiction // from formulas
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock9, atts, h, h2,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                                  qed
                                qed
                              next
                                case out_senc_key_v2___key_v1__0111111211111111_case_2
                                solve( (#vr.41 < #vr.20)  ∥ (#k.1 < #vr.41) )
                                  case case_1
                                  solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                             ptr.1, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock9, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                           ) ▶₀ #k.2 )
                                      case out_senc_key_v2___key_v1__0111111211111111
                                      solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'template', ptr>,
                                                           <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                            z.7, 'usage'>
                                                   ) @ #t2.3 )
                                              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                              by contradiction // from formulas
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock9, atts, h, h2,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                             ptr.1, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock9, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                           ) ▶₀ #k.2 )
                                      case out_senc_key_v2___key_v1__0111111211111111
                                      solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'template', ptr>,
                                                           <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                            z.7, 'usage'>
                                                   ) @ #t2.3 )
                                              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                              by contradiction // from formulas
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock9, atts, h, h2,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case out_m0111111112111111_case_1
                            by contradiction // from formulas
                          next
                            case out_m0111111112111111_case_2
                            solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                              case case_1
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            next
                              case case_2
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            qed
                          next
                            case out_m0111111112111111_case_3
                            solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                              case case_1
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            next
                              case case_2
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            qed
                          next
                            case out_m0111111112111111_case_4
                            solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                              case case_1
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            next
                              case case_2
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            qed
                          next
                            case out_m0111111112111111_case_5
                            solve( (#vr.38 < #vr.20)  ∥ (#k.1 < #vr.38) )
                              case case_1
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            next
                              case case_2
                              solve( (#vr.53 < #vr.20)  ∥ (#k.1 < #vr.53) )
                                case case_1
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              next
                                case case_2
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #t2.3) ∧
                                         (#t0 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #t2.3) ∧
                                         (#t1 < #t2.3)) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            qed
                          next
                            case out_m0111111112111111_case_6
                            by contradiction // from formulas
                          next
                            case out_m0111111112111111_case_7
                            by contradiction // from formulas
                          next
                            case out_m0111111112111111_case_8
                            by contradiction // from formulas
                          next
                            case out_m0111111112111111_case_9
                            by contradiction // from formulas
                          next
                            case out_senc_key_v2___key_v1__0111111211111111_case_1
                            solve( (#vr.41 < #vr.20)  ∥ (#k.1 < #vr.41) )
                              case case_1
                              solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                         ptr.1, templ
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock9, h, k.3, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                       ) ▶₀ #k.2 )
                                  case out_senc_key_v2___key_v1__0111111211111111
                                  solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( !KU( ~n.2 ) @ #vk.6 )
                                          case out_key_v_01111211111
                                          solve( (#vr.51 < #vr.20)  ∥ (#k.1 < #vr.51) )
                                            case case_1
                                            solve( (#vr.51 < #vr.41)  ∥ (#k.2 < #vr.51) )
                                              case case_1
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock6,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock6, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock6,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.3 )
                                                  case out_key_v_01111211111
                                                  solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by solve( Insert( <'template', ptr>,
                                                                        <z, 'on', z.1, z.2, 'off', 
                                                                         z.3, z.4, z.5, z.6, 'usage'
                                                                        >
                                                                ) @ #t2.3 )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_1
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_2
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_3
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_4
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_5
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_6
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_7
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_8
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_9
                                          by contradiction // from formulas
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_1
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_3
                                            solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', ptr>,
                                                                 <z, 'on', z.1, z.2, z.3, z.4, z.5, 
                                                                  z.6, z.7, 'usage'>
                                                         ) @ #t2.3 )
                                                    case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_2
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock9, atts, h, h2, k.3,
                                                                        m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                              qed
                            next
                              case case_2
                              solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                         ptr.1, templ
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock9, h, k.3, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                       ) ▶₀ #k.2 )
                                  case out_senc_key_v2___key_v1__0111111211111111
                                  solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( !KU( ~n.2 ) @ #vk.6 )
                                          case out_key_v_01111211111
                                          solve( (#vr.51 < #vr.20)  ∥ (#k.1 < #vr.51) )
                                            case case_1
                                            solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock6,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock6, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock6,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.3 )
                                                  case out_key_v_01111211111
                                                  solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by solve( Insert( <'template', ptr>,
                                                                        <z, 'on', z.1, z.2, 'off', 
                                                                         z.3, z.4, z.5, z.6, 'usage'
                                                                        >
                                                                ) @ #t2.3 )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.51 < #vr.41)  ∥ (#k.2 < #vr.51) )
                                              case case_1
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_1
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_2
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_3
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_4
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_5
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_6
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_7
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_8
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_9
                                          by contradiction // from formulas
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_1
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', ptr>,
                                                                 <z, 'on', z.1, z.2, z.3, z.4, z.5, 
                                                                  z.6, z.7, 'usage'>
                                                         ) @ #t2.3 )
                                                    case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_2
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock9, atts, h, h2, k.3,
                                                                        m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                              qed
                            qed
                          next
                            case out_senc_key_v2___key_v1__0111111211111111_case_2
                            solve( (#vr.41 < #vr.20)  ∥ (#k.1 < #vr.41) )
                              case case_1
                              solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                         ptr.1, templ
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock9, h, k.3, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                       ) ▶₀ #k.2 )
                                  case out_senc_key_v2___key_v1__0111111211111111
                                  solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( !KU( ~n.2 ) @ #vk.6 )
                                          case out_key_v_01111211111
                                          solve( (#vr.51 < #vr.20)  ∥ (#k.1 < #vr.51) )
                                            case case_1
                                            solve( (#vr.51 < #vr.41)  ∥ (#k.2 < #vr.51) )
                                              case case_1
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock6,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock6, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock6,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.3 )
                                                  case out_key_v_01111211111
                                                  solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by solve( Insert( <'template', ptr>,
                                                                        <z, 'on', z.1, z.2, 'off', 
                                                                         z.3, z.4, z.5, z.6, 'usage'
                                                                        >
                                                                ) @ #t2.3 )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_1
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_2
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_3
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_4
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_5
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_6
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_7
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_8
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_9
                                          by contradiction // from formulas
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_1
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          qed
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_2
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_3
                                            solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', ptr>,
                                                                 <z, 'on', z.1, z.2, z.3, z.4, z.5, 
                                                                  z.6, z.7, 'usage'>
                                                         ) @ #t2.3 )
                                                    case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock9, atts, h, h2, k.3,
                                                                        m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                              qed
                            next
                              case case_2
                              solve( Unlock( ~lock9, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock9, atts, h, k.3,
                                                                         ptr.1, templ
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock9, h, k.3, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock9, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                                       ) ▶₀ #k.2 )
                                  case out_senc_key_v2___key_v1__0111111211111111
                                  solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( !KU( ~n.2 ) @ #vk.6 )
                                          case out_key_v_01111211111
                                          solve( (#vr.51 < #vr.20)  ∥ (#k.1 < #vr.51) )
                                            case case_1
                                            solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock6,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock6, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock6,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                solve( State_011112111111( ~lock6, h, v ) ▶₀ #k.3 )
                                                  case out_key_v_01111211111
                                                  solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by solve( Insert( <'template', ptr>,
                                                                        <z, 'on', z.1, z.2, 'off', 
                                                                         z.3, z.4, z.5, z.6, 'usage'
                                                                        >
                                                                ) @ #t2.3 )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.51 < #vr.41)  ∥ (#k.2 < #vr.51) )
                                              case case_1
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Unlock( ~lock6, 'device' ) @ #k.3 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock6,
                                                                                           atts, h,
                                                                                           k.4,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock6, h, k.4,
                                                                                     m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock6, h, m, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock6, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock6,
                                                                                          atts, h,
                                                                                          h2.1, k.4,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.3 )
                                                next
                                                  case unlock__device_011112111111
                                                  solve( State_011112111111( ~lock6, h, v
                                                         ) ▶₀ #k.3 )
                                                    case out_key_v_01111211111
                                                    solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        by solve( Insert( <'template', ptr>,
                                                                          <z, 'on', z.1, z.2, 
                                                                           'off', z.3, z.4, z.5, 
                                                                           z.6, 'usage'>
                                                                  ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_1
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_2
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_3
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_4
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_5
                                          solve( (#vr.52 < #vr.20)  ∥ (#k.1 < #vr.52) )
                                            case case_1
                                            solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                              case case_1
                                              solve( (∃ h1 #t1.
                                                       (NewKey( h1, k2, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                       (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #t2.3) ∧
                                                       (#t0 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #t2.3) ∧
                                                       (#t1 < #t2.3)) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                by contradiction // from formulas
                                              next
                                                case case_3
                                                by contradiction // from formulas
                                              next
                                                case case_4
                                                by contradiction // from formulas
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.52 < #vr.41)  ∥ (#k.2 < #vr.52) )
                                              case case_1
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#vr.67 < #vr.20)  ∥ (#k.1 < #vr.67) )
                                                case case_1
                                                solve( (∃ h1 #t1.
                                                         (NewKey( h1, k2, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                       (∃ h k2 #t1 #t0.
                                                         (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                         (!KU( k2 ) @ #t1)
                                                        ∧
                                                         (¬(last(#t0))) ∧
                                                         (¬(last(#t1))) ∧
                                                         (#t1 < #t2.3) ∧
                                                         (#t0 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (DecKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3))  ∥
                                                       (∃ #t0 #t1 h1 h2 k.
                                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                         (EncKey( h1, k, 'on' ) @ #t1)
                                                        ∧
                                                         (¬(last(#t1))) ∧
                                                         (¬(last(#t0))) ∧
                                                         (#t0 < #t2.3) ∧
                                                         (#t1 < #t2.3)) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  by contradiction // from formulas
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                next
                                                  case case_4
                                                  by contradiction // from formulas
                                                qed
                                              next
                                                case case_2
                                                solve( (#vr.67 < #vr.41)  ∥ (#k.2 < #vr.67) )
                                                  case case_1
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, k2, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #t2.3) ∧
                                                           (#t0 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #t2.3) ∧
                                                           (#t1 < #t2.3)) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_m0111111112111111_case_6
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_7
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_8
                                          by contradiction // from formulas
                                        next
                                          case out_m0111111112111111_case_9
                                          by contradiction // from formulas
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_1
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          qed
                                        next
                                          case out_senc_key_v2___key_v1__0111111211111111_case_2
                                          solve( ((#vr.41 < #vr.55) ∧
                                                  (∃ #k.
                                                    (Unlock( ~lock9, 'device' ) @ #k)
                                                   ∧
                                                    (#vr.41 < #k) ∧
                                                    (#k < #vr.55) ∧
                                                    (∀ #l.
                                                      (Unlock( ~lock9, 'device' ) @ #l) ⇒ #l = #k) ∧
                                                    (∀ np #l.
                                                      (Lock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#l = #vr.41) ∨ (#k < #l)) ∧
                                                    (∀ np #l.
                                                      (Unlock( np, 'device' ) @ #l)
                                                     ⇒
                                                      (#l < #vr.41) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                                 (#vr.55 < #vr.41)  ∥ (#vr.41 = #vr.55) )
                                            case case_1
                                            solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                              case unlock__device_01111111111111111111111
                                              by solve( State_01111111111111111111111( ~lock9.1,
                                                                                       atts, h, k.4,
                                                                                       ptr.1, templ
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                 m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock9.1, h, m, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_01111112111111111
                                              solve( State_01111112111111111( ~lock9.1, h1.1, h2.1,
                                                                              v1, v2, wt
                                                     ) ▶₀ #k.3 )
                                                case out_senc_key_v2___key_v1__0111111211111111
                                                solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', ptr>,
                                                                     <z, 'on', z.1, z.2, z.3, z.4, 
                                                                      z.5, z.6, z.7, 'usage'>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock9.1,
                                                                                      atts, h, h2.1,
                                                                                      k.4, m, ut, v
                                                        ) ▶₀ #k.3 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock9.1, h, v
                                                        ) ▶₀ #k.3 )
                                            qed
                                          next
                                            case case_2
                                            solve( (#vr.55 < #vr.20)  ∥ (#k.1 < #vr.55) )
                                              case case_1
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock9.1, 'device' ) @ #k.3 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock9.1,
                                                                                         atts, h,
                                                                                         k.4, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock9.1, h, k.4,
                                                                                   m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock9.1, h, m, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_01111112111111111
                                                solve( State_01111112111111111( ~lock9.1, h1.1,
                                                                                h2.1, v1, v2, wt
                                                       ) ▶₀ #k.3 )
                                                  case out_senc_key_v2___key_v1__0111111211111111
                                                  solve( (#t2.9 < #t2.12)  ∥ (#t2.9 = #t2.12) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.11)  ∥ (#t2.8 = #t2.11) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'template', ptr>,
                                                                       <z, 'on', z.1, z.2, z.3, 
                                                                        z.4, z.5, z.6, z.7, 'usage'>
                                                               ) @ #t2.3 )
                                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock9.1,
                                                                                        atts, h,
                                                                                        h2.1, k.4,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.3 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock9.1, h, v
                                                          ) ▶₀ #k.3 )
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( (#t2.6 < #t2.9)  ∥ (#t2.6 = #t2.9) )
                                              case case_1
                                              by contradiction // from formulas
                                            next
                                              case case_2
                                              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', ptr>,
                                                                 <z, 'on', z.1, z.2, z.3, z.4, z.5, 
                                                                  z.6, z.7, 'usage'>
                                                         ) @ #t2.3 )
                                                    case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock9, atts, h, h2, k.3,
                                                                        m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock9, h, v ) ▶₀ #k.2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case unlock__device_01111111121111111
                      by solve( State_01111111121111111( ~lock13, h, k.2, m, v
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_011111112111111
                      by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.1 )
                    next
                      case unlock__device_01111112111111111
                      by solve( State_01111112111111111( ~lock13, h1, h2, v1, v2, wt
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_0111112111111111111111
                      by solve( State_0111112111111111111111( ~lock13, atts, h, h2, k.2,
                                                              m, ut, v
                                ) ▶₀ #k.1 )
                    next
                      case unlock__device_011112111111
                      by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.1 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case out_m0111111112111111_case_1
          by contradiction // from formulas
        next
          case out_m0111111112111111_case_2
          solve( (∃ h1 #t1.
                   (NewKey( h1, k2, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            by contradiction // from formulas
          next
            case case_3
            by contradiction // from formulas
          next
            case case_4
            by contradiction // from formulas
          qed
        next
          case out_m0111111112111111_case_3
          solve( (∃ h1 #t1.
                   (NewKey( h1, k2, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            by contradiction // from formulas
          next
            case case_3
            by contradiction // from formulas
          next
            case case_4
            by contradiction // from formulas
          qed
        next
          case out_m0111111112111111_case_4
          solve( (∃ h1 #t1.
                   (NewKey( h1, k2, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            by contradiction // from formulas
          next
            case case_3
            by contradiction // from formulas
          next
            case case_4
            by contradiction // from formulas
          qed
        next
          case out_m0111111112111111_case_5
          solve( (∃ h1 #t1.
                   (NewKey( h1, k2, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            by contradiction // from formulas
          next
            case case_3
            by contradiction // from formulas
          next
            case case_4
            by contradiction // from formulas
          qed
        next
          case out_m0111111112111111_case_6
          by contradiction // from formulas
        next
          case out_m0111111112111111_case_7
          by contradiction // from formulas
        next
          case out_m0111111112111111_case_8
          by contradiction // from formulas
        next
          case out_m0111111112111111_case_9
          by contradiction // from formulas
        next
          case out_senc_key_v2___key_v1__0111111211111111_case_1
          solve( (z.34 = 'off')  ∥ ((z.34 = 'on') ∧ (z.24 = 'on')) )
            case case_1
            solve( Unlock( ~lock9, 'device' ) @ #k.2 )
              case unlock__device_01111111111111111111111
              by solve( State_01111111111111111111111( ~lock9, atts, h.1, k.3,
                                                       ptr, templ
                        ) ▶₀ #k.2 )
            next
              case unlock__device_01111111121111111
              by solve( State_01111111121111111( ~lock9, h.1, k.3, m, v
                        ) ▶₀ #k.2 )
            next
              case unlock__device_011111112111111
              by solve( State_011111112111111( ~lock9, h.1, m, v ) ▶₀ #k.2 )
            next
              case unlock__device_01111112111111111
              solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                     ) ▶₀ #k.2 )
                case out_senc_key_v2___key_v1__0111111211111111
                solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                  case case_1
                  by contradiction // from formulas
                next
                  case case_2
                  solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                    case case_1
                    by contradiction // from formulas
                  next
                    case case_2
                    solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                      case case_1
                      by contradiction // from formulas
                    next
                      case case_2
                      solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                        by contradiction // from formulas
                      next
                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                        by contradiction // from formulas
                      next
                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                        solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                          case case_1
                          solve( State_01( ) ▶₀ #t2.1 )
                            case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                            by contradiction // cyclic
                          qed
                        next
                          case case_2
                          solve( Insert( <'obj', h>,
                                         <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                                 ) @ #t2.2 )
                            case insert___obj___h2___m__atts_011111211111111
                            solve( State_011111211111111( ~lock15.1,
                                                          <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                           z.7, 'usage'>,
                                                          h.1, h, k.3, k, ut, v
                                   ) ▶₀ #t2.2 )
                              case new_h201111121111111
                              solve( (#vr.34 < #vr.22)  ∥ (#k.2 < #vr.34) )
                                case case_1
                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                           k.5, ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                     wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #vr.44))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #vr.44) ∧
                                             (#t0 < #vr.44))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.44) ∧
                                             (#t1 < #vr.44))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.44) ∧
                                             (#t1 < #vr.44)) )
                                      case case_1
                                      solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( State_0111111111111111( ~lock13,
                                                                         <x, x.1, x.2, x.3, 'on', 
                                                                          x.4, x.5, x.6, x.7, x.8>,
                                                                         h1, k, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                            solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                              case unlock__device_01111111111111111111111
                                              solve( State_01111111111111111111111( ~lock13, atts,
                                                                                    h.1, k.5, ptr.1,
                                                                                    templ
                                                     ) ▶₀ #k.4 )
                                                case out_h0111111111111111111111
                                                solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', z.16>,
                                                                 <z.18, z.19, z.20, z.21, z.22, 
                                                                  'on', z.23, 'off', z.24, z.25>
                                                         ) @ #t2.3 )
                                                    case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock13, h.1, k.5,
                                                                                 m, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock13, h.1, m, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_01111112111111111
                                              by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                 h2.1, v1, v2, wt
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                      h.1, h2.1,
                                                                                      k.5, m, ut, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock13, h.1, v
                                                        ) ▶₀ #k.4 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                qed
                              next
                                case case_2
                                solve( ((#vr.7 < #vr.34) ∧
                                        (∃ #k.
                                          (Unlock( ~lock15, 'device' ) @ #k)
                                         ∧
                                          (#vr.7 < #k) ∧
                                          (#k < #vr.34) ∧
                                          (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                          (∀ np #l.
                                            (Lock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                          (∀ np #l.
                                            (Unlock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                       (#vr.34 < #vr.7) )
                                  case case_1
                                  solve( Unlock( ~lock15, 'device' ) @ #k.4 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15, atts, h.1,
                                                                             k.5, ptr, templ
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15, h.1, k.5, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15, h.1, m, v ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15, atts, h.1, h2.1,
                                                                         k.5, m, ut, v
                                           ) ▶₀ #k.4 )
                                      case out_h2011111211111111111111
                                      by contradiction // cyclic
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.4 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                             k.5, ptr, templ
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15.1, h.1, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1,
                                                                       v2, wt
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                         k.5, m, ut, v
                                           ) ▶₀ #k.4 )
                                      case out_h2011111211111111111111
                                      solve( (∃ h1 #t1.
                                               (NewKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧ (#t1 < #vr.44))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #vr.44) ∧
                                               (#t0 < #vr.44))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #vr.44) ∧
                                               (#t1 < #vr.44))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #vr.44) ∧
                                               (#t1 < #vr.44)) )
                                        case case_1
                                        solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( State_0111111111111111( ~lock13,
                                                                           <x, x.1, x.2, x.3, 'on', 
                                                                            x.4, x.5, x.6, x.7, x.8
                                                                           >,
                                                                           h1, k, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                              solve( (#vr.49 < #vr.22)  ∥ (#k.1 < #vr.49) )
                                                case case_1
                                                solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  solve( State_01111111111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        k.5, ptr.1,
                                                                                        templ
                                                         ) ▶₀ #k.4 )
                                                    case out_h0111111111111111111111
                                                    solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', z.16>,
                                                                     <z.18, z.19, z.20, z.21, z.22, 
                                                                      'on', z.23, 'off', z.24, z.25>
                                                             ) @ #t2.3 )
                                                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock13, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock13, h.1, m,
                                                                                   v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock13,
                                                                                          atts, h.1,
                                                                                          h2.1, k.5,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock13, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              next
                                                case case_2
                                                solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  solve( State_01111111111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        k.5, ptr.1,
                                                                                        templ
                                                         ) ▶₀ #k.4 )
                                                    case out_h0111111111111111111111
                                                    solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', z.16>,
                                                                     <z.18, z.19, z.20, z.21, z.22, 
                                                                      'on', z.23, 'off', z.24, z.25>
                                                             ) @ #t2.3 )
                                                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                        by contradiction // from formulas
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock13, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock13, h.1, m,
                                                                                   v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock13,
                                                                                          atts, h.1,
                                                                                          h2.1, k.5,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock13, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction // from formulas
                                      next
                                        case case_3
                                        by contradiction // from formulas
                                      next
                                        case case_4
                                        by contradiction // from formulas
                                      qed
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insert___obj___h___k__atts_01111111111111111
                            solve( State_01111111111111111( ~lock13,
                                                            <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                             z.7, 'usage'>,
                                                            h, k, ptr, templ
                                   ) ▶₀ #t2.2 )
                              case event_NewKey_h__k__attsens_atts__0111111111111111
                              solve( (#vr.33 < #vr.22)  ∥ (#k.1 < #vr.33) )
                                case case_1
                                solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                        templ
                                         ) ▶₀ #k.2 )
                                    case out_h0111111111111111111111
                                    solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( Insert( <'template', z.15>,
                                                     <z.17, z.18, z.19, z.20, z.21, 'on', z.22, 
                                                      'off', z.23, z.24>
                                             ) @ #t2.3 )
                                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                        by contradiction // from formulas
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                          k.3, m, ut, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                qed
                              next
                                case case_2
                                solve( ((#vr.7 < #vr.33) ∧
                                        (∃ #k.
                                          (Unlock( ~lock15, 'device' ) @ #k)
                                         ∧
                                          (#vr.7 < #k) ∧
                                          (#k < #vr.33) ∧
                                          (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                          (∀ np #l.
                                            (Lock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                          (∀ np #l.
                                            (Unlock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                       (#vr.33 < #vr.7) )
                                  case case_1
                                  solve( Unlock( ~lock15, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15, atts, h, k.3,
                                                                             ptr, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15, atts, h, h2.1,
                                                                         k.3, m, ut, v
                                           ) ▶₀ #k.2 )
                                      case out_h2011111211111111111111
                                      by contradiction // cyclic
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15, h, v ) ▶₀ #k.2 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    solve( State_01111111111111111111111( ~lock13, atts, h, k.3,
                                                                          ptr, templ
                                           ) ▶₀ #k.2 )
                                      case out_h0111111111111111111111
                                      solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( Insert( <'template', z.15>,
                                                       <z.17, z.18, z.19, z.20, z.21, 'on', z.22, 
                                                        'off', z.23, z.24>
                                               ) @ #t2.3 )
                                          case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                          by contradiction // from formulas
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case unlock__device_0111112111111111111111
              by solve( State_0111112111111111111111( ~lock9, atts, h.1, h2, k.3,
                                                      m, ut.1, v
                        ) ▶₀ #k.2 )
            next
              case unlock__device_011112111111
              by solve( State_011112111111( ~lock9, h.1, v ) ▶₀ #k.2 )
            qed
          next
            case case_2
            solve( Unlock( ~lock9, 'device' ) @ #k.2 )
              case unlock__device_01111111111111111111111
              by solve( State_01111111111111111111111( ~lock9, atts, h.1, k.3,
                                                       ptr, templ
                        ) ▶₀ #k.2 )
            next
              case unlock__device_01111111121111111
              by solve( State_01111111121111111( ~lock9, h.1, k.3, m, v
                        ) ▶₀ #k.2 )
            next
              case unlock__device_011111112111111
              by solve( State_011111112111111( ~lock9, h.1, m, v ) ▶₀ #k.2 )
            next
              case unlock__device_01111112111111111
              solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                     ) ▶₀ #k.2 )
                case out_senc_key_v2___key_v1__0111111211111111
                solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                  case case_1
                  by contradiction // from formulas
                next
                  case case_2
                  solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                    case case_1
                    by contradiction // from formulas
                  next
                    case case_2
                    solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                      case case_1
                      by contradiction // from formulas
                    next
                      case case_2
                      solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                        by contradiction // from formulas
                      next
                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                        by contradiction // from formulas
                      next
                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                        solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                          case case_1
                          solve( State_01( ) ▶₀ #t2.1 )
                            case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                            by contradiction // cyclic
                          qed
                        next
                          case case_2
                          solve( Insert( <'obj', h>,
                                         <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                                 ) @ #t2.2 )
                            case insert___obj___h2___m__atts_011111211111111
                            solve( State_011111211111111( ~lock15.1,
                                                          <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                           z.7, 'usage'>,
                                                          h.1, h, k.3, k, ut, v
                                   ) ▶₀ #t2.2 )
                              case new_h201111121111111
                              solve( (#vr.34 < #vr.22)  ∥ (#k.2 < #vr.34) )
                                case case_1
                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                           k.5, ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                     wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #vr.44))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #vr.44) ∧
                                             (#t0 < #vr.44))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.44) ∧
                                             (#t1 < #vr.44))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.44) ∧
                                             (#t1 < #vr.44)) )
                                      case case_1
                                      solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( State_0111111111111111( ~lock13,
                                                                         <x, x.1, x.2, x.3, 'on', 
                                                                          x.4, x.5, x.6, x.7, x.8>,
                                                                         h1, k, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                            solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                              case unlock__device_01111111111111111111111
                                              solve( State_01111111111111111111111( ~lock13, atts,
                                                                                    h.1, k.5, ptr.1,
                                                                                    templ
                                                     ) ▶₀ #k.4 )
                                                case out_h0111111111111111111111
                                                solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                  case case_1
                                                  by contradiction // from formulas
                                                next
                                                  case case_2
                                                  solve( Insert( <'template', z.15>,
                                                                 <z.17, z.18, z.19, z.20, z.21, 
                                                                  'on', z.22, 'on', z.23, z.24>
                                                         ) @ #t2.3 )
                                                    case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                    by contradiction // from formulas
                                                  next
                                                    case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                    solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h2>,
                                                                     <k, 'off', 'off', 'on', 'on', 
                                                                      'on', 'on', 'off', 'on', 
                                                                      'undef', 'undef'>
                                                             ) @ #t2.3 )
                                                        case insert___obj___h2___m__atts_011111211111111
                                                        solve( State_011111211111111( ~lock15.2,
                                                                                      <'off', 
                                                                                       'off', 'on', 
                                                                                       'on', 'on', 
                                                                                       'on', 'off', 
                                                                                       'on', 
                                                                                       'undef', 
                                                                                       'undef'>,
                                                                                      h.1, h2, k.4,
                                                                                      k, ut, v
                                                               ) ▶₀ #t2.3 )
                                                          case new_h201111121111111
                                                          solve( (#vr.69 < #vr.34)  ∥
                                                                 (#k.3 < #vr.69) )
                                                            case case_1
                                                            solve( (#vr.69 < #vr.49)  ∥
                                                                   (#k.5 < #vr.69) )
                                                              case case_1
                                                              solve( Unlock( ~lock15.2, 'device'
                                                                     ) @ #k.6 )
                                                                case unlock__device_01111111111111111111111
                                                                by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                         atts,
                                                                                                         h.2,
                                                                                                         k.7,
                                                                                                         ptr.1,
                                                                                                         templ
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111111121111111
                                                                by solve( State_01111111121111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_011111112111111
                                                                by solve( State_011111112111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 m,
                                                                                                 v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111112111111111
                                                                by solve( State_01111112111111111( ~lock15.2,
                                                                                                   h1.1,
                                                                                                   h2,
                                                                                                   v1,
                                                                                                   v2,
                                                                                                   wt
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_0111112111111111111111
                                                                solve( State_0111112111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     h2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     ut,
                                                                                                     v
                                                                       ) ▶₀ #k.6 )
                                                                  case out_h2011111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ h k2 #t1 #t0.
                                                                           (NewKey( h, k2, 'on'
                                                                            ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79) ∧
                                                                           (#t0 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79)) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_3
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_4
                                                                    by contradiction
                                                                       // from formulas
                                                                  qed
                                                                qed
                                                              next
                                                                case unlock__device_011112111111
                                                                by solve( State_011112111111( ~lock15.2,
                                                                                              h.2, v
                                                                          ) ▶₀ #k.6 )
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Unlock( ~lock15.2, 'device'
                                                                     ) @ #k.6 )
                                                                case unlock__device_01111111111111111111111
                                                                by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                         atts,
                                                                                                         h.2,
                                                                                                         k.7,
                                                                                                         ptr.1,
                                                                                                         templ
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111111121111111
                                                                by solve( State_01111111121111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_011111112111111
                                                                by solve( State_011111112111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 m,
                                                                                                 v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111112111111111
                                                                by solve( State_01111112111111111( ~lock15.2,
                                                                                                   h1.1,
                                                                                                   h2,
                                                                                                   v1,
                                                                                                   v2,
                                                                                                   wt
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_0111112111111111111111
                                                                solve( State_0111112111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     h2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     ut,
                                                                                                     v
                                                                       ) ▶₀ #k.6 )
                                                                  case out_h2011111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ h k2 #t1 #t0.
                                                                           (NewKey( h, k2, 'on'
                                                                            ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79) ∧
                                                                           (#t0 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79)) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_3
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_4
                                                                    by contradiction
                                                                       // from formulas
                                                                  qed
                                                                qed
                                                              next
                                                                case unlock__device_011112111111
                                                                by solve( State_011112111111( ~lock15.2,
                                                                                              h.2, v
                                                                          ) ▶₀ #k.6 )
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Unlock( ~lock15.2, 'device'
                                                                   ) @ #k.6 )
                                                              case unlock__device_01111111111111111111111
                                                              by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       k.7,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111111121111111
                                                              by solve( State_01111111121111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 k.7,
                                                                                                 m,
                                                                                                 v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_011111112111111
                                                              by solve( State_011111112111111( ~lock15.2,
                                                                                               h.2,
                                                                                               m, v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111112111111111
                                                              by solve( State_01111112111111111( ~lock15.2,
                                                                                                 h1.1,
                                                                                                 h2,
                                                                                                 v1,
                                                                                                 v2,
                                                                                                 wt
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_0111112111111111111111
                                                              solve( State_0111112111111111111111( ~lock15.2,
                                                                                                   atts,
                                                                                                   h.2,
                                                                                                   h2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   ut,
                                                                                                   v
                                                                     ) ▶₀ #k.6 )
                                                                case out_h2011111211111111111111
                                                                solve( (∃ h1 #t1.
                                                                         (NewKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.79))  ∥
                                                                       (∃ h k2 #t1 #t0.
                                                                         (NewKey( h, k2, 'on'
                                                                          ) @ #t0) ∧
                                                                         (!KU( k2 ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.79) ∧
                                                                         (#t0 < #vr.79))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (WrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (DecKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.79) ∧
                                                                         (#t1 < #vr.79))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (UnwrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (EncKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.79) ∧
                                                                         (#t1 < #vr.79)) )
                                                                  case case_1
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_2
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_3
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_4
                                                                  by contradiction // from formulas
                                                                qed
                                                              qed
                                                            next
                                                              case unlock__device_011112111111
                                                              by solve( State_011112111111( ~lock15.2,
                                                                                            h.2, v
                                                                        ) ▶₀ #k.6 )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insert___obj___h___k__atts_01111111111111111
                                                        solve( State_01111111111111111( ~lock13.1,
                                                                                        <'off', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'undef', 
                                                                                         'undef'>,
                                                                                        h2, k,
                                                                                        ptr.1, templ
                                                               ) ▶₀ #t2.3 )
                                                          case event_NewKey_h__k__attsens_atts__0111111111111111
                                                          by contradiction // from formulas
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock__device_01111111121111111
                                              by solve( State_01111111121111111( ~lock13, h.1, k.5,
                                                                                 m, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_011111112111111
                                              by solve( State_011111112111111( ~lock13, h.1, m, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_01111112111111111
                                              by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                 h2.1, v1, v2, wt
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_0111112111111111111111
                                              by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                      h.1, h2.1,
                                                                                      k.5, m, ut, v
                                                        ) ▶₀ #k.4 )
                                            next
                                              case unlock__device_011112111111
                                              by solve( State_011112111111( ~lock13, h.1, v
                                                        ) ▶₀ #k.4 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                qed
                              next
                                case case_2
                                solve( ((#vr.7 < #vr.34) ∧
                                        (∃ #k.
                                          (Unlock( ~lock15, 'device' ) @ #k)
                                         ∧
                                          (#vr.7 < #k) ∧
                                          (#k < #vr.34) ∧
                                          (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                          (∀ np #l.
                                            (Lock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                          (∀ np #l.
                                            (Unlock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                       (#vr.34 < #vr.7) )
                                  case case_1
                                  solve( Unlock( ~lock15, 'device' ) @ #k.4 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15, atts, h.1,
                                                                             k.5, ptr, templ
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15, h.1, k.5, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15, h.1, m, v ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15, atts, h.1, h2.1,
                                                                         k.5, m, ut, v
                                           ) ▶₀ #k.4 )
                                      case out_h2011111211111111111111
                                      by contradiction // cyclic
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.4 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                             k.5, ptr, templ
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15.1, h.1, m, v
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1,
                                                                       v2, wt
                                              ) ▶₀ #k.4 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                         k.5, m, ut, v
                                           ) ▶₀ #k.4 )
                                      case out_h2011111211111111111111
                                      solve( (∃ h1 #t1.
                                               (NewKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧ (#t1 < #vr.44))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #vr.44) ∧
                                               (#t0 < #vr.44))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #vr.44) ∧
                                               (#t1 < #vr.44))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #vr.44) ∧
                                               (#t1 < #vr.44)) )
                                        case case_1
                                        solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( State_0111111111111111( ~lock13,
                                                                           <x, x.1, x.2, x.3, 'on', 
                                                                            x.4, x.5, x.6, x.7, x.8
                                                                           >,
                                                                           h1, k, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                              solve( (#vr.49 < #vr.22)  ∥ (#k.1 < #vr.49) )
                                                case case_1
                                                solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  solve( State_01111111111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        k.5, ptr.1,
                                                                                        templ
                                                         ) ▶₀ #k.4 )
                                                    case out_h0111111111111111111111
                                                    solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', z.15>,
                                                                     <z.17, z.18, z.19, z.20, z.21, 
                                                                      'on', z.22, 'on', z.23, z.24>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      next
                                                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                        solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                          case case_1
                                                          by contradiction // from formulas
                                                        next
                                                          case case_2
                                                          solve( Insert( <'obj', h2>,
                                                                         <k, 'off', 'off', 'on', 
                                                                          'on', 'on', 'on', 'off', 
                                                                          'on', 'undef', 'undef'>
                                                                 ) @ #t2.3 )
                                                            case insert___obj___h2___m__atts_011111211111111
                                                            solve( State_011111211111111( ~lock15.2,
                                                                                          <'off', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'undef', 
                                                                                           'undef'>,
                                                                                          h.1, h2,
                                                                                          k.4, k,
                                                                                          ut, v
                                                                   ) ▶₀ #t2.3 )
                                                              case new_h201111121111111
                                                              solve( (#vr.69 < #vr.49)  ∥
                                                                     (#k.5 < #vr.69) )
                                                                case case_1
                                                                solve( Unlock( ~lock15.2, 'device'
                                                                       ) @ #k.6 )
                                                                  case unlock__device_01111111111111111111111
                                                                  by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                           atts,
                                                                                                           h.2,
                                                                                                           k.7,
                                                                                                           ptr.1,
                                                                                                           templ
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_01111111121111111
                                                                  by solve( State_01111111121111111( ~lock15.2,
                                                                                                     h.2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     v
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_011111112111111
                                                                  by solve( State_011111112111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   m,
                                                                                                   v
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_01111112111111111
                                                                  by solve( State_01111112111111111( ~lock15.2,
                                                                                                     h1.1,
                                                                                                     h2,
                                                                                                     v1,
                                                                                                     v2,
                                                                                                     wt
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_0111112111111111111111
                                                                  solve( State_0111112111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       h2,
                                                                                                       k.7,
                                                                                                       m,
                                                                                                       ut,
                                                                                                       v
                                                                         ) ▶₀ #k.6 )
                                                                    case out_h2011111211111111111111
                                                                    solve( (∃ h1 #t1.
                                                                             (NewKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (#t1 < #vr.79))  ∥
                                                                           (∃ h k2 #t1 #t0.
                                                                             (NewKey( h, k2, 'on'
                                                                              ) @ #t0) ∧
                                                                             (!KU( k2 ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (#t1 < #vr.79) ∧
                                                                             (#t0 < #vr.79))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (WrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (DecKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (#t0 < #vr.79) ∧
                                                                             (#t1 < #vr.79))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (UnwrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (EncKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (#t0 < #vr.79) ∧
                                                                             (#t1 < #vr.79)) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_3
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_4
                                                                      by contradiction
                                                                         // from formulas
                                                                    qed
                                                                  qed
                                                                next
                                                                  case unlock__device_011112111111
                                                                  by solve( State_011112111111( ~lock15.2,
                                                                                                h.2,
                                                                                                v
                                                                            ) ▶₀ #k.6 )
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Unlock( ~lock15.2, 'device'
                                                                       ) @ #k.6 )
                                                                  case unlock__device_01111111111111111111111
                                                                  by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                           atts,
                                                                                                           h.2,
                                                                                                           k.7,
                                                                                                           ptr.1,
                                                                                                           templ
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_01111111121111111
                                                                  by solve( State_01111111121111111( ~lock15.2,
                                                                                                     h.2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     v
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_011111112111111
                                                                  by solve( State_011111112111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   m,
                                                                                                   v
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_01111112111111111
                                                                  by solve( State_01111112111111111( ~lock15.2,
                                                                                                     h1.1,
                                                                                                     h2,
                                                                                                     v1,
                                                                                                     v2,
                                                                                                     wt
                                                                            ) ▶₀ #k.6 )
                                                                next
                                                                  case unlock__device_0111112111111111111111
                                                                  solve( State_0111112111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       h2,
                                                                                                       k.7,
                                                                                                       m,
                                                                                                       ut,
                                                                                                       v
                                                                         ) ▶₀ #k.6 )
                                                                    case out_h2011111211111111111111
                                                                    solve( (∃ h1 #t1.
                                                                             (NewKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (#t1 < #vr.79))  ∥
                                                                           (∃ h k2 #t1 #t0.
                                                                             (NewKey( h, k2, 'on'
                                                                              ) @ #t0) ∧
                                                                             (!KU( k2 ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (#t1 < #vr.79) ∧
                                                                             (#t0 < #vr.79))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (WrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (DecKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (#t0 < #vr.79) ∧
                                                                             (#t1 < #vr.79))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (UnwrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (EncKey( h1, k, 'on'
                                                                              ) @ #t1)
                                                                            ∧
                                                                             (¬(last(#t1))) ∧
                                                                             (¬(last(#t0))) ∧
                                                                             (#t0 < #vr.79) ∧
                                                                             (#t1 < #vr.79)) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_3
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_4
                                                                      by contradiction
                                                                         // from formulas
                                                                    qed
                                                                  qed
                                                                next
                                                                  case unlock__device_011112111111
                                                                  by solve( State_011112111111( ~lock15.2,
                                                                                                h.2,
                                                                                                v
                                                                            ) ▶₀ #k.6 )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case insert___obj___h___k__atts_01111111111111111
                                                            solve( State_01111111111111111( ~lock13.1,
                                                                                            <'off', 
                                                                                             'off', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'off', 
                                                                                             'on', 
                                                                                             'undef', 
                                                                                             'undef'
                                                                                            >,
                                                                                            h2, k,
                                                                                            ptr.1,
                                                                                            templ
                                                                   ) ▶₀ #t2.3 )
                                                              case event_NewKey_h__k__attsens_atts__0111111111111111
                                                              by contradiction // from formulas
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock13, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock13, h.1, m,
                                                                                   v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock13,
                                                                                          atts, h.1,
                                                                                          h2.1, k.5,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock13, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              next
                                                case case_2
                                                solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  solve( State_01111111111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        k.5, ptr.1,
                                                                                        templ
                                                         ) ▶₀ #k.4 )
                                                    case out_h0111111111111111111111
                                                    solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( Insert( <'template', z.15>,
                                                                     <z.17, z.18, z.19, z.20, z.21, 
                                                                      'on', z.22, 'on', z.23, z.24>
                                                             ) @ #t2.3 )
                                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                        by contradiction // from formulas
                                                      next
                                                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                        solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                          case case_1
                                                          by contradiction // from formulas
                                                        next
                                                          case case_2
                                                          solve( Insert( <'obj', h2>,
                                                                         <k, 'off', 'off', 'on', 
                                                                          'on', 'on', 'on', 'off', 
                                                                          'on', 'undef', 'undef'>
                                                                 ) @ #t2.3 )
                                                            case insert___obj___h2___m__atts_011111211111111
                                                            solve( State_011111211111111( ~lock15.2,
                                                                                          <'off', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'undef', 
                                                                                           'undef'>,
                                                                                          h.1, h2,
                                                                                          k.4, k,
                                                                                          ut, v
                                                                   ) ▶₀ #t2.3 )
                                                              case new_h201111121111111
                                                              solve( Unlock( ~lock15.2, 'device'
                                                                     ) @ #k.6 )
                                                                case unlock__device_01111111111111111111111
                                                                by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                         atts,
                                                                                                         h.2,
                                                                                                         k.7,
                                                                                                         ptr.1,
                                                                                                         templ
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111111121111111
                                                                by solve( State_01111111121111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_011111112111111
                                                                by solve( State_011111112111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 m,
                                                                                                 v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111112111111111
                                                                by solve( State_01111112111111111( ~lock15.2,
                                                                                                   h1.1,
                                                                                                   h2,
                                                                                                   v1,
                                                                                                   v2,
                                                                                                   wt
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_0111112111111111111111
                                                                solve( State_0111112111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     h2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     ut,
                                                                                                     v
                                                                       ) ▶₀ #k.6 )
                                                                  case out_h2011111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ h k2 #t1 #t0.
                                                                           (NewKey( h, k2, 'on'
                                                                            ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.79) ∧
                                                                           (#t0 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.79) ∧
                                                                           (#t1 < #vr.79)) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_3
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_4
                                                                    by contradiction
                                                                       // from formulas
                                                                  qed
                                                                qed
                                                              next
                                                                case unlock__device_011112111111
                                                                by solve( State_011112111111( ~lock15.2,
                                                                                              h.2, v
                                                                          ) ▶₀ #k.6 )
                                                              qed
                                                            qed
                                                          next
                                                            case insert___obj___h___k__atts_01111111111111111
                                                            solve( State_01111111111111111( ~lock13.1,
                                                                                            <'off', 
                                                                                             'off', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'on', 
                                                                                             'off', 
                                                                                             'on', 
                                                                                             'undef', 
                                                                                             'undef'
                                                                                            >,
                                                                                            h2, k,
                                                                                            ptr.1,
                                                                                            templ
                                                                   ) ▶₀ #t2.3 )
                                                              case event_NewKey_h__k__attsens_atts__0111111111111111
                                                              by contradiction // from formulas
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock13, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock13, h.1, m,
                                                                                   v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                     h2.1, v1, v2,
                                                                                     wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  by solve( State_0111112111111111111111( ~lock13,
                                                                                          atts, h.1,
                                                                                          h2.1, k.5,
                                                                                          m, ut, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock13, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction // from formulas
                                      next
                                        case case_3
                                        by contradiction // from formulas
                                      next
                                        case case_4
                                        by contradiction // from formulas
                                      qed
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insert___obj___h___k__atts_01111111111111111
                            solve( State_01111111111111111( ~lock13,
                                                            <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                             z.7, 'usage'>,
                                                            h, k, ptr, templ
                                   ) ▶₀ #t2.2 )
                              case event_NewKey_h__k__attsens_atts__0111111111111111
                              solve( (#vr.33 < #vr.22)  ∥ (#k.1 < #vr.33) )
                                case case_1
                                solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                        templ
                                         ) ▶₀ #k.2 )
                                    case out_h0111111111111111111111
                                    solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( Insert( <'template', z.14>,
                                                     <z.16, z.17, z.18, z.19, z.20, 'on', z.21, 
                                                      'on', z.22, z.23>
                                             ) @ #t2.3 )
                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                        by contradiction // from formulas
                                      next
                                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                        solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( Insert( <'obj', h2>,
                                                         <k, 'off', 'off', 'on', 'on', 'on', 'on', 
                                                          'off', 'on', 'undef', 'undef'>
                                                 ) @ #t2.3 )
                                            case insert___obj___h2___m__atts_011111211111111
                                            solve( State_011111211111111( ~lock15.1,
                                                                          <'off', 'off', 'on', 
                                                                           'on', 'on', 'on', 'off', 
                                                                           'on', 'undef', 'undef'>,
                                                                          h, h2, k.3, k, ut, v
                                                   ) ▶₀ #t2.3 )
                                              case new_h201111121111111
                                              solve( (#vr.52 < #vr.33)  ∥ (#k.2 < #vr.52) )
                                                case case_1
                                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock15.1,
                                                                                           atts,
                                                                                           h.1, k.5,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock15.1, h.1,
                                                                                   m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock15.1,
                                                                                     h1.1, h2, v1,
                                                                                     v2, wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  solve( State_0111112111111111111111( ~lock15.1,
                                                                                       atts, h.1,
                                                                                       h2, k.5, m,
                                                                                       ut, v
                                                         ) ▶₀ #k.4 )
                                                    case out_h2011111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.62))  ∥
                                                           (∃ h k2 #t1 #t0.
                                                             (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.62) ∧
                                                             (#t0 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62)) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by contradiction // from formulas
                                                    next
                                                      case case_3
                                                      by contradiction // from formulas
                                                    next
                                                      case case_4
                                                      by contradiction // from formulas
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock15.1, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              next
                                                case case_2
                                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock15.1,
                                                                                           atts,
                                                                                           h.1, k.5,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock15.1, h.1,
                                                                                   m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock15.1,
                                                                                     h1.1, h2, v1,
                                                                                     v2, wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  solve( State_0111112111111111111111( ~lock15.1,
                                                                                       atts, h.1,
                                                                                       h2, k.5, m,
                                                                                       ut, v
                                                         ) ▶₀ #k.4 )
                                                    case out_h2011111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.62))  ∥
                                                           (∃ h k2 #t1 #t0.
                                                             (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.62) ∧
                                                             (#t0 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62)) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by contradiction // from formulas
                                                    next
                                                      case case_3
                                                      by contradiction // from formulas
                                                    next
                                                      case case_4
                                                      by contradiction // from formulas
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock15.1, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              qed
                                            qed
                                          next
                                            case insert___obj___h___k__atts_01111111111111111
                                            solve( State_01111111111111111( ~lock13.1,
                                                                            <'off', 'off', 'on', 
                                                                             'on', 'on', 'on', 
                                                                             'off', 'on', 'undef', 
                                                                             'undef'>,
                                                                            h2, k, ptr.1, templ
                                                   ) ▶₀ #t2.3 )
                                              case event_NewKey_h__k__attsens_atts__0111111111111111
                                              by contradiction // from formulas
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                          k.3, m, ut, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                qed
                              next
                                case case_2
                                solve( ((#vr.7 < #vr.33) ∧
                                        (∃ #k.
                                          (Unlock( ~lock15, 'device' ) @ #k)
                                         ∧
                                          (#vr.7 < #k) ∧
                                          (#k < #vr.33) ∧
                                          (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                          (∀ np #l.
                                            (Lock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                          (∀ np #l.
                                            (Unlock( np, 'device' ) @ #l)
                                           ⇒
                                            (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                       (#vr.33 < #vr.7) )
                                  case case_1
                                  solve( Unlock( ~lock15, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    by solve( State_01111111111111111111111( ~lock15, atts, h, k.3,
                                                                             ptr, templ
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock15, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock15, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    solve( State_0111112111111111111111( ~lock15, atts, h, h2.1,
                                                                         k.3, m, ut, v
                                           ) ▶₀ #k.2 )
                                      case out_h2011111211111111111111
                                      by contradiction // cyclic
                                    qed
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock15, h, v ) ▶₀ #k.2 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                    case unlock__device_01111111111111111111111
                                    solve( State_01111111111111111111111( ~lock13, atts, h, k.3,
                                                                          ptr, templ
                                           ) ▶₀ #k.2 )
                                      case out_h0111111111111111111111
                                      solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( Insert( <'template', z.14>,
                                                       <z.16, z.17, z.18, z.19, z.20, 'on', z.21, 
                                                        'on', z.22, z.23>
                                               ) @ #t2.3 )
                                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                          by contradiction // from formulas
                                        next
                                          case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                          solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'obj', h2>,
                                                           <k, 'off', 'off', 'on', 'on', 'on', 
                                                            'on', 'off', 'on', 'undef', 'undef'>
                                                   ) @ #t2.3 )
                                              case insert___obj___h2___m__atts_011111211111111
                                              solve( State_011111211111111( ~lock15.1,
                                                                            <'off', 'off', 'on', 
                                                                             'on', 'on', 'on', 
                                                                             'off', 'on', 'undef', 
                                                                             'undef'>,
                                                                            h, h2, k.3, k, ut, v
                                                     ) ▶₀ #t2.3 )
                                                case new_h201111121111111
                                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                  case unlock__device_01111111111111111111111
                                                  by solve( State_01111111111111111111111( ~lock15.1,
                                                                                           atts,
                                                                                           h.1, k.5,
                                                                                           ptr.1,
                                                                                           templ
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111111121111111
                                                  by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                     k.5, m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_011111112111111
                                                  by solve( State_011111112111111( ~lock15.1, h.1,
                                                                                   m, v
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_01111112111111111
                                                  by solve( State_01111112111111111( ~lock15.1,
                                                                                     h1.1, h2, v1,
                                                                                     v2, wt
                                                            ) ▶₀ #k.4 )
                                                next
                                                  case unlock__device_0111112111111111111111
                                                  solve( State_0111112111111111111111( ~lock15.1,
                                                                                       atts, h.1,
                                                                                       h2, k.5, m,
                                                                                       ut, v
                                                         ) ▶₀ #k.4 )
                                                    case out_h2011111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.62))  ∥
                                                           (∃ h k2 #t1 #t0.
                                                             (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.62) ∧
                                                             (#t0 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62)) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      by contradiction // from formulas
                                                    next
                                                      case case_3
                                                      by contradiction // from formulas
                                                    next
                                                      case case_4
                                                      by contradiction // from formulas
                                                    qed
                                                  qed
                                                next
                                                  case unlock__device_011112111111
                                                  by solve( State_011112111111( ~lock15.1, h.1, v
                                                            ) ▶₀ #k.4 )
                                                qed
                                              qed
                                            next
                                              case insert___obj___h___k__atts_01111111111111111
                                              solve( State_01111111111111111( ~lock13.1,
                                                                              <'off', 'off', 'on', 
                                                                               'on', 'on', 'on', 
                                                                               'off', 'on', 
                                                                               'undef', 'undef'>,
                                                                              h2, k, ptr.1, templ
                                                     ) ▶₀ #t2.3 )
                                                case event_NewKey_h__k__attsens_atts__0111111111111111
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock__device_01111111121111111
                                    by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011111112111111
                                    by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_01111112111111111
                                    by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2,
                                                                       wt
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_0111112111111111111111
                                    by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                            k.3, m, ut, v
                                              ) ▶₀ #k.2 )
                                  next
                                    case unlock__device_011112111111
                                    by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case unlock__device_0111112111111111111111
              by solve( State_0111112111111111111111( ~lock9, atts, h.1, h2, k.3,
                                                      m, ut.1, v
                        ) ▶₀ #k.2 )
            next
              case unlock__device_011112111111
              by solve( State_011112111111( ~lock9, h.1, v ) ▶₀ #k.2 )
            qed
          qed
        next
          case out_senc_key_v2___key_v1__0111111211111111_case_2
          solve( Unlock( ~lock9, 'device' ) @ #k.2 )
            case unlock__device_01111111111111111111111
            by solve( State_01111111111111111111111( ~lock9, atts, h.1, k.3,
                                                     ptr, templ
                      ) ▶₀ #k.2 )
          next
            case unlock__device_01111111121111111
            by solve( State_01111111121111111( ~lock9, h.1, k.3, m, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011111112111111
            by solve( State_011111112111111( ~lock9, h.1, m, v ) ▶₀ #k.2 )
          next
            case unlock__device_01111112111111111
            solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                   ) ▶₀ #k.2 )
              case out_senc_key_v2___key_v1__0111111211111111
              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                case case_1
                by contradiction // from formulas
              next
                case case_2
                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                  case case_1
                  by contradiction // from formulas
                next
                  case case_2
                  solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                    case case_1
                    by contradiction // from formulas
                  next
                    case case_2
                    solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                      by contradiction // from formulas
                    next
                      case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                      by contradiction // from formulas
                    next
                      case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                      solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                        case case_1
                        solve( State_01( ) ▶₀ #t2.1 )
                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                          by contradiction // cyclic
                        qed
                      next
                        case case_2
                        solve( Insert( <'obj', h>,
                                       <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                               ) @ #t2.2 )
                          case insert___obj___h2___m__atts_011111211111111
                          solve( State_011111211111111( ~lock15.1,
                                                        <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                         z.7, 'usage'>,
                                                        h.1, h, k.3, k, ut, v
                                 ) ▶₀ #t2.2 )
                            case new_h201111121111111
                            solve( (#vr.35 < #vr.23)  ∥ (#k.2 < #vr.35) )
                              case case_1
                              solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock15.1, atts, h.1, k.5,
                                                                         ptr, templ
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                              next
                                case unlock__device_01111112111111111
                                by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                   wt
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_0111112111111111111111
                                solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                     k.5, m, ut, v
                                       ) ▶₀ #k.4 )
                                  case out_h2011111211111111111111
                                  solve( (∃ h1 #t1.
                                           (NewKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧ (#t1 < #vr.45))  ∥
                                         (∃ h k2 #t1 #t0.
                                           (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                          ∧
                                           (¬(last(#t0))) ∧
                                           (¬(last(#t1))) ∧
                                           (#t1 < #vr.45) ∧
                                           (#t0 < #vr.45))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                           (DecKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧
                                           (¬(last(#t0))) ∧
                                           (#t0 < #vr.45) ∧
                                           (#t1 < #vr.45))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧
                                           (¬(last(#t0))) ∧
                                           (#t0 < #vr.45) ∧
                                           (#t1 < #vr.45)) )
                                    case case_1
                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( State_0111111111111111( ~lock13,
                                                                       <x, x.1, x.2, x.3, 'on', 
                                                                        x.4, x.5, x.6, x.7, x.8>,
                                                                       h1, k, ptr, templ
                                               ) ▶₀ #t1 )
                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                          solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                            case unlock__device_01111111111111111111111
                                            solve( State_01111111111111111111111( ~lock13, atts,
                                                                                  h.1, k.5, ptr.1,
                                                                                  templ
                                                   ) ▶₀ #k.4 )
                                              case out_h0111111111111111111111
                                              solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Insert( <'template', z.18>,
                                                               <z.20, z.21, z.22, z.23, z.24, 'on', 
                                                                z.25, 'off', z.26, z.27>
                                                       ) @ #t2.3 )
                                                  case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            qed
                                          next
                                            case unlock__device_01111111121111111
                                            by solve( State_01111111121111111( ~lock13, h.1, k.5, m,
                                                                               v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_011111112111111
                                            by solve( State_011111112111111( ~lock13, h.1, m, v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_01111112111111111
                                            by solve( State_01111112111111111( ~lock13, h1.1, h2.1,
                                                                               v1, v2, wt
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_0111112111111111111111
                                            by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                    h.1, h2.1, k.5,
                                                                                    m, ut, v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_011112111111
                                            by solve( State_011112111111( ~lock13, h.1, v
                                                      ) ▶₀ #k.4 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    by contradiction // from formulas
                                  next
                                    case case_3
                                    by contradiction // from formulas
                                  next
                                    case case_4
                                    by contradiction // from formulas
                                  qed
                                qed
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                              qed
                            next
                              case case_2
                              solve( ((#vr.7 < #vr.35) ∧
                                      (∃ #k.
                                        (Unlock( ~lock15, 'device' ) @ #k)
                                       ∧
                                        (#vr.7 < #k) ∧
                                        (#k < #vr.35) ∧
                                        (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                        (∀ np #l.
                                          (Lock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                        (∀ np #l.
                                          (Unlock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                     (#vr.35 < #vr.7) )
                                case case_1
                                solve( Unlock( ~lock15, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15, atts, h.1, k.5,
                                                                           ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    by contradiction // cyclic
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.4 )
                                qed
                              next
                                case case_2
                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                           k.5, ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                     wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #vr.45))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #vr.45) ∧
                                             (#t0 < #vr.45))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.45) ∧
                                             (#t1 < #vr.45))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.45) ∧
                                             (#t1 < #vr.45)) )
                                      case case_1
                                      solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( State_0111111111111111( ~lock13,
                                                                         <x, x.1, x.2, x.3, 'on', 
                                                                          x.4, x.5, x.6, x.7, x.8>,
                                                                         h1, k, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                            solve( (#vr.50 < #vr.23)  ∥ (#k.1 < #vr.50) )
                                              case case_1
                                              solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                solve( State_01111111111111111111111( ~lock13, atts,
                                                                                      h.1, k.5,
                                                                                      ptr.1, templ
                                                       ) ▶₀ #k.4 )
                                                  case out_h0111111111111111111111
                                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( Insert( <'template', z.18>,
                                                                   <z.20, z.21, z.22, z.23, z.24, 
                                                                    'on', z.25, 'off', z.26, z.27>
                                                           ) @ #t2.3 )
                                                      case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                      by contradiction // from formulas
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock13, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock13, h.1, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        h2.1, k.5,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock13, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                solve( State_01111111111111111111111( ~lock13, atts,
                                                                                      h.1, k.5,
                                                                                      ptr.1, templ
                                                       ) ▶₀ #k.4 )
                                                  case out_h0111111111111111111111
                                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( Insert( <'template', z.18>,
                                                                   <z.20, z.21, z.22, z.23, z.24, 
                                                                    'on', z.25, 'off', z.26, z.27>
                                                           ) @ #t2.3 )
                                                      case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                                      by contradiction // from formulas
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock13, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock13, h.1, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        h2.1, k.5,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock13, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case insert___obj___h___k__atts_01111111111111111
                          solve( State_01111111111111111( ~lock13,
                                                          <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                           z.7, 'usage'>,
                                                          h, k, ptr, templ
                                 ) ▶₀ #t2.2 )
                            case event_NewKey_h__k__attsens_atts__0111111111111111
                            solve( (#vr.34 < #vr.23)  ∥ (#k.1 < #vr.34) )
                              case case_1
                              solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                      templ
                                       ) ▶₀ #k.2 )
                                  case out_h0111111111111111111111
                                  solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( Insert( <'template', z.17>,
                                                   <z.19, z.20, z.21, z.22, z.23, 'on', z.24, 
                                                    'off', z.25, z.26>
                                           ) @ #t2.3 )
                                      case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                      by contradiction // from formulas
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                        k.3, m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                              qed
                            next
                              case case_2
                              solve( ((#vr.7 < #vr.34) ∧
                                      (∃ #k.
                                        (Unlock( ~lock15, 'device' ) @ #k)
                                       ∧
                                        (#vr.7 < #k) ∧
                                        (#k < #vr.34) ∧
                                        (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                        (∀ np #l.
                                          (Lock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                        (∀ np #l.
                                          (Unlock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                     (#vr.34 < #vr.7) )
                                case case_1
                                solve( Unlock( ~lock15, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15, atts, h, k.3,
                                                                           ptr, templ
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15, atts, h, h2.1, k.3,
                                                                       m, ut, v
                                         ) ▶₀ #k.2 )
                                    case out_h2011111211111111111111
                                    by contradiction // cyclic
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15, h, v ) ▶₀ #k.2 )
                                qed
                              next
                                case case_2
                                solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                        templ
                                         ) ▶₀ #k.2 )
                                    case out_h0111111111111111111111
                                    solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( Insert( <'template', z.17>,
                                                     <z.19, z.20, z.21, z.22, z.23, 'on', z.24, 
                                                      'off', z.25, z.26>
                                             ) @ #t2.3 )
                                        case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                                        by contradiction // from formulas
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                          k.3, m, ut, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case unlock__device_0111112111111111111111
            by solve( State_0111112111111111111111( ~lock9, atts, h.1, h2, k.3,
                                                    m, ut.1, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011112111111
            by solve( State_011112111111( ~lock9, h.1, v ) ▶₀ #k.2 )
          qed
        next
          case out_senc_key_v2___key_v1__0111111211111111_case_3
          solve( Unlock( ~lock9, 'device' ) @ #k.2 )
            case unlock__device_01111111111111111111111
            by solve( State_01111111111111111111111( ~lock9, atts, h.1, k.3,
                                                     ptr, templ
                      ) ▶₀ #k.2 )
          next
            case unlock__device_01111111121111111
            by solve( State_01111111121111111( ~lock9, h.1, k.3, m, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011111112111111
            by solve( State_011111112111111( ~lock9, h.1, m, v ) ▶₀ #k.2 )
          next
            case unlock__device_01111112111111111
            solve( State_01111112111111111( ~lock9, h1, h2, v1, v2, wt
                   ) ▶₀ #k.2 )
              case out_senc_key_v2___key_v1__0111111211111111
              solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                case case_1
                by contradiction // from formulas
              next
                case case_2
                solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                  case case_1
                  by contradiction // from formulas
                next
                  case case_2
                  solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                    case case_1
                    by contradiction // from formulas
                  next
                    case case_2
                    solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                      by contradiction // from formulas
                    next
                      case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                      by contradiction // from formulas
                    next
                      case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                      solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                        case case_1
                        solve( State_01( ) ▶₀ #t2.1 )
                          case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                          by contradiction // cyclic
                        qed
                      next
                        case case_2
                        solve( Insert( <'obj', h>,
                                       <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                               ) @ #t2.2 )
                          case insert___obj___h2___m__atts_011111211111111
                          solve( State_011111211111111( ~lock15.1,
                                                        <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                         z.7, 'usage'>,
                                                        h.1, h, k.3, k, ut, v
                                 ) ▶₀ #t2.2 )
                            case new_h201111121111111
                            solve( (#vr.35 < #vr.23)  ∥ (#k.2 < #vr.35) )
                              case case_1
                              solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                case unlock__device_01111111111111111111111
                                by solve( State_01111111111111111111111( ~lock15.1, atts, h.1, k.5,
                                                                         ptr, templ
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                              next
                                case unlock__device_01111112111111111
                                by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                   wt
                                          ) ▶₀ #k.4 )
                              next
                                case unlock__device_0111112111111111111111
                                solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                     k.5, m, ut, v
                                       ) ▶₀ #k.4 )
                                  case out_h2011111211111111111111
                                  solve( (∃ h1 #t1.
                                           (NewKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧ (#t1 < #vr.45))  ∥
                                         (∃ h k2 #t1 #t0.
                                           (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                          ∧
                                           (¬(last(#t0))) ∧
                                           (¬(last(#t1))) ∧
                                           (#t1 < #vr.45) ∧
                                           (#t0 < #vr.45))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                           (DecKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧
                                           (¬(last(#t0))) ∧
                                           (#t0 < #vr.45) ∧
                                           (#t1 < #vr.45))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1)
                                          ∧
                                           (¬(last(#t1))) ∧
                                           (¬(last(#t0))) ∧
                                           (#t0 < #vr.45) ∧
                                           (#t1 < #vr.45)) )
                                    case case_1
                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( State_0111111111111111( ~lock13,
                                                                       <x, x.1, x.2, x.3, 'on', 
                                                                        x.4, x.5, x.6, x.7, x.8>,
                                                                       h1, k, ptr, templ
                                               ) ▶₀ #t1 )
                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                          solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                            case unlock__device_01111111111111111111111
                                            solve( State_01111111111111111111111( ~lock13, atts,
                                                                                  h.1, k.5, ptr.1,
                                                                                  templ
                                                   ) ▶₀ #k.4 )
                                              case out_h0111111111111111111111
                                              solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Insert( <'template', z.17>,
                                                               <z.19, z.20, z.21, z.22, z.23, 'on', 
                                                                z.24, 'on', z.25, z.26>
                                                       ) @ #t2.3 )
                                                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                  by contradiction // from formulas
                                                next
                                                  case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                  solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h2>,
                                                                   <z.9, 'off', 'off', 'on', 'on', 
                                                                    'on', 'on', 'off', 'on', 
                                                                    'undef', 'undef'>
                                                           ) @ #t2.3 )
                                                      case insert___obj___h2___m__atts_011111211111111
                                                      solve( State_011111211111111( ~lock15.2,
                                                                                    <'off', 'off', 
                                                                                     'on', 'on', 
                                                                                     'on', 'on', 
                                                                                     'off', 'on', 
                                                                                     'undef', 
                                                                                     'undef'>,
                                                                                    h.1, h2, k.4,
                                                                                    z.9, ut, v
                                                             ) ▶₀ #t2.3 )
                                                        case new_h201111121111111
                                                        solve( (#vr.70 < #vr.35)  ∥
                                                               (#k.3 < #vr.70) )
                                                          case case_1
                                                          solve( (#vr.70 < #vr.50)  ∥
                                                                 (#k.5 < #vr.70) )
                                                            case case_1
                                                            solve( Unlock( ~lock15.2, 'device'
                                                                   ) @ #k.6 )
                                                              case unlock__device_01111111111111111111111
                                                              by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       k.7,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111111121111111
                                                              by solve( State_01111111121111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 k.7,
                                                                                                 m,
                                                                                                 v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_011111112111111
                                                              by solve( State_011111112111111( ~lock15.2,
                                                                                               h.2,
                                                                                               m, v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111112111111111
                                                              by solve( State_01111112111111111( ~lock15.2,
                                                                                                 h1.1,
                                                                                                 h2,
                                                                                                 v1,
                                                                                                 v2,
                                                                                                 wt
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_0111112111111111111111
                                                              solve( State_0111112111111111111111( ~lock15.2,
                                                                                                   atts,
                                                                                                   h.2,
                                                                                                   h2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   ut,
                                                                                                   v
                                                                     ) ▶₀ #k.6 )
                                                                case out_h2011111211111111111111
                                                                solve( (∃ h1 #t1.
                                                                         (NewKey( h1, m, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ h k2 #t1 #t0.
                                                                         (NewKey( h, k2, 'on'
                                                                          ) @ #t0) ∧
                                                                         (!KU( k2 ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80) ∧
                                                                         (#t0 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (WrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (DecKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (UnwrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (EncKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80)) )
                                                                  case case_1
                                                                  solve( (#t2.9 < #t2.11)  ∥
                                                                         (#t2.9 = #t2.11) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    solve( (#t2.8 < #t2.10)  ∥
                                                                           (#t2.8 = #t2.10) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      solve( State_0111111111111111( ~lock13.1,
                                                                                                     <
                                                                                                      x.8, 
                                                                                                      x.9, 
                                                                                                      x.10, 
                                                                                                      x.11, 
                                                                                                      'on', 
                                                                                                      x.12, 
                                                                                                      x.13, 
                                                                                                      x.14, 
                                                                                                      x.15, 
                                                                                                      x.16
                                                                                                     >,
                                                                                                     h1.1,
                                                                                                     m,
                                                                                                     ptr.1,
                                                                                                     templ
                                                                             ) ▶₀ #t1.1 )
                                                                        case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                        by contradiction
                                                                           // impossible chain
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_3
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_4
                                                                  by contradiction // from formulas
                                                                qed
                                                              qed
                                                            next
                                                              case unlock__device_011112111111
                                                              by solve( State_011112111111( ~lock15.2,
                                                                                            h.2, v
                                                                        ) ▶₀ #k.6 )
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Unlock( ~lock15.2, 'device'
                                                                   ) @ #k.6 )
                                                              case unlock__device_01111111111111111111111
                                                              by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       k.7,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111111121111111
                                                              by solve( State_01111111121111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 k.7,
                                                                                                 m,
                                                                                                 v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_011111112111111
                                                              by solve( State_011111112111111( ~lock15.2,
                                                                                               h.2,
                                                                                               m, v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111112111111111
                                                              by solve( State_01111112111111111( ~lock15.2,
                                                                                                 h1.1,
                                                                                                 h2,
                                                                                                 v1,
                                                                                                 v2,
                                                                                                 wt
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_0111112111111111111111
                                                              solve( State_0111112111111111111111( ~lock15.2,
                                                                                                   atts,
                                                                                                   h.2,
                                                                                                   h2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   ut,
                                                                                                   v
                                                                     ) ▶₀ #k.6 )
                                                                case out_h2011111211111111111111
                                                                solve( (∃ h1 #t1.
                                                                         (NewKey( h1, m, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ h k2 #t1 #t0.
                                                                         (NewKey( h, k2, 'on'
                                                                          ) @ #t0) ∧
                                                                         (!KU( k2 ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80) ∧
                                                                         (#t0 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (WrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (DecKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (UnwrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (EncKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80)) )
                                                                  case case_1
                                                                  solve( (#t2.9 < #t2.11)  ∥
                                                                         (#t2.9 = #t2.11) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    solve( (#t2.8 < #t2.10)  ∥
                                                                           (#t2.8 = #t2.10) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      solve( State_0111111111111111( ~lock13.1,
                                                                                                     <
                                                                                                      x.8, 
                                                                                                      x.9, 
                                                                                                      x.10, 
                                                                                                      x.11, 
                                                                                                      'on', 
                                                                                                      x.12, 
                                                                                                      x.13, 
                                                                                                      x.14, 
                                                                                                      x.15, 
                                                                                                      x.16
                                                                                                     >,
                                                                                                     h1.1,
                                                                                                     m,
                                                                                                     ptr.1,
                                                                                                     templ
                                                                             ) ▶₀ #t1.1 )
                                                                        case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                        by contradiction
                                                                           // impossible chain
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_3
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_4
                                                                  by contradiction // from formulas
                                                                qed
                                                              qed
                                                            next
                                                              case unlock__device_011112111111
                                                              by solve( State_011112111111( ~lock15.2,
                                                                                            h.2, v
                                                                        ) ▶₀ #k.6 )
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Unlock( ~lock15.2, 'device'
                                                                 ) @ #k.6 )
                                                            case unlock__device_01111111111111111111111
                                                            by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     k.7,
                                                                                                     ptr.1,
                                                                                                     templ
                                                                      ) ▶₀ #k.6 )
                                                          next
                                                            case unlock__device_01111111121111111
                                                            by solve( State_01111111121111111( ~lock15.2,
                                                                                               h.2,
                                                                                               k.7,
                                                                                               m, v
                                                                      ) ▶₀ #k.6 )
                                                          next
                                                            case unlock__device_011111112111111
                                                            by solve( State_011111112111111( ~lock15.2,
                                                                                             h.2, m,
                                                                                             v
                                                                      ) ▶₀ #k.6 )
                                                          next
                                                            case unlock__device_01111112111111111
                                                            by solve( State_01111112111111111( ~lock15.2,
                                                                                               h1.1,
                                                                                               h2,
                                                                                               v1,
                                                                                               v2,
                                                                                               wt
                                                                      ) ▶₀ #k.6 )
                                                          next
                                                            case unlock__device_0111112111111111111111
                                                            solve( State_0111112111111111111111( ~lock15.2,
                                                                                                 atts,
                                                                                                 h.2,
                                                                                                 h2,
                                                                                                 k.7,
                                                                                                 m,
                                                                                                 ut,
                                                                                                 v
                                                                   ) ▶₀ #k.6 )
                                                              case out_h2011111211111111111111
                                                              solve( (∃ h1 #t1.
                                                                       (NewKey( h1, m, 'on' ) @ #t1)
                                                                      ∧
                                                                       (¬(last(#t1))) ∧
                                                                       (#t1 < #vr.80))  ∥
                                                                     (∃ h k2 #t1 #t0.
                                                                       (NewKey( h, k2, 'on'
                                                                        ) @ #t0) ∧
                                                                       (!KU( k2 ) @ #t1)
                                                                      ∧
                                                                       (¬(last(#t0))) ∧
                                                                       (¬(last(#t1))) ∧
                                                                       (#t1 < #vr.80) ∧
                                                                       (#t0 < #vr.80))  ∥
                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                       (WrapKey( h2, k, 'on'
                                                                        ) @ #t0) ∧
                                                                       (DecKey( h1, k, 'on' ) @ #t1)
                                                                      ∧
                                                                       (¬(last(#t1))) ∧
                                                                       (¬(last(#t0))) ∧
                                                                       (#t0 < #vr.80) ∧
                                                                       (#t1 < #vr.80))  ∥
                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                       (UnwrapKey( h2, k, 'on'
                                                                        ) @ #t0) ∧
                                                                       (EncKey( h1, k, 'on' ) @ #t1)
                                                                      ∧
                                                                       (¬(last(#t1))) ∧
                                                                       (¬(last(#t0))) ∧
                                                                       (#t0 < #vr.80) ∧
                                                                       (#t1 < #vr.80)) )
                                                                case case_1
                                                                solve( (#t2.9 < #t2.11)  ∥
                                                                       (#t2.9 = #t2.11) )
                                                                  case case_1
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_2
                                                                  solve( (#t2.8 < #t2.10)  ∥
                                                                         (#t2.8 = #t2.10) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    solve( State_0111111111111111( ~lock13.1,
                                                                                                   <
                                                                                                    x.8, 
                                                                                                    x.9, 
                                                                                                    x.10, 
                                                                                                    x.11, 
                                                                                                    'on', 
                                                                                                    x.12, 
                                                                                                    x.13, 
                                                                                                    x.14, 
                                                                                                    x.15, 
                                                                                                    x.16
                                                                                                   >,
                                                                                                   h1.1,
                                                                                                   m,
                                                                                                   ptr.1,
                                                                                                   templ
                                                                           ) ▶₀ #t1.1 )
                                                                      case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                      by contradiction
                                                                         // impossible chain
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_2
                                                                by contradiction // from formulas
                                                              next
                                                                case case_3
                                                                by contradiction // from formulas
                                                              next
                                                                case case_4
                                                                by contradiction // from formulas
                                                              qed
                                                            qed
                                                          next
                                                            case unlock__device_011112111111
                                                            by solve( State_011112111111( ~lock15.2,
                                                                                          h.2, v
                                                                      ) ▶₀ #k.6 )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case insert___obj___h___k__atts_01111111111111111
                                                      solve( State_01111111111111111( ~lock13.1,
                                                                                      <'off', 
                                                                                       'off', 'on', 
                                                                                       'on', 'on', 
                                                                                       'on', 'off', 
                                                                                       'on', 
                                                                                       'undef', 
                                                                                       'undef'>,
                                                                                      h2, z.9,
                                                                                      ptr.1, templ
                                                             ) ▶₀ #t2.3 )
                                                        case event_NewKey_h__k__attsens_atts__0111111111111111
                                                        by contradiction // impossible chain
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case unlock__device_01111111121111111
                                            by solve( State_01111111121111111( ~lock13, h.1, k.5, m,
                                                                               v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_011111112111111
                                            by solve( State_011111112111111( ~lock13, h.1, m, v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_01111112111111111
                                            by solve( State_01111112111111111( ~lock13, h1.1, h2.1,
                                                                               v1, v2, wt
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_0111112111111111111111
                                            by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                    h.1, h2.1, k.5,
                                                                                    m, ut, v
                                                      ) ▶₀ #k.4 )
                                          next
                                            case unlock__device_011112111111
                                            by solve( State_011112111111( ~lock13, h.1, v
                                                      ) ▶₀ #k.4 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    by contradiction // from formulas
                                  next
                                    case case_3
                                    by contradiction // from formulas
                                  next
                                    case case_4
                                    by contradiction // from formulas
                                  qed
                                qed
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                              qed
                            next
                              case case_2
                              solve( ((#vr.7 < #vr.35) ∧
                                      (∃ #k.
                                        (Unlock( ~lock15, 'device' ) @ #k)
                                       ∧
                                        (#vr.7 < #k) ∧
                                        (#k < #vr.35) ∧
                                        (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                        (∀ np #l.
                                          (Lock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                        (∀ np #l.
                                          (Unlock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                     (#vr.35 < #vr.7) )
                                case case_1
                                solve( Unlock( ~lock15, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15, atts, h.1, k.5,
                                                                           ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    by contradiction // cyclic
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.4 )
                                qed
                              next
                                case case_2
                                solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15.1, atts, h.1,
                                                                           k.5, ptr, templ
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15.1, h.1, k.5, m, v
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15.1, h.1, m, v ) ▶₀ #k.4 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15.1, h1.1, h2.1, v1, v2,
                                                                     wt
                                            ) ▶₀ #k.4 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15.1, atts, h.1, h2.1,
                                                                       k.5, m, ut, v
                                         ) ▶₀ #k.4 )
                                    case out_h2011111211111111111111
                                    solve( (∃ h1 #t1.
                                             (NewKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧ (#t1 < #vr.45))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (¬(last(#t0))) ∧
                                             (¬(last(#t1))) ∧
                                             (#t1 < #vr.45) ∧
                                             (#t0 < #vr.45))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.45) ∧
                                             (#t1 < #vr.45))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                             (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (¬(last(#t1))) ∧
                                             (¬(last(#t0))) ∧
                                             (#t0 < #vr.45) ∧
                                             (#t1 < #vr.45)) )
                                      case case_1
                                      solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( State_0111111111111111( ~lock13,
                                                                         <x, x.1, x.2, x.3, 'on', 
                                                                          x.4, x.5, x.6, x.7, x.8>,
                                                                         h1, k, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                            solve( (#vr.50 < #vr.23)  ∥ (#k.1 < #vr.50) )
                                              case case_1
                                              solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                solve( State_01111111111111111111111( ~lock13, atts,
                                                                                      h.1, k.5,
                                                                                      ptr.1, templ
                                                       ) ▶₀ #k.4 )
                                                  case out_h0111111111111111111111
                                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( Insert( <'template', z.17>,
                                                                   <z.19, z.20, z.21, z.22, z.23, 
                                                                    'on', z.24, 'on', z.25, z.26>
                                                           ) @ #t2.3 )
                                                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                      by contradiction // from formulas
                                                    next
                                                      case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                      solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h2>,
                                                                       <z.9, 'off', 'off', 'on', 
                                                                        'on', 'on', 'on', 'off', 
                                                                        'on', 'undef', 'undef'>
                                                               ) @ #t2.3 )
                                                          case insert___obj___h2___m__atts_011111211111111
                                                          solve( State_011111211111111( ~lock15.2,
                                                                                        <'off', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'undef', 
                                                                                         'undef'>,
                                                                                        h.1, h2,
                                                                                        k.4, z.9,
                                                                                        ut, v
                                                                 ) ▶₀ #t2.3 )
                                                            case new_h201111121111111
                                                            solve( (#vr.70 < #vr.50)  ∥
                                                                   (#k.5 < #vr.70) )
                                                              case case_1
                                                              solve( Unlock( ~lock15.2, 'device'
                                                                     ) @ #k.6 )
                                                                case unlock__device_01111111111111111111111
                                                                by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                         atts,
                                                                                                         h.2,
                                                                                                         k.7,
                                                                                                         ptr.1,
                                                                                                         templ
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111111121111111
                                                                by solve( State_01111111121111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_011111112111111
                                                                by solve( State_011111112111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 m,
                                                                                                 v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111112111111111
                                                                by solve( State_01111112111111111( ~lock15.2,
                                                                                                   h1.1,
                                                                                                   h2,
                                                                                                   v1,
                                                                                                   v2,
                                                                                                   wt
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_0111112111111111111111
                                                                solve( State_0111112111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     h2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     ut,
                                                                                                     v
                                                                       ) ▶₀ #k.6 )
                                                                  case out_h2011111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, m, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.80))  ∥
                                                                         (∃ h k2 #t1 #t0.
                                                                           (NewKey( h, k2, 'on'
                                                                            ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.80) ∧
                                                                           (#t0 < #vr.80))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.80) ∧
                                                                           (#t1 < #vr.80))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.80) ∧
                                                                           (#t1 < #vr.80)) )
                                                                    case case_1
                                                                    solve( (#t2.9 < #t2.11)  ∥
                                                                           (#t2.9 = #t2.11) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      solve( (#t2.8 < #t2.10)  ∥
                                                                             (#t2.8 = #t2.10) )
                                                                        case case_1
                                                                        by contradiction
                                                                           // from formulas
                                                                      next
                                                                        case case_2
                                                                        solve( State_0111111111111111( ~lock13.1,
                                                                                                       <
                                                                                                        x.8, 
                                                                                                        x.9, 
                                                                                                        x.10, 
                                                                                                        x.11, 
                                                                                                        'on', 
                                                                                                        x.12, 
                                                                                                        x.13, 
                                                                                                        x.14, 
                                                                                                        x.15, 
                                                                                                        x.16
                                                                                                       >,
                                                                                                       h1.1,
                                                                                                       m,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                               ) ▶₀ #t1.1 )
                                                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                          by contradiction
                                                                             // impossible chain
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_3
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_4
                                                                    by contradiction
                                                                       // from formulas
                                                                  qed
                                                                qed
                                                              next
                                                                case unlock__device_011112111111
                                                                by solve( State_011112111111( ~lock15.2,
                                                                                              h.2, v
                                                                          ) ▶₀ #k.6 )
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Unlock( ~lock15.2, 'device'
                                                                     ) @ #k.6 )
                                                                case unlock__device_01111111111111111111111
                                                                by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                         atts,
                                                                                                         h.2,
                                                                                                         k.7,
                                                                                                         ptr.1,
                                                                                                         templ
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111111121111111
                                                                by solve( State_01111111121111111( ~lock15.2,
                                                                                                   h.2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_011111112111111
                                                                by solve( State_011111112111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 m,
                                                                                                 v
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_01111112111111111
                                                                by solve( State_01111112111111111( ~lock15.2,
                                                                                                   h1.1,
                                                                                                   h2,
                                                                                                   v1,
                                                                                                   v2,
                                                                                                   wt
                                                                          ) ▶₀ #k.6 )
                                                              next
                                                                case unlock__device_0111112111111111111111
                                                                solve( State_0111112111111111111111( ~lock15.2,
                                                                                                     atts,
                                                                                                     h.2,
                                                                                                     h2,
                                                                                                     k.7,
                                                                                                     m,
                                                                                                     ut,
                                                                                                     v
                                                                       ) ▶₀ #k.6 )
                                                                  case out_h2011111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, m, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.80))  ∥
                                                                         (∃ h k2 #t1 #t0.
                                                                           (NewKey( h, k2, 'on'
                                                                            ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (#t1 < #vr.80) ∧
                                                                           (#t0 < #vr.80))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.80) ∧
                                                                           (#t1 < #vr.80))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on'
                                                                            ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on'
                                                                            ) @ #t1)
                                                                          ∧
                                                                           (¬(last(#t1))) ∧
                                                                           (¬(last(#t0))) ∧
                                                                           (#t0 < #vr.80) ∧
                                                                           (#t1 < #vr.80)) )
                                                                    case case_1
                                                                    solve( (#t2.9 < #t2.11)  ∥
                                                                           (#t2.9 = #t2.11) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      solve( (#t2.8 < #t2.10)  ∥
                                                                             (#t2.8 = #t2.10) )
                                                                        case case_1
                                                                        by contradiction
                                                                           // from formulas
                                                                      next
                                                                        case case_2
                                                                        solve( State_0111111111111111( ~lock13.1,
                                                                                                       <
                                                                                                        x.8, 
                                                                                                        x.9, 
                                                                                                        x.10, 
                                                                                                        x.11, 
                                                                                                        'on', 
                                                                                                        x.12, 
                                                                                                        x.13, 
                                                                                                        x.14, 
                                                                                                        x.15, 
                                                                                                        x.16
                                                                                                       >,
                                                                                                       h1.1,
                                                                                                       m,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                               ) ▶₀ #t1.1 )
                                                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                          by contradiction
                                                                             // impossible chain
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_3
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_4
                                                                    by contradiction
                                                                       // from formulas
                                                                  qed
                                                                qed
                                                              next
                                                                case unlock__device_011112111111
                                                                by solve( State_011112111111( ~lock15.2,
                                                                                              h.2, v
                                                                          ) ▶₀ #k.6 )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insert___obj___h___k__atts_01111111111111111
                                                          solve( State_01111111111111111( ~lock13.1,
                                                                                          <'off', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'undef', 
                                                                                           'undef'>,
                                                                                          h2, z.9,
                                                                                          ptr.1,
                                                                                          templ
                                                                 ) ▶₀ #t2.3 )
                                                            case event_NewKey_h__k__attsens_atts__0111111111111111
                                                            by contradiction // impossible chain
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock13, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock13, h.1, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        h2.1, k.5,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock13, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock13, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                solve( State_01111111111111111111111( ~lock13, atts,
                                                                                      h.1, k.5,
                                                                                      ptr.1, templ
                                                       ) ▶₀ #k.4 )
                                                  case out_h0111111111111111111111
                                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                                    case case_1
                                                    by contradiction // from formulas
                                                  next
                                                    case case_2
                                                    solve( Insert( <'template', z.17>,
                                                                   <z.19, z.20, z.21, z.22, z.23, 
                                                                    'on', z.24, 'on', z.25, z.26>
                                                           ) @ #t2.3 )
                                                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                                      by contradiction // from formulas
                                                    next
                                                      case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                                      solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h2>,
                                                                       <z.9, 'off', 'off', 'on', 
                                                                        'on', 'on', 'on', 'off', 
                                                                        'on', 'undef', 'undef'>
                                                               ) @ #t2.3 )
                                                          case insert___obj___h2___m__atts_011111211111111
                                                          solve( State_011111211111111( ~lock15.2,
                                                                                        <'off', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'on', 
                                                                                         'off', 
                                                                                         'on', 
                                                                                         'undef', 
                                                                                         'undef'>,
                                                                                        h.1, h2,
                                                                                        k.4, z.9,
                                                                                        ut, v
                                                                 ) ▶₀ #t2.3 )
                                                            case new_h201111121111111
                                                            solve( Unlock( ~lock15.2, 'device'
                                                                   ) @ #k.6 )
                                                              case unlock__device_01111111111111111111111
                                                              by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                       atts,
                                                                                                       h.2,
                                                                                                       k.7,
                                                                                                       ptr.1,
                                                                                                       templ
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111111121111111
                                                              by solve( State_01111111121111111( ~lock15.2,
                                                                                                 h.2,
                                                                                                 k.7,
                                                                                                 m,
                                                                                                 v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_011111112111111
                                                              by solve( State_011111112111111( ~lock15.2,
                                                                                               h.2,
                                                                                               m, v
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_01111112111111111
                                                              by solve( State_01111112111111111( ~lock15.2,
                                                                                                 h1.1,
                                                                                                 h2,
                                                                                                 v1,
                                                                                                 v2,
                                                                                                 wt
                                                                        ) ▶₀ #k.6 )
                                                            next
                                                              case unlock__device_0111112111111111111111
                                                              solve( State_0111112111111111111111( ~lock15.2,
                                                                                                   atts,
                                                                                                   h.2,
                                                                                                   h2,
                                                                                                   k.7,
                                                                                                   m,
                                                                                                   ut,
                                                                                                   v
                                                                     ) ▶₀ #k.6 )
                                                                case out_h2011111211111111111111
                                                                solve( (∃ h1 #t1.
                                                                         (NewKey( h1, m, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ h k2 #t1 #t0.
                                                                         (NewKey( h, k2, 'on'
                                                                          ) @ #t0) ∧
                                                                         (!KU( k2 ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (#t1 < #vr.80) ∧
                                                                         (#t0 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (WrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (DecKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80))  ∥
                                                                       (∃ #t0 #t1 h1 h2 k.
                                                                         (UnwrapKey( h2, k, 'on'
                                                                          ) @ #t0) ∧
                                                                         (EncKey( h1, k, 'on'
                                                                          ) @ #t1)
                                                                        ∧
                                                                         (¬(last(#t1))) ∧
                                                                         (¬(last(#t0))) ∧
                                                                         (#t0 < #vr.80) ∧
                                                                         (#t1 < #vr.80)) )
                                                                  case case_1
                                                                  solve( (#t2.9 < #t2.11)  ∥
                                                                         (#t2.9 = #t2.11) )
                                                                    case case_1
                                                                    by contradiction
                                                                       // from formulas
                                                                  next
                                                                    case case_2
                                                                    solve( (#t2.8 < #t2.10)  ∥
                                                                           (#t2.8 = #t2.10) )
                                                                      case case_1
                                                                      by contradiction
                                                                         // from formulas
                                                                    next
                                                                      case case_2
                                                                      solve( State_0111111111111111( ~lock13.1,
                                                                                                     <
                                                                                                      x.8, 
                                                                                                      x.9, 
                                                                                                      x.10, 
                                                                                                      x.11, 
                                                                                                      'on', 
                                                                                                      x.12, 
                                                                                                      x.13, 
                                                                                                      x.14, 
                                                                                                      x.15, 
                                                                                                      x.16
                                                                                                     >,
                                                                                                     h1.1,
                                                                                                     m,
                                                                                                     ptr.1,
                                                                                                     templ
                                                                             ) ▶₀ #t1.1 )
                                                                        case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                                        by contradiction
                                                                           // impossible chain
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_3
                                                                  by contradiction // from formulas
                                                                next
                                                                  case case_4
                                                                  by contradiction // from formulas
                                                                qed
                                                              qed
                                                            next
                                                              case unlock__device_011112111111
                                                              by solve( State_011112111111( ~lock15.2,
                                                                                            h.2, v
                                                                        ) ▶₀ #k.6 )
                                                            qed
                                                          qed
                                                        next
                                                          case insert___obj___h___k__atts_01111111111111111
                                                          solve( State_01111111111111111( ~lock13.1,
                                                                                          <'off', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'on', 
                                                                                           'off', 
                                                                                           'on', 
                                                                                           'undef', 
                                                                                           'undef'>,
                                                                                          h2, z.9,
                                                                                          ptr.1,
                                                                                          templ
                                                                 ) ▶₀ #t2.3 )
                                                            case event_NewKey_h__k__attsens_atts__0111111111111111
                                                            by contradiction // impossible chain
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock13, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock13, h.1, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock13, h1.1,
                                                                                   h2.1, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                by solve( State_0111112111111111111111( ~lock13,
                                                                                        atts, h.1,
                                                                                        h2.1, k.5,
                                                                                        m, ut, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock13, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction // from formulas
                                    next
                                      case case_3
                                      by contradiction // from formulas
                                    next
                                      case case_4
                                      by contradiction // from formulas
                                    qed
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15.1, h.1, v ) ▶₀ #k.4 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case insert___obj___h___k__atts_01111111111111111
                          solve( State_01111111111111111( ~lock13,
                                                          <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, 
                                                           z.7, 'usage'>,
                                                          h, k, ptr, templ
                                 ) ▶₀ #t2.2 )
                            case event_NewKey_h__k__attsens_atts__0111111111111111
                            solve( (#vr.34 < #vr.23)  ∥ (#k.1 < #vr.34) )
                              case case_1
                              solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                case unlock__device_01111111111111111111111
                                solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                      templ
                                       ) ▶₀ #k.2 )
                                  case out_h0111111111111111111111
                                  solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( Insert( <'template', z.16>,
                                                   <z.18, z.19, z.20, z.21, z.22, 'on', z.23, 'on', 
                                                    z.24, z.25>
                                           ) @ #t2.3 )
                                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                      by contradiction // from formulas
                                    next
                                      case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                      solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                        case case_1
                                        by contradiction // from formulas
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <z.8, 'off', 'off', 'on', 'on', 'on', 'on', 
                                                        'off', 'on', 'undef', 'undef'>
                                               ) @ #t2.3 )
                                          case insert___obj___h2___m__atts_011111211111111
                                          solve( State_011111211111111( ~lock15.1,
                                                                        <'off', 'off', 'on', 'on', 
                                                                         'on', 'on', 'off', 'on', 
                                                                         'undef', 'undef'>,
                                                                        h, h2, k.3, z.8, ut, v
                                                 ) ▶₀ #t2.3 )
                                            case new_h201111121111111
                                            solve( (#vr.53 < #vr.34)  ∥ (#k.2 < #vr.53) )
                                              case case_1
                                              solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock15.1,
                                                                                         atts, h.1,
                                                                                         k.5, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock15.1, h.1, m,
                                                                                 v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock15.1, h1.1,
                                                                                   h2, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                solve( State_0111112111111111111111( ~lock15.1,
                                                                                     atts, h.1, h2,
                                                                                     k.5, m, ut, v
                                                       ) ▶₀ #k.4 )
                                                  case out_h2011111211111111111111
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, m, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #vr.63) ∧
                                                           (#t0 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63)) )
                                                    case case_1
                                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( State_0111111111111111( ~lock13,
                                                                                       <x, x.1, 
                                                                                        x.2, x.3, 
                                                                                        'on', x.4, 
                                                                                        x.5, x.6, 
                                                                                        x.7, x.8>,
                                                                                       h1, m, ptr,
                                                                                       templ
                                                               ) ▶₀ #t1 )
                                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                          by contradiction // impossible chain
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock15.1, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            next
                                              case case_2
                                              solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock15.1,
                                                                                         atts, h.1,
                                                                                         k.5, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock15.1, h.1, m,
                                                                                 v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock15.1, h1.1,
                                                                                   h2, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                solve( State_0111112111111111111111( ~lock15.1,
                                                                                     atts, h.1, h2,
                                                                                     k.5, m, ut, v
                                                       ) ▶₀ #k.4 )
                                                  case out_h2011111211111111111111
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, m, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #vr.63) ∧
                                                           (#t0 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63)) )
                                                    case case_1
                                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( State_0111111111111111( ~lock13,
                                                                                       <x, x.1, 
                                                                                        x.2, x.3, 
                                                                                        'on', x.4, 
                                                                                        x.5, x.6, 
                                                                                        x.7, x.8>,
                                                                                       h1, m, ptr,
                                                                                       templ
                                                               ) ▶₀ #t1 )
                                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                          by contradiction // impossible chain
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock15.1, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            qed
                                          qed
                                        next
                                          case insert___obj___h___k__atts_01111111111111111
                                          solve( State_01111111111111111( ~lock13.1,
                                                                          <'off', 'off', 'on', 
                                                                           'on', 'on', 'on', 'off', 
                                                                           'on', 'undef', 'undef'>,
                                                                          h2, z.8, ptr.1, templ
                                                 ) ▶₀ #t2.3 )
                                            case event_NewKey_h__k__attsens_atts__0111111111111111
                                            by contradiction // impossible chain
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case unlock__device_01111111121111111
                                by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011111112111111
                                by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                              next
                                case unlock__device_01111112111111111
                                by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_0111112111111111111111
                                by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                        k.3, m, ut, v
                                          ) ▶₀ #k.2 )
                              next
                                case unlock__device_011112111111
                                by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                              qed
                            next
                              case case_2
                              solve( ((#vr.7 < #vr.34) ∧
                                      (∃ #k.
                                        (Unlock( ~lock15, 'device' ) @ #k)
                                       ∧
                                        (#vr.7 < #k) ∧
                                        (#k < #vr.34) ∧
                                        (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                        (∀ np #l.
                                          (Lock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                        (∀ np #l.
                                          (Unlock( np, 'device' ) @ #l)
                                         ⇒
                                          (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                     (#vr.34 < #vr.7) )
                                case case_1
                                solve( Unlock( ~lock15, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  by solve( State_01111111111111111111111( ~lock15, atts, h, k.3,
                                                                           ptr, templ
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock15, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock15, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock15, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  solve( State_0111112111111111111111( ~lock15, atts, h, h2.1, k.3,
                                                                       m, ut, v
                                         ) ▶₀ #k.2 )
                                    case out_h2011111211111111111111
                                    by contradiction // cyclic
                                  qed
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock15, h, v ) ▶₀ #k.2 )
                                qed
                              next
                                case case_2
                                solve( Unlock( ~lock13, 'device' ) @ #k.2 )
                                  case unlock__device_01111111111111111111111
                                  solve( State_01111111111111111111111( ~lock13, atts, h, k.3, ptr,
                                                                        templ
                                         ) ▶₀ #k.2 )
                                    case out_h0111111111111111111111
                                    solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( Insert( <'template', z.16>,
                                                     <z.18, z.19, z.20, z.21, z.22, 'on', z.23, 
                                                      'on', z.24, z.25>
                                             ) @ #t2.3 )
                                        case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                                        by contradiction // from formulas
                                      next
                                        case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                                        solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                                          case case_1
                                          by contradiction // from formulas
                                        next
                                          case case_2
                                          solve( Insert( <'obj', h2>,
                                                         <z.8, 'off', 'off', 'on', 'on', 'on', 
                                                          'on', 'off', 'on', 'undef', 'undef'>
                                                 ) @ #t2.3 )
                                            case insert___obj___h2___m__atts_011111211111111
                                            solve( State_011111211111111( ~lock15.1,
                                                                          <'off', 'off', 'on', 
                                                                           'on', 'on', 'on', 'off', 
                                                                           'on', 'undef', 'undef'>,
                                                                          h, h2, k.3, z.8, ut, v
                                                   ) ▶₀ #t2.3 )
                                              case new_h201111121111111
                                              solve( Unlock( ~lock15.1, 'device' ) @ #k.4 )
                                                case unlock__device_01111111111111111111111
                                                by solve( State_01111111111111111111111( ~lock15.1,
                                                                                         atts, h.1,
                                                                                         k.5, ptr.1,
                                                                                         templ
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111111121111111
                                                by solve( State_01111111121111111( ~lock15.1, h.1,
                                                                                   k.5, m, v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_011111112111111
                                                by solve( State_011111112111111( ~lock15.1, h.1, m,
                                                                                 v
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_01111112111111111
                                                by solve( State_01111112111111111( ~lock15.1, h1.1,
                                                                                   h2, v1, v2, wt
                                                          ) ▶₀ #k.4 )
                                              next
                                                case unlock__device_0111112111111111111111
                                                solve( State_0111112111111111111111( ~lock15.1,
                                                                                     atts, h.1, h2,
                                                                                     k.5, m, ut, v
                                                       ) ▶₀ #k.4 )
                                                  case out_h2011111211111111111111
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, m, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                         (∃ h k2 #t1 #t0.
                                                           (NewKey( h, k2, 'on' ) @ #t0) ∧
                                                           (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #vr.63) ∧
                                                           (#t0 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63)) )
                                                    case case_1
                                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                      case case_1
                                                      by contradiction // from formulas
                                                    next
                                                      case case_2
                                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                        case case_1
                                                        by contradiction // from formulas
                                                      next
                                                        case case_2
                                                        solve( State_0111111111111111( ~lock13,
                                                                                       <x, x.1, 
                                                                                        x.2, x.3, 
                                                                                        'on', x.4, 
                                                                                        x.5, x.6, 
                                                                                        x.7, x.8>,
                                                                                       h1, m, ptr,
                                                                                       templ
                                                               ) ▶₀ #t1 )
                                                          case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                                          by contradiction // impossible chain
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    by contradiction // from formulas
                                                  next
                                                    case case_3
                                                    by contradiction // from formulas
                                                  next
                                                    case case_4
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              next
                                                case unlock__device_011112111111
                                                by solve( State_011112111111( ~lock15.1, h.1, v
                                                          ) ▶₀ #k.4 )
                                              qed
                                            qed
                                          next
                                            case insert___obj___h___k__atts_01111111111111111
                                            solve( State_01111111111111111( ~lock13.1,
                                                                            <'off', 'off', 'on', 
                                                                             'on', 'on', 'on', 
                                                                             'off', 'on', 'undef', 
                                                                             'undef'>,
                                                                            h2, z.8, ptr.1, templ
                                                   ) ▶₀ #t2.3 )
                                              case event_NewKey_h__k__attsens_atts__0111111111111111
                                              by contradiction // impossible chain
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock__device_01111111121111111
                                  by solve( State_01111111121111111( ~lock13, h, k.3, m, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011111112111111
                                  by solve( State_011111112111111( ~lock13, h, m, v ) ▶₀ #k.2 )
                                next
                                  case unlock__device_01111112111111111
                                  by solve( State_01111112111111111( ~lock13, h1.1, h2.1, v1, v2, wt
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_0111112111111111111111
                                  by solve( State_0111112111111111111111( ~lock13, atts, h, h2.1,
                                                                          k.3, m, ut, v
                                            ) ▶₀ #k.2 )
                                next
                                  case unlock__device_011112111111
                                  by solve( State_011112111111( ~lock13, h, v ) ▶₀ #k.2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case unlock__device_0111112111111111111111
            by solve( State_0111112111111111111111( ~lock9, atts, h.1, h2, k.3,
                                                    m, ut.1, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011112111111
            by solve( State_011112111111( ~lock9, h.1, v ) ▶₀ #k.2 )
          qed
        next
          case out_senc_m__key_v__01111111211111
          solve( Unlock( ~lock6, 'device' ) @ #k.2 )
            case unlock__device_01111111111111111111111
            by solve( State_01111111111111111111111( ~lock6, atts, h.1, k.3,
                                                     ptr, templ
                      ) ▶₀ #k.2 )
          next
            case unlock__device_01111111121111111
            by solve( State_01111111121111111( ~lock6, h.1, k.3, m, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011111112111111
            solve( State_011111112111111( ~lock6, h.1, m, v ) ▶₀ #k.2 )
              case out_senc_m__key_v__01111111211111
              solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                case case_1
                by contradiction // from formulas
              next
                case case_2
                solve( Insert( <'template', z.8>, ut ) @ #t2.1 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction // from formulas
                next
                  case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
                  by contradiction // from formulas
                next
                  case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                  solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                    case case_1
                    solve( State_01( ) ▶₀ #t2.1 )
                      case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                      by contradiction // cyclic
                    qed
                  next
                    case case_2
                    solve( Insert( <'obj', h>,
                                   <k, z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 'usage'>
                           ) @ #t2.2 )
                      case insert___obj___h2___m__atts_011111211111111
                      solve( State_011111211111111( ~lock15.1,
                                                    <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 
                                                     'usage'>,
                                                    h.2, h, k.2, k, ut, v
                             ) ▶₀ #t2.2 )
                        case new_h201111121111111
                        solve( (#vr.32 < #vr.19)  ∥ (#k.1 < #vr.32) )
                          case case_1
                          solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                            case unlock__device_01111111111111111111111
                            by solve( State_01111111111111111111111( ~lock15.1, atts, h.2, k.4,
                                                                     ptr, templ
                                      ) ▶₀ #k.3 )
                          next
                            case unlock__device_01111111121111111
                            by solve( State_01111111121111111( ~lock15.1, h.2, k.4, m.1, v
                                      ) ▶₀ #k.3 )
                          next
                            case unlock__device_011111112111111
                            by solve( State_011111112111111( ~lock15.1, h.2, m.1, v ) ▶₀ #k.3 )
                          next
                            case unlock__device_01111112111111111
                            by solve( State_01111112111111111( ~lock15.1, h1, h2, v1, v2, wt
                                      ) ▶₀ #k.3 )
                          next
                            case unlock__device_0111112111111111111111
                            solve( State_0111112111111111111111( ~lock15.1, atts, h.2, h2, k.4,
                                                                 m.1, ut, v
                                   ) ▶₀ #k.3 )
                              case out_h2011111211111111111111
                              solve( (∃ h1 #t1.
                                       (NewKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (#t1 < #vr.42))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧
                                       (¬(last(#t1))) ∧
                                       (#t1 < #vr.42) ∧
                                       (#t0 < #vr.42))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                       (DecKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧
                                       (¬(last(#t0))) ∧
                                       (#t0 < #vr.42) ∧
                                       (#t1 < #vr.42))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                       (EncKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧
                                       (¬(last(#t0))) ∧
                                       (#t0 < #vr.42) ∧
                                       (#t1 < #vr.42)) )
                                case case_1
                                solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  solve( (#t2.4 < #t2.6)  ∥ (#t2.4 = #t2.6) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( State_0111111111111111( ~lock13,
                                                                   <x, x.1, x.2, x.3, 'on', x.4, 
                                                                    x.5, x.6, x.7, x.8>,
                                                                   h1, k, ptr, templ
                                           ) ▶₀ #t1 )
                                      case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                      solve( Unlock( ~lock13, 'device' ) @ #k.3 )
                                        case unlock__device_01111111111111111111111
                                        solve( State_01111111111111111111111( ~lock13, atts, h.2,
                                                                              k.4, ptr.1, templ
                                               ) ▶₀ #k.3 )
                                          case out_h0111111111111111111111
                                          solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                            case case_1
                                            by contradiction // from formulas
                                          next
                                            case case_2
                                            solve( Insert( <'obj', h>,
                                                           <~n, z, z.1, 'on', z.2, z.3, z.4, z.5, 
                                                            z.6, z.7, z.8>
                                                   ) @ #t2.3 )
                                              case insert___obj___h2___m__atts_011111211111111
                                              solve( State_011111211111111( ~lock15.2,
                                                                            <z, z.1, 'on', z.2, 
                                                                             z.3, z.4, z.5, z.6, 
                                                                             z.7, z.8>,
                                                                            h.2, h, k.4, ~n, ut, v
                                                     ) ▶₀ #t2.3 )
                                                case new_h201111121111111
                                                solve( ((#vr.32 < #vr.67) ∧
                                                        (∃ #k.
                                                          (Unlock( ~lock15.1, 'device' ) @ #k)
                                                         ∧
                                                          (#vr.32 < #k) ∧
                                                          (#k < #vr.67) ∧
                                                          (∀ #l.
                                                            (Unlock( ~lock15.1, 'device' ) @ #l)
                                                           ⇒
                                                            #l = #k) ∧
                                                          (∀ np #l.
                                                            (Lock( np, 'device' ) @ #l)
                                                           ⇒
                                                            (#l < #vr.32) ∨
                                                            (#l = #vr.32) ∨
                                                            (#k < #l)) ∧
                                                          (∀ np #l.
                                                            (Unlock( np, 'device' ) @ #l)
                                                           ⇒
                                                            (#l < #vr.32) ∨
                                                            (#k < #l) ∨
                                                            (#k = #l))))  ∥
                                                       (#vr.67 < #vr.32)  ∥ (#vr.32 = #vr.67) )
                                                  case case_1
                                                  solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                    case unlock__device_01111111111111111111111
                                                    by solve( State_01111111111111111111111( ~lock15.2,
                                                                                             atts,
                                                                                             h.2,
                                                                                             k.6,
                                                                                             ptr.1,
                                                                                             templ
                                                              ) ▶₀ #k.5 )
                                                  next
                                                    case unlock__device_01111111121111111
                                                    by solve( State_01111111121111111( ~lock15.2,
                                                                                       h.2, k.6,
                                                                                       m.1, v
                                                              ) ▶₀ #k.5 )
                                                  next
                                                    case unlock__device_011111112111111
                                                    by solve( State_011111112111111( ~lock15.2, h.2,
                                                                                     m.1, v
                                                              ) ▶₀ #k.5 )
                                                  next
                                                    case unlock__device_01111112111111111
                                                    by solve( State_01111112111111111( ~lock15.2,
                                                                                       h1, h2, v1,
                                                                                       v2, wt
                                                              ) ▶₀ #k.5 )
                                                  next
                                                    case unlock__device_0111112111111111111111
                                                    solve( State_0111112111111111111111( ~lock15.2,
                                                                                         atts, h.2,
                                                                                         h2, k.6,
                                                                                         m.1, ut, v
                                                           ) ▶₀ #k.5 )
                                                      case out_h2011111211111111111111
                                                      by contradiction // from formulas
                                                    qed
                                                  next
                                                    case unlock__device_011112111111
                                                    by solve( State_011112111111( ~lock15.2, h.2, v
                                                              ) ▶₀ #k.5 )
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (#vr.67 < #vr.47)  ∥ (#k.3 < #vr.67) )
                                                    case case_1
                                                    solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                      case unlock__device_01111111111111111111111
                                                      by solve( State_01111111111111111111111( ~lock15.2,
                                                                                               atts,
                                                                                               h.2,
                                                                                               k.6,
                                                                                               ptr.1,
                                                                                               templ
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111111121111111
                                                      by solve( State_01111111121111111( ~lock15.2,
                                                                                         h.2, k.6,
                                                                                         m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_011111112111111
                                                      by solve( State_011111112111111( ~lock15.2,
                                                                                       h.2, m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111112111111111
                                                      by solve( State_01111112111111111( ~lock15.2,
                                                                                         h1, h2, v1,
                                                                                         v2, wt
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_0111112111111111111111
                                                      solve( State_0111112111111111111111( ~lock15.2,
                                                                                           atts,
                                                                                           h.2, h2,
                                                                                           k.6, m.1,
                                                                                           ut, v
                                                             ) ▶₀ #k.5 )
                                                        case out_h2011111211111111111111
                                                        by contradiction // from formulas
                                                      qed
                                                    next
                                                      case unlock__device_011112111111
                                                      by solve( State_011112111111( ~lock15.2, h.2,
                                                                                    v
                                                                ) ▶₀ #k.5 )
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                      case unlock__device_01111111111111111111111
                                                      by solve( State_01111111111111111111111( ~lock15.2,
                                                                                               atts,
                                                                                               h.2,
                                                                                               k.6,
                                                                                               ptr.1,
                                                                                               templ
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111111121111111
                                                      by solve( State_01111111121111111( ~lock15.2,
                                                                                         h.2, k.6,
                                                                                         m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_011111112111111
                                                      by solve( State_011111112111111( ~lock15.2,
                                                                                       h.2, m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111112111111111
                                                      by solve( State_01111112111111111( ~lock15.2,
                                                                                         h1, h2, v1,
                                                                                         v2, wt
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_0111112111111111111111
                                                      solve( State_0111112111111111111111( ~lock15.2,
                                                                                           atts,
                                                                                           h.2, h2,
                                                                                           k.6, m.1,
                                                                                           ut, v
                                                             ) ▶₀ #k.5 )
                                                        case out_h2011111211111111111111
                                                        by contradiction // from formulas
                                                      qed
                                                    next
                                                      case unlock__device_011112111111
                                                      by solve( State_011112111111( ~lock15.2, h.2,
                                                                                    v
                                                                ) ▶₀ #k.5 )
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction // from formulas
                                                qed
                                              qed
                                            next
                                              case insert___obj___h___k__atts_01111111111111111
                                              solve( State_01111111111111111( ~lock13.1,
                                                                              <z, z.1, 'on', z.2, 
                                                                               z.3, z.4, z.5, z.6, 
                                                                               z.7, z.8>,
                                                                              h, ~n, ptr.1, templ
                                                     ) ▶₀ #t2.3 )
                                                case event_NewKey_h__k__attsens_atts__0111111111111111
                                                by contradiction // from formulas
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case unlock__device_01111111121111111
                                        by solve( State_01111111121111111( ~lock13, h.2, k.4, m.1, v
                                                  ) ▶₀ #k.3 )
                                      next
                                        case unlock__device_011111112111111
                                        by solve( State_011111112111111( ~lock13, h.2, m.1, v
                                                  ) ▶₀ #k.3 )
                                      next
                                        case unlock__device_01111112111111111
                                        by solve( State_01111112111111111( ~lock13, h1, h2, v1, v2,
                                                                           wt
                                                  ) ▶₀ #k.3 )
                                      next
                                        case unlock__device_0111112111111111111111
                                        by solve( State_0111112111111111111111( ~lock13, atts, h.2,
                                                                                h2, k.4, m.1, ut, v
                                                  ) ▶₀ #k.3 )
                                      next
                                        case unlock__device_011112111111
                                        by solve( State_011112111111( ~lock13, h.2, v ) ▶₀ #k.3 )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction // from formulas
                              next
                                case case_3
                                by contradiction // from formulas
                              next
                                case case_4
                                by contradiction // from formulas
                              qed
                            qed
                          next
                            case unlock__device_011112111111
                            by solve( State_011112111111( ~lock15.1, h.2, v ) ▶₀ #k.3 )
                          qed
                        next
                          case case_2
                          solve( ((#vr.7 < #vr.32) ∧
                                  (∃ #k.
                                    (Unlock( ~lock15, 'device' ) @ #k)
                                   ∧
                                    (#vr.7 < #k) ∧
                                    (#k < #vr.32) ∧
                                    (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                    (∀ np #l.
                                      (Lock( np, 'device' ) @ #l)
                                     ⇒
                                      (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                    (∀ np #l.
                                      (Unlock( np, 'device' ) @ #l)
                                     ⇒
                                      (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                 (#vr.32 < #vr.7) )
                            case case_1
                            solve( Unlock( ~lock15, 'device' ) @ #k.3 )
                              case unlock__device_01111111111111111111111
                              by solve( State_01111111111111111111111( ~lock15, atts, h.2, k.4,
                                                                       ptr, templ
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_01111111121111111
                              by solve( State_01111111121111111( ~lock15, h.2, k.4, m.1, v
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_011111112111111
                              by solve( State_011111112111111( ~lock15, h.2, m.1, v ) ▶₀ #k.3 )
                            next
                              case unlock__device_01111112111111111
                              by solve( State_01111112111111111( ~lock15, h1, h2, v1, v2, wt
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_0111112111111111111111
                              solve( State_0111112111111111111111( ~lock15, atts, h.2, h2, k.4,
                                                                   m.1, ut, v
                                     ) ▶₀ #k.3 )
                                case out_h2011111211111111111111
                                by contradiction // cyclic
                              qed
                            next
                              case unlock__device_011112111111
                              by solve( State_011112111111( ~lock15, h.2, v ) ▶₀ #k.3 )
                            qed
                          next
                            case case_2
                            solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                              case unlock__device_01111111111111111111111
                              by solve( State_01111111111111111111111( ~lock15.1, atts, h.2, k.4,
                                                                       ptr, templ
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_01111111121111111
                              by solve( State_01111111121111111( ~lock15.1, h.2, k.4, m.1, v
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_011111112111111
                              by solve( State_011111112111111( ~lock15.1, h.2, m.1, v ) ▶₀ #k.3 )
                            next
                              case unlock__device_01111112111111111
                              by solve( State_01111112111111111( ~lock15.1, h1, h2, v1, v2, wt
                                        ) ▶₀ #k.3 )
                            next
                              case unlock__device_0111112111111111111111
                              solve( State_0111112111111111111111( ~lock15.1, atts, h.2, h2, k.4,
                                                                   m.1, ut, v
                                     ) ▶₀ #k.3 )
                                case out_h2011111211111111111111
                                solve( (∃ h1 #t1.
                                         (NewKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧ (#t1 < #vr.42))  ∥
                                       (∃ h k2 #t1 #t0.
                                         (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                        ∧
                                         (¬(last(#t0))) ∧
                                         (¬(last(#t1))) ∧
                                         (#t1 < #vr.42) ∧
                                         (#t0 < #vr.42))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (DecKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #vr.42) ∧
                                         (#t1 < #vr.42))  ∥
                                       (∃ #t0 #t1 h1 h2 k.
                                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                         (EncKey( h1, k, 'on' ) @ #t1)
                                        ∧
                                         (¬(last(#t1))) ∧
                                         (¬(last(#t0))) ∧
                                         (#t0 < #vr.42) ∧
                                         (#t1 < #vr.42)) )
                                  case case_1
                                  solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                    case case_1
                                    by contradiction // from formulas
                                  next
                                    case case_2
                                    solve( (#t2.4 < #t2.6)  ∥ (#t2.4 = #t2.6) )
                                      case case_1
                                      by contradiction // from formulas
                                    next
                                      case case_2
                                      solve( State_0111111111111111( ~lock13,
                                                                     <x, x.1, x.2, x.3, 'on', x.4, 
                                                                      x.5, x.6, x.7, x.8>,
                                                                     h1, k, ptr, templ
                                             ) ▶₀ #t1 )
                                        case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
                                        solve( (#vr.47 < #vr.19)  ∥ (#k < #vr.47) )
                                          case case_1
                                          solve( Unlock( ~lock13, 'device' ) @ #k.3 )
                                            case unlock__device_01111111111111111111111
                                            solve( State_01111111111111111111111( ~lock13, atts,
                                                                                  h.2, k.4, ptr.1,
                                                                                  templ
                                                   ) ▶₀ #k.3 )
                                              case out_h0111111111111111111111
                                              solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Insert( <'obj', h>,
                                                               <~n, z, z.1, 'on', z.2, z.3, z.4, 
                                                                z.5, z.6, z.7, z.8>
                                                       ) @ #t2.3 )
                                                  case insert___obj___h2___m__atts_011111211111111
                                                  solve( State_011111211111111( ~lock15.2,
                                                                                <z, z.1, 'on', z.2, 
                                                                                 z.3, z.4, z.5, 
                                                                                 z.6, z.7, z.8>,
                                                                                h.2, h, k.4, ~n, ut,
                                                                                v
                                                         ) ▶₀ #t2.3 )
                                                    case new_h201111121111111
                                                    solve( (#vr.67 < #vr.47)  ∥ (#k.3 < #vr.67) )
                                                      case case_1
                                                      solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                        case unlock__device_01111111111111111111111
                                                        by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                 atts,
                                                                                                 h.2,
                                                                                                 k.6,
                                                                                                 ptr.1,
                                                                                                 templ
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_01111111121111111
                                                        by solve( State_01111111121111111( ~lock15.2,
                                                                                           h.2, k.6,
                                                                                           m.1, v
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_011111112111111
                                                        by solve( State_011111112111111( ~lock15.2,
                                                                                         h.2, m.1, v
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_01111112111111111
                                                        by solve( State_01111112111111111( ~lock15.2,
                                                                                           h1, h2,
                                                                                           v1, v2,
                                                                                           wt
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_0111112111111111111111
                                                        solve( State_0111112111111111111111( ~lock15.2,
                                                                                             atts,
                                                                                             h.2,
                                                                                             h2,
                                                                                             k.6,
                                                                                             m.1,
                                                                                             ut, v
                                                               ) ▶₀ #k.5 )
                                                          case out_h2011111211111111111111
                                                          by contradiction // from formulas
                                                        qed
                                                      next
                                                        case unlock__device_011112111111
                                                        by solve( State_011112111111( ~lock15.2,
                                                                                      h.2, v
                                                                  ) ▶₀ #k.5 )
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                        case unlock__device_01111111111111111111111
                                                        by solve( State_01111111111111111111111( ~lock15.2,
                                                                                                 atts,
                                                                                                 h.2,
                                                                                                 k.6,
                                                                                                 ptr.1,
                                                                                                 templ
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_01111111121111111
                                                        by solve( State_01111111121111111( ~lock15.2,
                                                                                           h.2, k.6,
                                                                                           m.1, v
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_011111112111111
                                                        by solve( State_011111112111111( ~lock15.2,
                                                                                         h.2, m.1, v
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_01111112111111111
                                                        by solve( State_01111112111111111( ~lock15.2,
                                                                                           h1, h2,
                                                                                           v1, v2,
                                                                                           wt
                                                                  ) ▶₀ #k.5 )
                                                      next
                                                        case unlock__device_0111112111111111111111
                                                        solve( State_0111112111111111111111( ~lock15.2,
                                                                                             atts,
                                                                                             h.2,
                                                                                             h2,
                                                                                             k.6,
                                                                                             m.1,
                                                                                             ut, v
                                                               ) ▶₀ #k.5 )
                                                          case out_h2011111211111111111111
                                                          by contradiction // from formulas
                                                        qed
                                                      next
                                                        case unlock__device_011112111111
                                                        by solve( State_011112111111( ~lock15.2,
                                                                                      h.2, v
                                                                  ) ▶₀ #k.5 )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case insert___obj___h___k__atts_01111111111111111
                                                  solve( State_01111111111111111( ~lock13.1,
                                                                                  <z, z.1, 'on', 
                                                                                   z.2, z.3, z.4, 
                                                                                   z.5, z.6, z.7, 
                                                                                   z.8>,
                                                                                  h, ~n, ptr.1,
                                                                                  templ
                                                         ) ▶₀ #t2.3 )
                                                    case event_NewKey_h__k__attsens_atts__0111111111111111
                                                    by contradiction // from formulas
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case unlock__device_01111111121111111
                                            by solve( State_01111111121111111( ~lock13, h.2, k.4,
                                                                               m.1, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_011111112111111
                                            by solve( State_011111112111111( ~lock13, h.2, m.1, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_01111112111111111
                                            by solve( State_01111112111111111( ~lock13, h1, h2, v1,
                                                                               v2, wt
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_0111112111111111111111
                                            by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                    h.2, h2, k.4,
                                                                                    m.1, ut, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_011112111111
                                            by solve( State_011112111111( ~lock13, h.2, v
                                                      ) ▶₀ #k.3 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock13, 'device' ) @ #k.3 )
                                            case unlock__device_01111111111111111111111
                                            solve( State_01111111111111111111111( ~lock13, atts,
                                                                                  h.2, k.4, ptr.1,
                                                                                  templ
                                                   ) ▶₀ #k.3 )
                                              case out_h0111111111111111111111
                                              solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                                case case_1
                                                by contradiction // from formulas
                                              next
                                                case case_2
                                                solve( Insert( <'obj', h>,
                                                               <~n, z, z.1, 'on', z.2, z.3, z.4, 
                                                                z.5, z.6, z.7, z.8>
                                                       ) @ #t2.3 )
                                                  case insert___obj___h2___m__atts_011111211111111
                                                  solve( State_011111211111111( ~lock15.2,
                                                                                <z, z.1, 'on', z.2, 
                                                                                 z.3, z.4, z.5, 
                                                                                 z.6, z.7, z.8>,
                                                                                h.2, h, k.4, ~n, ut,
                                                                                v
                                                         ) ▶₀ #t2.3 )
                                                    case new_h201111121111111
                                                    solve( Unlock( ~lock15.2, 'device' ) @ #k.5 )
                                                      case unlock__device_01111111111111111111111
                                                      by solve( State_01111111111111111111111( ~lock15.2,
                                                                                               atts,
                                                                                               h.2,
                                                                                               k.6,
                                                                                               ptr.1,
                                                                                               templ
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111111121111111
                                                      by solve( State_01111111121111111( ~lock15.2,
                                                                                         h.2, k.6,
                                                                                         m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_011111112111111
                                                      by solve( State_011111112111111( ~lock15.2,
                                                                                       h.2, m.1, v
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_01111112111111111
                                                      by solve( State_01111112111111111( ~lock15.2,
                                                                                         h1, h2, v1,
                                                                                         v2, wt
                                                                ) ▶₀ #k.5 )
                                                    next
                                                      case unlock__device_0111112111111111111111
                                                      solve( State_0111112111111111111111( ~lock15.2,
                                                                                           atts,
                                                                                           h.2, h2,
                                                                                           k.6, m.1,
                                                                                           ut, v
                                                             ) ▶₀ #k.5 )
                                                        case out_h2011111211111111111111
                                                        by contradiction // from formulas
                                                      qed
                                                    next
                                                      case unlock__device_011112111111
                                                      by solve( State_011112111111( ~lock15.2, h.2,
                                                                                    v
                                                                ) ▶₀ #k.5 )
                                                    qed
                                                  qed
                                                next
                                                  case insert___obj___h___k__atts_01111111111111111
                                                  solve( State_01111111111111111( ~lock13.1,
                                                                                  <z, z.1, 'on', 
                                                                                   z.2, z.3, z.4, 
                                                                                   z.5, z.6, z.7, 
                                                                                   z.8>,
                                                                                  h, ~n, ptr.1,
                                                                                  templ
                                                         ) ▶₀ #t2.3 )
                                                    case event_NewKey_h__k__attsens_atts__0111111111111111
                                                    by contradiction // cyclic
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case unlock__device_01111111121111111
                                            by solve( State_01111111121111111( ~lock13, h.2, k.4,
                                                                               m.1, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_011111112111111
                                            by solve( State_011111112111111( ~lock13, h.2, m.1, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_01111112111111111
                                            by solve( State_01111112111111111( ~lock13, h1, h2, v1,
                                                                               v2, wt
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_0111112111111111111111
                                            by solve( State_0111112111111111111111( ~lock13, atts,
                                                                                    h.2, h2, k.4,
                                                                                    m.1, ut, v
                                                      ) ▶₀ #k.3 )
                                          next
                                            case unlock__device_011112111111
                                            by solve( State_011112111111( ~lock13, h.2, v
                                                      ) ▶₀ #k.3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  by contradiction // from formulas
                                next
                                  case case_3
                                  by contradiction // from formulas
                                next
                                  case case_4
                                  by contradiction // from formulas
                                qed
                              qed
                            next
                              case unlock__device_011112111111
                              by solve( State_011112111111( ~lock15.1, h.2, v ) ▶₀ #k.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case insert___obj___h___k__atts_01111111111111111
                      solve( State_01111111111111111( ~lock13,
                                                      <z, 'on', z.1, z.2, z.3, z.4, z.5, z.6, z.7, 
                                                       'usage'>,
                                                      h, k, ptr, templ
                             ) ▶₀ #t2.2 )
                        case event_NewKey_h__k__attsens_atts__0111111111111111
                        solve( (#vr.31 < #vr.19)  ∥ (#k < #vr.31) )
                          case case_1
                          solve( Unlock( ~lock13, 'device' ) @ #k.1 )
                            case unlock__device_01111111111111111111111
                            solve( State_01111111111111111111111( ~lock13, atts, h.1, k.2, ptr,
                                                                  templ
                                   ) ▶₀ #k.1 )
                              case out_h0111111111111111111111
                              solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                                case case_1
                                by contradiction // from formulas
                              next
                                case case_2
                                solve( Insert( <'obj', h>,
                                               <~n, z, z.1, 'on', z.2, z.3, z.4, z.5, z.6, z.7, z.8>
                                       ) @ #t2.3 )
                                  case insert___obj___h2___m__atts_011111211111111
                                  solve( State_011111211111111( ~lock15.1,
                                                                <z, z.1, 'on', z.2, z.3, z.4, z.5, 
                                                                 z.6, z.7, z.8>,
                                                                h.1, h, k.2, ~n, ut, v
                                         ) ▶₀ #t2.3 )
                                    case new_h201111121111111
                                    solve( (#vr.50 < #vr.31)  ∥ (#k.1 < #vr.50) )
                                      case case_1
                                      solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                                        case unlock__device_01111111111111111111111
                                        by solve( State_01111111111111111111111( ~lock15.1, atts, h,
                                                                                 k.3, ptr.1, templ
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111111121111111
                                        by solve( State_01111111121111111( ~lock15.1, h, k.3, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_011111112111111
                                        by solve( State_011111112111111( ~lock15.1, h, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111112111111111
                                        by solve( State_01111112111111111( ~lock15.1, h1, h2, v1,
                                                                           v2, wt
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_0111112111111111111111
                                        solve( State_0111112111111111111111( ~lock15.1, atts, h, h2,
                                                                             k.3, m.1, ut, v
                                               ) ▶₀ #k.2 )
                                          case out_h2011111211111111111111
                                          by contradiction // from formulas
                                        qed
                                      next
                                        case unlock__device_011112111111
                                        by solve( State_011112111111( ~lock15.1, h, v ) ▶₀ #k.2 )
                                      qed
                                    next
                                      case case_2
                                      solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                                        case unlock__device_01111111111111111111111
                                        by solve( State_01111111111111111111111( ~lock15.1, atts, h,
                                                                                 k.3, ptr.1, templ
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111111121111111
                                        by solve( State_01111111121111111( ~lock15.1, h, k.3, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_011111112111111
                                        by solve( State_011111112111111( ~lock15.1, h, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111112111111111
                                        by solve( State_01111112111111111( ~lock15.1, h1, h2, v1,
                                                                           v2, wt
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_0111112111111111111111
                                        solve( State_0111112111111111111111( ~lock15.1, atts, h, h2,
                                                                             k.3, m.1, ut, v
                                               ) ▶₀ #k.2 )
                                          case out_h2011111211111111111111
                                          by contradiction // from formulas
                                        qed
                                      next
                                        case unlock__device_011112111111
                                        by solve( State_011112111111( ~lock15.1, h, v ) ▶₀ #k.2 )
                                      qed
                                    qed
                                  qed
                                next
                                  case insert___obj___h___k__atts_01111111111111111
                                  solve( State_01111111111111111( ~lock13.1,
                                                                  <z, z.1, 'on', z.2, z.3, z.4, 
                                                                   z.5, z.6, z.7, z.8>,
                                                                  h, ~n, ptr.1, templ
                                         ) ▶₀ #t2.3 )
                                    case event_NewKey_h__k__attsens_atts__0111111111111111
                                    by contradiction // from formulas
                                  qed
                                qed
                              qed
                            qed
                          next
                            case unlock__device_01111111121111111
                            by solve( State_01111111121111111( ~lock13, h.1, k.2, m.1, v
                                      ) ▶₀ #k.1 )
                          next
                            case unlock__device_011111112111111
                            by solve( State_011111112111111( ~lock13, h.1, m.1, v ) ▶₀ #k.1 )
                          next
                            case unlock__device_01111112111111111
                            by solve( State_01111112111111111( ~lock13, h1, h2, v1, v2, wt
                                      ) ▶₀ #k.1 )
                          next
                            case unlock__device_0111112111111111111111
                            by solve( State_0111112111111111111111( ~lock13, atts, h.1, h2,
                                                                    k.2, m.1, ut, v
                                      ) ▶₀ #k.1 )
                          next
                            case unlock__device_011112111111
                            by solve( State_011112111111( ~lock13, h.1, v ) ▶₀ #k.1 )
                          qed
                        next
                          case case_2
                          solve( ((#vr.7 < #vr.31) ∧
                                  (∃ #k.
                                    (Unlock( ~lock15, 'device' ) @ #k)
                                   ∧
                                    (#vr.7 < #k) ∧
                                    (#k < #vr.31) ∧
                                    (∀ #l. (Unlock( ~lock15, 'device' ) @ #l) ⇒ #l = #k) ∧
                                    (∀ np #l.
                                      (Lock( np, 'device' ) @ #l)
                                     ⇒
                                      (#l < #vr.7) ∨ (#l = #vr.7) ∨ (#k < #l)) ∧
                                    (∀ np #l.
                                      (Unlock( np, 'device' ) @ #l)
                                     ⇒
                                      (#l < #vr.7) ∨ (#k < #l) ∨ (#k = #l))))  ∥
                                 (#vr.31 < #vr.7) )
                            case case_1
                            solve( Unlock( ~lock15, 'device' ) @ #k.1 )
                              case unlock__device_01111111111111111111111
                              by solve( State_01111111111111111111111( ~lock15, atts, h.1, k.2,
                                                                       ptr, templ
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_01111111121111111
                              by solve( State_01111111121111111( ~lock15, h.1, k.2, m.1, v
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_011111112111111
                              by solve( State_011111112111111( ~lock15, h.1, m.1, v ) ▶₀ #k.1 )
                            next
                              case unlock__device_01111112111111111
                              by solve( State_01111112111111111( ~lock15, h1, h2, v1, v2, wt
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_0111112111111111111111
                              solve( State_0111112111111111111111( ~lock15, atts, h.1, h2, k.2,
                                                                   m.1, ut, v
                                     ) ▶₀ #k.1 )
                                case out_h2011111211111111111111
                                by contradiction // cyclic
                              qed
                            next
                              case unlock__device_011112111111
                              by solve( State_011112111111( ~lock15, h.1, v ) ▶₀ #k.1 )
                            qed
                          next
                            case case_2
                            solve( Unlock( ~lock13, 'device' ) @ #k.1 )
                              case unlock__device_01111111111111111111111
                              solve( State_01111111111111111111111( ~lock13, atts, h.1, k.2, ptr,
                                                                    templ
                                     ) ▶₀ #k.1 )
                                case out_h0111111111111111111111
                                solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                                  case case_1
                                  by contradiction // from formulas
                                next
                                  case case_2
                                  solve( Insert( <'obj', h>,
                                                 <~n, z, z.1, 'on', z.2, z.3, z.4, z.5, z.6, z.7, 
                                                  z.8>
                                         ) @ #t2.3 )
                                    case insert___obj___h2___m__atts_011111211111111
                                    solve( State_011111211111111( ~lock15.1,
                                                                  <z, z.1, 'on', z.2, z.3, z.4, 
                                                                   z.5, z.6, z.7, z.8>,
                                                                  h.1, h, k.2, ~n, ut, v
                                           ) ▶₀ #t2.3 )
                                      case new_h201111121111111
                                      solve( Unlock( ~lock15.1, 'device' ) @ #k.3 )
                                        case unlock__device_01111111111111111111111
                                        by solve( State_01111111111111111111111( ~lock15.1, atts, h,
                                                                                 k.3, ptr.1, templ
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111111121111111
                                        by solve( State_01111111121111111( ~lock15.1, h, k.3, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_011111112111111
                                        by solve( State_011111112111111( ~lock15.1, h, m.1, v
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_01111112111111111
                                        by solve( State_01111112111111111( ~lock15.1, h1, h2, v1,
                                                                           v2, wt
                                                  ) ▶₀ #k.2 )
                                      next
                                        case unlock__device_0111112111111111111111
                                        solve( State_0111112111111111111111( ~lock15.1, atts, h, h2,
                                                                             k.3, m.1, ut, v
                                               ) ▶₀ #k.2 )
                                          case out_h2011111211111111111111
                                          by contradiction // from formulas
                                        qed
                                      next
                                        case unlock__device_011112111111
                                        by solve( State_011112111111( ~lock15.1, h, v ) ▶₀ #k.2 )
                                      qed
                                    qed
                                  next
                                    case insert___obj___h___k__atts_01111111111111111
                                    solve( State_01111111111111111( ~lock13.1,
                                                                    <z, z.1, 'on', z.2, z.3, z.4, 
                                                                     z.5, z.6, z.7, z.8>,
                                                                    h, ~n, ptr.1, templ
                                           ) ▶₀ #t2.3 )
                                      case event_NewKey_h__k__attsens_atts__0111111111111111
                                      by contradiction // cyclic
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case unlock__device_01111111121111111
                              by solve( State_01111111121111111( ~lock13, h.1, k.2, m.1, v
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_011111112111111
                              by solve( State_011111112111111( ~lock13, h.1, m.1, v ) ▶₀ #k.1 )
                            next
                              case unlock__device_01111112111111111
                              by solve( State_01111112111111111( ~lock13, h1, h2, v1, v2, wt
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_0111112111111111111111
                              by solve( State_0111112111111111111111( ~lock13, atts, h.1, h2,
                                                                      k.2, m.1, ut, v
                                        ) ▶₀ #k.1 )
                            next
                              case unlock__device_011112111111
                              by solve( State_011112111111( ~lock13, h.1, v ) ▶₀ #k.1 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case unlock__device_01111112111111111
            by solve( State_01111112111111111( ~lock6, h1, h2, v1, v2, wt
                      ) ▶₀ #k.2 )
          next
            case unlock__device_0111112111111111111111
            by solve( State_0111112111111111111111( ~lock6, atts, h.1, h2, k.3,
                                                    m, ut.1, v
                      ) ▶₀ #k.2 )
          next
            case unlock__device_011112111111
            by solve( State_011112111111( ~lock6, h.1, v ) ▶₀ #k.2 )
          qed
        qed
      qed
    next
      case case_2
      by contradiction // from formulas
    next
      case case_3
      by contradiction // from formulas
    next
      case case_4
      by contradiction // from formulas
    next
      case case_5
      by contradiction // from formulas
    qed
  next
    case case_2
    solve( (∃ #t1.
             (Delete( x ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             ((#t1 = #t2.1) ∨ (#t2.1 < #t1)) ∧
             ((#t3 = #t1) ∨ (#t1 < #t3)))  ∥
           (∃ #t1 yp.
             (Insert( x, yp ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             ((#t1 = #t2.1) ∨ (#t2.1 < #t1)) ∧
             (¬(#t1 = #t2.1)) ∧
             ((#t3 = #t1) ∨ (#t1 < #t3))) )
      case case_1
      solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
        case case_1
        by contradiction // from formulas
      next
        case case_2
        by contradiction // from formulas
      qed
    next
      case case_2
      solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
        case case_1
        by contradiction // from formulas
      next
        case case_2
        by contradiction // from formulas
      qed
    qed
  next
    case case_3
    solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
      case case_1
      solve( (∀ #t1.1 y. (Insert( x, y ) @ #t1.1) ⇒ #t1 < #t1.1)  ∥
             (∃ #t1.1.
               (Delete( x ) @ #t1.1)
              ∧
               (#t1.1 < #t1) ∧
               (∀ #t2 y.
                 (Insert( x, y ) @ #t2) ⇒ (¬(#t2 < #t1)) ∨ (#t2 < #t1.1))) )
        case case_1
        by contradiction // cyclic
      next
        case case_2
        by contradiction // from formulas
      qed
    next
      case case_2
      solve( (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ #t3 < #t1)  ∥
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (#t1 < #t3) ∧
               (∀ #t2 y. (Insert( x, y ) @ #t2) ⇒ (¬(#t2 < #t3)) ∨ (#t2 < #t1))) )
        case case_1
        by contradiction // cyclic
      next
        case case_2
        by contradiction // from formulas
      qed
    qed
  next
    case case_4
    solve( (#t2 < #j)  ∥ (#i < #t2) )
      case case_1
      solve( (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)))  ∥
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j))) )
        case case_1
        solve( (#k.2 = #j)  ∥ (#j < #k.2) )
          case case_1
          by contradiction // from formulas
        next
          case case_2
          by contradiction // from formulas
        qed
      next
        case case_2
        solve( (#k.2 = #j)  ∥ (#j < #k.2) )
          case case_1
          by contradiction // from formulas
        next
          case case_2
          by contradiction // from formulas
        qed
      qed
    next
      case case_2
      solve( (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)))  ∥
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j))) )
        case case_1
        solve( (#k.2 = #j)  ∥ (#j < #k.2) )
          case case_1
          by contradiction // from formulas
        next
          case case_2
          by contradiction // from formulas
        qed
      next
        case case_2
        solve( (#k.2 = #j)  ∥ (#j < #k.2) )
          case case_1
          by contradiction // from formulas
        next
          case case_2
          by contradiction // from formulas
        qed
      qed
    qed
  next
    case case_5
    solve( (#i = #j)  ∥ (#j < #i)  ∥
           (∀ #k.
             (Unlock( n, x ) @ #k)
            ⇒
             (last(#k)) ∨
             (#i = #k) ∨
             (#k < #i) ∨
             (#k = #j) ∨
             (#j < #k) ∨
             (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
             (∃ np #l.
               (Lock( np, x ) @ #l)
              ∧
               (¬(last(#l))) ∧
               ((#l = #i) ∨ (#i < #l)) ∧
               (¬(#l = #i)) ∧
               ((#k = #l) ∨ (#l < #k))) ∨
             (∃ np #l.
               (Unlock( np, x ) @ #l)
              ∧
               (¬(last(#l))) ∧
               ((#l = #i) ∨ (#i < #l)) ∧
               ((#k = #l) ∨ (#l < #k)) ∧
               (¬(#k = #l)))) )
      case case_1
      by contradiction // from formulas
    next
      case case_2
      by contradiction // from formulas
    next
      case case_3
      solve( (#j = #i)  ∥ (#i < #j) )
        case case_1
        by contradiction // from formulas
      next
        case case_2
        solve( (∃ #l.
                 (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k.2)))  ∥
               (∃ np #l.
                 (Lock( np, x ) @ #l)
                ∧
                 (¬(last(#l))) ∧
                 ((#l = #i) ∨ (#i < #l)) ∧
                 (¬(#l = #i)) ∧
                 ((#k.2 = #l) ∨ (#l < #k.2)))  ∥
               (∃ np #l.
                 (Unlock( np, x ) @ #l)
                ∧
                 (¬(last(#l))) ∧
                 ((#l = #i) ∨ (#i < #l)) ∧
                 ((#k.2 = #l) ∨ (#l < #k.2)) ∧
                 (¬(#k.2 = #l))) )
          case case_1
          by contradiction // from formulas
        next
          case case_2
          solve( (#l = #i)  ∥ (#i < #l) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            by contradiction // from formulas
          qed
        next
          case case_3
          solve( (#l = #i)  ∥ (#i < #l) )
            case case_1
            by contradiction // from formulas
          next
            case case_2
            solve( (#k.2 = #l)  ∥ (#l < #k.2) )
              case case_1
              by contradiction // from formulas
            next
              case case_2
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_key_is_wrap_and_dec__or_unwrap_and_dec_ind [use_induction,
                                                     reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)) ⇒
    ((∃ h k2 #t1 #t0.
       ((NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
       (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))) ∨
     (∃ #t0 #t1 h1.1 h2.1 k.1.
       ((UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
        (EncKey( h1.1, k.1, 'on' ) @ #t1)) ∧
       (((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)
 ∧
  (∀ h k2 #t1 #t0.
    (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    ((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3))) ∧
    ((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2)))) ∧
  (∀ #t0 #t1 h1.1 h2.1 k.1.
    (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
    (EncKey( h1.1, k.1, 'on' ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2))) ∧
    ((¬(#t0 < #t3)) ∨ (¬(#t1 < #t3))))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)
          ⇒
           (last(#t3)) ∨
           (last(#t2)) ∨
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))) ∨
           (∃ #t0 #t1 h1.1 h2.1 k.1.
             (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
             (EncKey( h1.1, k.1, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             (¬(last(#t0))) ∧
             (((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3)))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             (last(#t2)) ∨
             (#t2 = #t3) ∨
             (#t3 < #t2) ∨
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3))) ∨
             (∃ #t1 yp.
               (Insert( x, yp ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               (¬(#t1 = #t2)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3)))))  ∥
         (∃ x #t3.
           (IsNotSet( x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∃ #t1 y.
             (Insert( x, y ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ ((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (∀ #t1.
             (Delete( x ) @ #t1)
            ⇒
             (last(#t1)) ∨
             (#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∃ #t2 y.
               (Insert( x, y ) @ #t2)
              ∧
               (¬(last(#t2))) ∧ (#t2 < #t3) ∧ ((#t2 = #t1) ∨ (#t1 < #t2)))))  ∥
         (∃ t #i.
           (ChannelInEvent( t ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (K( t ) @ #j)
            ⇒
             (last(#j)) ∨
             (#j = #i) ∨
             (#i < #j) ∨
             (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i))) ∨
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j)))))  ∥
         (∃ n x np #i #j.
           (Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)
          ∧
           (¬(last(#j))) ∧
           (¬(last(#i))) ∧
           ((#i = #j) ∨
            (#j < #i) ∨
            (∀ #k.
              (Unlock( n, x ) @ #k)
             ⇒
              (last(#k)) ∨
              (#i = #k) ∨
              (#k < #i) ∨
              (#k = #j) ∨
              (#j < #k) ∨
              (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
              (∃ np.1 #l.
                (Lock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                (¬(#l = #i)) ∧
                ((#k = #l) ∨ (#l < #k))) ∨
              (∃ np.1 #l.
                (Unlock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                ((#k = #l) ∨ (#l < #k)) ∧
                (¬(#k = #l))))) ∧
           ((#j = #i) ∨ (#i < #j)) ∧
           (¬(#i = #j))) )
    case case_1
    solve( (last(#t3))  ∥ (last(#t2))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             (¬(last(#t0))) ∧
             (((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3)))) )
      case case_1
      solve( WrapKey( h2, k, 'on' ) @ #t3 )
        case event_WrapKey_h2__m__attwrap_atts__01111121111111111
        solve( State_01111121111111111( ~lock15,
                                        <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h, h2, k,
                                        k.1, ut, v
               ) ▶₀ #t3 )
          case event_Unwrapped_h2__m__atts_0111112111111111
          solve( !KU( senc(k.1, k) ) @ #vk.3 )
            case csenc
            by sorry
          next
            case out_m0111111112111111_case_1
            by contradiction
          next
            case out_m0111111112111111_case_2
            by sorry
          next
            case out_m0111111112111111_case_3
            by sorry
          next
            case out_m0111111112111111_case_4
            by sorry
          next
            case out_m0111111112111111_case_5
            by sorry
          next
            case out_m0111111112111111_case_6
            by sorry
          next
            case out_m0111111112111111_case_7
            by sorry
          next
            case out_m0111111112111111_case_8
            by sorry
          next
            case out_m0111111112111111_case_9
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_1
            solve( Insert( <'template', z.8>,
                           <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_2
            solve( Insert( <'template', z.8>,
                           <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_3
            solve( Insert( <'template', z.8>,
                           <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            qed
          next
            case out_senc_m__key_v__01111111211111
            by sorry
          qed
        qed
      next
        case event_WrapKey_h__k__attwrap_atts__011111111111111111
        by sorry
      qed
    next
      case case_2
      solve( DecKey( h1, k, 'on' ) @ #t2 )
        case event_DecKey_h2__m__attdec_atts__011111211111111111
        solve( State_011111211111111111( ~lock15,
                                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, h, h1,
                                         k, k.1, ut, v
               ) ▶₀ #t2 )
          case event_WrapKey_h2__m__attwrap_atts__01111121111111111
          solve( !KU( senc(k.1, k) ) @ #vk.3 )
            case csenc
            by sorry
          next
            case out_m0111111112111111_case_1
            by contradiction
          next
            case out_m0111111112111111_case_2
            by sorry
          next
            case out_m0111111112111111_case_3
            by sorry
          next
            case out_m0111111112111111_case_4
            by sorry
          next
            case out_m0111111112111111_case_5
            by sorry
          next
            case out_m0111111112111111_case_6
            by sorry
          next
            case out_m0111111112111111_case_7
            by sorry
          next
            case out_m0111111112111111_case_8
            by sorry
          next
            case out_m0111111112111111_case_9
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_1
            solve( Insert( <'template', z.16>,
                           <z.18, z.19, z.20, z.21, z.22, 'on', z.23, z.24, z.25, z.26>
                   ) @ #t2.3 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            next
              case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
              by contradiction
            next
              case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
              solve( Insert( <'obj', h2>,
                             <k.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                              'undef'>
                     ) @ #t2.4 )
                case insert___obj___h2___m__atts_011111211111111
                by sorry
              next
                case insert___obj___h___k__atts_01111111111111111
                by sorry
              qed
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_2
            solve( Insert( <'template', z.18>,
                           <z.20, z.21, z.22, z.23, z.24, 'on', z.25, 'off', z.26, z.27>
                   ) @ #t2.3 )
              case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
              by contradiction
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_3
            solve( Insert( <'obj', h2>,
                           <z.9, z.19, z.20, z.21, z.22, z.23, 'on', z.24, 'on', z.25, z.26>
                   ) @ #t2.4 )
              case insert___obj___h2___m__atts_011111211111111
              by sorry
            next
              case insert___obj___h___k__atts_01111111111111111
              by sorry
            qed
          next
            case out_senc_m__key_v__01111111211111
            by sorry
          qed
        qed
      next
        case event_DecKey_h__k__attdec_atts__0111111111111111111
        by sorry
      qed
    next
      case case_3
      by sorry
    next
      case case_4
      by sorry
    qed
  next
    case case_2
    by sorry
  next
    case case_3
    by sorry
  next
    case case_4
    by sorry
  next
    case case_5
    by sorry
  qed
qed

lemma no_key_is_enc_and_unwrap [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((EncKey( h1, k, 'on' ) @ #t2) ∧
     (UnwrapKey( h2, k, 'on' ) @ #t3)) ⇒
    (∃ h k2 #t1 #t0.
      ((NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (EncKey( h1, k, 'on' ) @ #t2) ∧ (UnwrapKey( h2, k, 'on' ) @ #t3)
 ∧
  ∀ h k2 #t1 #t0.
   (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   ((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3))) ∧
   ((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2)))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (EncKey( h1, k, 'on' ) @ #t2) ∧ (UnwrapKey( h2, k, 'on' ) @ #t3)
          ⇒
           (last(#t3)) ∨
           (last(#t2)) ∨
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             (last(#t2)) ∨
             (#t2 = #t3) ∨
             (#t3 < #t2) ∨
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3))) ∨
             (∃ #t1 yp.
               (Insert( x, yp ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               (¬(#t1 = #t2)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3)))))  ∥
         (∃ x #t3.
           (IsNotSet( x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∃ #t1 y.
             (Insert( x, y ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ ((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (∀ #t1.
             (Delete( x ) @ #t1)
            ⇒
             (last(#t1)) ∨
             (#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∃ #t2 y.
               (Insert( x, y ) @ #t2)
              ∧
               (¬(last(#t2))) ∧ (#t2 < #t3) ∧ ((#t2 = #t1) ∨ (#t1 < #t2)))))  ∥
         (∃ t #i.
           (ChannelInEvent( t ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (K( t ) @ #j)
            ⇒
             (last(#j)) ∨
             (#j = #i) ∨
             (#i < #j) ∨
             (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i))) ∨
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j)))))  ∥
         (∃ n x np #i #j.
           (Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)
          ∧
           (¬(last(#j))) ∧
           (¬(last(#i))) ∧
           ((#i = #j) ∨
            (#j < #i) ∨
            (∀ #k.
              (Unlock( n, x ) @ #k)
             ⇒
              (last(#k)) ∨
              (#i = #k) ∨
              (#k < #i) ∨
              (#k = #j) ∨
              (#j < #k) ∨
              (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
              (∃ np.1 #l.
                (Lock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                (¬(#l = #i)) ∧
                ((#k = #l) ∨ (#l < #k))) ∨
              (∃ np.1 #l.
                (Unlock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                ((#k = #l) ∨ (#l < #k)) ∧
                (¬(#k = #l))))) ∧
           ((#j = #i) ∨ (#i < #j)) ∧
           (¬(#i = #j))) )
    case case_1
    solve( (last(#t3))  ∥ (last(#t2))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))) )
      case case_1
      solve( UnwrapKey( h2, k, 'on' ) @ #t3 )
        case event_UnwrapKey_h2__m__attunwrap_atts__01111121111111111111
        solve( State_01111121111111111111( ~lock15,
                                           <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h, h2,
                                           k, k.1, ut, v
               ) ▶₀ #t3 )
          case event_EncKey_h2__m__attenc_atts__0111112111111111111
          solve( !KU( senc(k.1, k) ) @ #vk.3 )
            case csenc
            by sorry
          next
            case out_m0111111112111111_case_1
            by contradiction
          next
            case out_m0111111112111111_case_2
            by sorry
          next
            case out_m0111111112111111_case_3
            by sorry
          next
            case out_m0111111112111111_case_4
            by sorry
          next
            case out_m0111111112111111_case_5
            by sorry
          next
            case out_m0111111112111111_case_6
            by sorry
          next
            case out_m0111111112111111_case_7
            by sorry
          next
            case out_m0111111112111111_case_8
            by sorry
          next
            case out_m0111111112111111_case_9
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_1
            solve( Insert( <'template', z.16>,
                           <z.18, z.19, z.20, z.21, z.22, 'on', z.23, z.24, z.25, z.26>
                   ) @ #t2.2 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            next
              case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
              by contradiction
            next
              case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
              solve( Insert( <'obj', h1>,
                             <k, 'on', z.9, z.10, z.11, z.12, z.13, 'on', z.14, 'usage', z.15>
                     ) @ #t2.4 )
                case insert___obj___h2___m__atts_011111211111111
                solve( Insert( <'template', z.8>,
                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction
                qed
              next
                case insert___obj___h___k__atts_01111111111111111
                solve( Insert( <'template', z.8>,
                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction
                qed
              qed
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_2
            solve( Insert( <'obj', h1>,
                           <z.10, 'on', z.11, z.12, z.13, z.14, z.15, z.16, z.17, z.18, z.19>
                   ) @ #t2.4 )
              case insert___obj___h2___m__atts_011111211111111
              solve( Insert( <'template', z.8>,
                             <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                     ) @ #t2.1 )
                case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                by contradiction
              qed
            next
              case insert___obj___h___k__atts_01111111111111111
              solve( Insert( <'template', z.8>,
                             <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                     ) @ #t2.1 )
                case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                by contradiction
              qed
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_3
            solve( Insert( <'obj', h1>,
                           <z.10, 'on', z.11, z.12, z.13, z.14, z.15, 'on', z.16, z.17, z.18>
                   ) @ #t2.4 )
              case insert___obj___h2___m__atts_011111211111111
              solve( Insert( <'template', z.17>,
                             <z.19, z.20, z.21, z.22, z.23, 'on', z.24, 'on', z.25, z.26>
                     ) @ #t2.3 )
                case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                by contradiction
              next
                case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                solve( Insert( <'template', z.16>,
                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction
                qed
              qed
            next
              case insert___obj___h___k__atts_01111111111111111
              solve( Insert( <'template', z.17>,
                             <z.19, z.20, z.21, z.22, z.23, 'on', z.24, 'on', z.25, z.26>
                     ) @ #t2.3 )
                case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                by contradiction
              next
                case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
                solve( Insert( <'template', z.16>,
                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
                  by contradiction
                qed
              qed
            qed
          next
            case out_senc_m__key_v__01111111211111
            by sorry
          qed
        qed
      next
        case event_UnwrapKey_h__k__attunwrap_atts__011111111111111111111
        solve( State_011111111111111111111( ~lock13,
                                            <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2,
                                            k, ptr, templ
               ) ▶₀ #t3 )
          case event_EncKey_h__k__attenc_atts__01111111111111111111
          solve( EncKey( h1, ~n.1, 'on' ) @ #t2.1 )
            case event_EncKey_h2__m__attenc_atts__0111112111111111111
            solve( State_0111112111111111111( ~lock15,
                                              <x.9, x.10, 'on', x.11, x.12, x.13, x.14, x.15, x.16, 
                                               x.17>,
                                              h, h1, k, ~n.1, ut, v
                   ) ▶₀ #t2 )
              case event_DecKey_h2__m__attdec_atts__011111211111111111
              by sorry
            qed
          next
            case event_EncKey_h__k__attenc_atts__01111111111111111111
            by sorry
          qed
        qed
      qed
    next
      case case_2
      solve( EncKey( h1, k, 'on' ) @ #t2 )
        case event_EncKey_h2__m__attenc_atts__0111112111111111111
        solve( State_0111112111111111111( ~lock15,
                                          <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h, h1,
                                          k, k.1, ut, v
               ) ▶₀ #t2 )
          case event_DecKey_h2__m__attdec_atts__011111211111111111
          solve( !KU( senc(k.1, k) ) @ #vk.3 )
            case csenc
            by sorry
          next
            case out_m0111111112111111_case_1
            by contradiction
          next
            case out_m0111111112111111_case_2
            by sorry
          next
            case out_m0111111112111111_case_3
            by sorry
          next
            case out_m0111111112111111_case_4
            by sorry
          next
            case out_m0111111112111111_case_5
            by sorry
          next
            case out_m0111111112111111_case_6
            by sorry
          next
            case out_m0111111112111111_case_7
            by sorry
          next
            case out_m0111111112111111_case_8
            by sorry
          next
            case out_m0111111112111111_case_9
            by sorry
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_1
            solve( Insert( <'template', z.16>,
                           <z.18, z.19, z.20, z.21, z.22, 'on', z.23, z.24, z.25, z.26>
                   ) @ #t2.3 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            next
              case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
              by contradiction
            next
              case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
              solve( Insert( <'obj', h2>,
                             <k.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                              'undef'>
                     ) @ #t2.4 )
                case insert___obj___h2___m__atts_011111211111111
                by sorry
              next
                case insert___obj___h___k__atts_01111111111111111
                by sorry
              qed
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_2
            solve( Insert( <'template', z.18>,
                           <z.20, z.21, z.22, z.23, z.24, 'on', z.25, 'off', z.26, z.27>
                   ) @ #t2.3 )
              case insert___template____untrusted_____off____off____on____on____off____on____off____off____undef____undef__011
              by contradiction
            qed
          next
            case out_senc_key_v2___key_v1__0111111211111111_case_3
            solve( Insert( <'template', z.17>,
                           <z.19, z.20, z.21, z.22, z.23, 'on', z.24, 'on', z.25, z.26>
                   ) @ #t2.3 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            next
              case insert___template____usage_____off____off____on____on____on____on____off____on____undef____undef__01
              solve( Insert( <'obj', h2>,
                             <z.9, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                              'undef'>
                     ) @ #t2.4 )
                case insert___obj___h2___m__atts_011111211111111
                by sorry
              next
                case insert___obj___h___k__atts_01111111111111111
                by sorry
              qed
            qed
          next
            case out_senc_m__key_v__01111111211111
            by sorry
          qed
        qed
      next
        case event_EncKey_h__k__attenc_atts__01111111111111111111
        by sorry
      qed
    next
      case case_3
      by sorry
    qed
  next
    case case_2
    by sorry
  next
    case case_3
    solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
      case case_1
      by sorry
    next
      case case_2
      by sorry
    qed
  next
    case case_4
    by sorry
  next
    case case_5
    by sorry
  qed
qed

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces
  "¬(∃ #i #j h k. (NewKey( h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (∀ #i #j h k.
           (NewKey( h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j)
          ⇒
           (last(#j)) ∨ (last(#i)))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             (last(#t2)) ∨
             (#t2 = #t3) ∨
             (#t3 < #t2) ∨
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3))) ∨
             (∃ #t1 yp.
               (Insert( x, yp ) @ #t1)
              ∧
               (¬(last(#t1))) ∧
               ((#t1 = #t2) ∨ (#t2 < #t1)) ∧
               (¬(#t1 = #t2)) ∧
               ((#t3 = #t1) ∨ (#t1 < #t3)))))  ∥
         (∃ x #t3.
           (IsNotSet( x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∃ #t1 y.
             (Insert( x, y ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ ((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (∀ #t1.
             (Delete( x ) @ #t1)
            ⇒
             (last(#t1)) ∨
             (#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∃ #t2 y.
               (Insert( x, y ) @ #t2)
              ∧
               (¬(last(#t2))) ∧ (#t2 < #t3) ∧ ((#t2 = #t1) ∨ (#t1 < #t2)))))  ∥
         (∃ t #i.
           (ChannelInEvent( t ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (K( t ) @ #j)
            ⇒
             (last(#j)) ∨
             (#j = #i) ∨
             (#i < #j) ∨
             (∃ #k.
               (Event( ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i))) ∨
             (∃ #k t2.
               (K( t2 ) @ #k)
              ∧
               (¬(last(#k))) ∧
               ((#k = #j) ∨ (#j < #k)) ∧
               ((#i = #k) ∨ (#k < #i)) ∧
               (¬(#k = #j)))))  ∥
         (∃ n x np #i #j.
           (Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)
          ∧
           (¬(last(#j))) ∧
           (¬(last(#i))) ∧
           ((#i = #j) ∨
            (#j < #i) ∨
            (∀ #k.
              (Unlock( n, x ) @ #k)
             ⇒
              (last(#k)) ∨
              (#i = #k) ∨
              (#k < #i) ∨
              (#k = #j) ∨
              (#j < #k) ∨
              (∃ #l. (Unlock( n, x ) @ #l) ∧ (¬(last(#l))) ∧ (¬(#l = #k))) ∨
              (∃ np.1 #l.
                (Lock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                (¬(#l = #i)) ∧
                ((#k = #l) ∨ (#l < #k))) ∨
              (∃ np.1 #l.
                (Unlock( np.1, x ) @ #l)
               ∧
                (¬(last(#l))) ∧
                ((#l = #i) ∨ (#i < #l)) ∧
                ((#k = #l) ∨ (#l < #k)) ∧
                (¬(#k = #l))))) ∧
           ((#j = #i) ∨ (#i < #j)) ∧
           (¬(#i = #j))) )
    case case_1
    solve( State_0111111111111111( ~lock13,
                                   <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, h, k, ptr,
                                   templ
           ) ▶₀ #i )
      case if_permits_attwrap_templ___attunwrap_templ___attenc_templ___attdec_templ___attsens_templ___attextr_templ___atttrus_templ___attwwt_templ___attwt_templ___attut_templ___attwrap_atts___attunwrap_atts___attenc_atts___attdec_atts___attsens_atts___attextr_atts___atttrus_atts___attwwt_atts___attwt_atts___attut_atts__011111111111111
      solve( !KU( ~n.1 ) @ #j )
        case out_m0111111112111111_case_1
        by contradiction
      next
        case out_m0111111112111111_case_2
        by sorry
      next
        case out_m0111111112111111_case_3
        by sorry
      next
        case out_m0111111112111111_case_4
        by sorry
      next
        case out_m0111111112111111_case_5
        by sorry
      next
        case out_m0111111112111111_case_6
        by sorry
      next
        case out_m0111111112111111_case_7
        by sorry
      next
        case out_m0111111112111111_case_8
        by sorry
      next
        case out_m0111111112111111_case_9
        by sorry
      next
        case out_senc_key_v2___key_v1__0111111211111111_case_1
        by sorry
      next
        case out_senc_key_v2___key_v1__0111111211111111_case_2
        solve( Insert( <'obj', h1>,
                       <z.1, 'on', z.2, z.3, z.4, z.5, z.6, 'on', z.7, z.8, z.9>
               ) @ #t2.3 )
          case insert___obj___h2___m__atts_011111211111111
          by sorry
        next
          case insert___obj___h___k__atts_01111111111111111
          solve( State_01111111111111111( ~lock13.1,
                                          <'on', z.2, z.3, z.4, z.5, z.6, 'on', z.7, z.8, z.9>, h1,
                                          z.1, ptr.1, templ
                 ) ▶₀ #t2 )
            case event_NewKey_h__k__attsens_atts__0111111111111111
            solve( Insert( <'template', ptr.1>,
                           <'on', z, z.1, z.2, z.3, z.4, 'on', z.5, z.6, z.7>
                   ) @ #t2.4 )
              case insert___template____trusted_____on____on____off____off____on____on____on____on____usage____usage__0
              by contradiction
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    by sorry
  next
    case case_3
    by sorry
  next
    case case_4
    by sorry
  next
    case case_5
    by sorry
  qed
qed

lemma cannot_obtain_key:
  all-traces
  "¬(∃ #i #j h k. (NewKey( h, k, 'on' ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k, 'on' ) @ #i) ∧ (K( k ) @ #j)"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup___template___ptr__as_templ01111111111111' has unbound variables: 
    templ
  
  rule `lookup___obj___h__as_v011111111211' has unbound variables: 
    v
  
  rule `lookup___obj___h__as_v01111111211' has unbound variables: 
    v
  
  rule `lookup___obj___h1__as_v10111111211' has unbound variables: 
    v1
  
  rule `lookup___obj___h2__as_v201111112111' has unbound variables: 
    v2
  
  rule `lookup___template___attwt_tem_v1____as_wt0111111211111' has unbound variables: 
    wt
  
  rule `lookup___obj___h__as_v011111211' has unbound variables: 
    v
  
  rule `lookup___template___attut_tem_v____as_ut011111211111' has unbound variables: 
    ut
  
  rule `lookup___obj___h__as_v01111211' has unbound variables: 
    v
*/

end
