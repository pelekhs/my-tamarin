theory PredicatesBinding begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

predicate: Added( x )<->∃ #a. (A( x ) @ #a) ∧ (#a < #NOW)

lemma C_exists:
  exists-trace "∃ #i. C( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (C( ) @ #i)"
*/
simplify
solve( state_121( a ) ▶₀ #i )
  case ifAddeda_0_12
  solve( state_11( ~n ) ▶₀ #a )
    case __0_1
    SOLVED // trace found
  qed
qed

lemma A_before_C:
  all-traces "∀ #c. (C( ) @ #c) ⇒ (∃ #a a.1. A( a.1 ) @ #a)"
/*
guarded formula characterizing all counter-examples:
"∃ #c. (C( ) @ #c) ∧ ∀ #a a.1. (A( a.1 ) @ #a) ⇒ ⊥"
*/
simplify
solve( state_121( a ) ▶₀ #c )
  case ifAddeda_0_12
  by contradiction /* from formulas */
qed

rule (modulo E) Init[color=#ffffff process=new a;]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newa_0_[color=#ffffff process=new a;]:
   [ state_( ), Fr( a ) ] --> [ state_1( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1[color=#ffffff process=|]:
   [ state_1( a ) ] --> [ state_11( a ), state_12( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAa_0_11[color=#ffffff process=event A( a );]:
   [ state_11( a ) ] --[ A( a ) ]-> [ state_111( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111[color=#ffffff process=0]:
   [ state_111( a ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction restr_ifAddeda_0_12_1:
  "∀ x #NOW.
    (restr_ifAddeda_0_12_1( x ) @ #NOW) ⇒
    (∃ #a. (A( x ) @ #a) ∧ (#a < #NOW))"

rule (modulo E) ifAddeda_0_12[color=#ffffff process=if Added( a )]:
   [ state_12( a ) ] --[ restr_ifAddeda_0_12_1( a ) ]-> [ state_121( a ) ]

  /* has exactly the trivial AC variant */

restriction restr_ifAddeda_1_12_1:
  "∀ x #NOW.
    (restr_ifAddeda_1_12_1( x ) @ #NOW) ⇒
    (¬(∃ #a. (A( x ) @ #a) ∧ (#a < #NOW)))"
  // safety formula

rule (modulo E) ifAddeda_1_12[color=#ffffff process=if Added( a )]:
   [ state_12( a ) ] --[ restr_ifAddeda_1_12_1( a ) ]-> [ state_122( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventC_0_121[color=#ffffff process=event C( );]:
   [ state_121( a ) ] --[ C( ) ]-> [ state_1211( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1211[color=#ffffff process=0]:
   [ state_1211( a ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_122[color=#ffffff process=0]:
   [ state_122( a ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-predicates/binding.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-predicates/binding.spthy

  output:          examples/sapic/fast/feature-predicates/binding.spthy.tmp
  processing time: 0.073572s
  C_exists (exists-trace): verified (4 steps)
  A_before_C (all-traces): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-predicates/binding.spthy

  output:          examples/sapic/fast/feature-predicates/binding.spthy.tmp
  processing time: 0.073572s
  C_exists (exists-trace): verified (4 steps)
  A_before_C (all-traces): verified (3 steps)

==============================================================================
*/
