theory DecWrapDestr begin

// Function signature and definition of the equational theory E

functions: encSucc/2, fst/1, pair/2, sdec/2, senc/2, snd/1, true/0
equations:
    encSucc(senc(x, y), y) = true,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: IsTrue( x )<->x = true

lemma can_create_key:
  exists-trace "∃ #t h k. NewKey( h, k ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h k. (NewKey( h, k ) @ #t)"
*/
simplify
solve( state_111111( h, k ) ▶₀ #t )
  case newk_0_11111
  SOLVED // trace found
qed

lemma can_obtain_wrapping:
  exists-trace "∃ #t k1 k2. Wrap( k1, k2 ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t k1 k2. (Wrap( k1, k2 ) @ #t)"
*/
simplify
solve( state_1211111( a1, h1, h2, k1, k2 ) ▶₀ #t )
  case lookupkeyhask_0_121111
  solve( Insert( <'key', h2>, k2 ) @ #t2 )
    case insertkeyhk_0_1111111
    solve( state_1111111( h2, k2 ) ▶₀ #t2 )
      case eventNewKeyhk_0_111111
      solve( Insert( <'key', h1>, k1 ) @ #t2.1 )
        case insertkeyhk_0_1111111
        solve( state_1111111( h1, k1 ) ▶₀ #t2.1 )
          case eventNewKeyhk_0_111111
          solve( Insert( <'att', ~n>, 'wrap' ) @ #t2.2 )
            case insertatthwrap_0_111211
            solve( state_111211( ~n, lock ) ▶₀ #t2.2 )
              case lockh_0_11121
              solve( !KU( ~n.1 ) @ #vk.2 )
                case outh_0_111111111
                solve( !KU( ~n ) @ #vk.2 )
                  case outh_0_111111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dec_limits [reuse, sources]:
  all-traces
  "∀ k m #t1.
    (DecUsing( k, m ) @ #t1) ⇒
    (∃ h k2 #t2 #t3.
      (((NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
      (#t3 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ k m #t1.
  (DecUsing( k, m ) @ #t1)
 ∧
  ∀ h k2 #t2 #t3.
   (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
  ⇒
   ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ k m #t1.
           (DecUsing( k, m ) @ #t1)
          ⇒
           ((last(#t1)) ∨
            (∃ h k2 #t2 #t3.
              (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t1))  ∥
           (∃ h k2 #t2 #t3.
             (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) )
      case case_1
      solve( state_11211111( a, c, h, k ) ▶₀ #t1 )
        case ifIsTrueencSuccck_0_1121111
        solve( !KU( senc(m, k) ) @ #vk.2 )
          case c_senc
          solve( Insert( <'key', h>, k ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( state_1111111( h, k ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case outsdecck_0_112111111
          by contradiction /* from formulas */
        next
          case outsenckk_0_12111111_case_1
          solve( Insert( <'key', h>, k ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( state_1111111( h, k ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( Insert( <'att', ~n.1>, 'dec' ) @ #t2.1 )
                case insertatthdec_0_11111111
                solve( state_11111111( ~n.1, k ) ▶₀ #t2.1 )
                  case insertkeyhk_0_1111111
                  solve( Insert( <'key', h2>, m ) @ #t2.2 )
                    case insertkeyhk_0_1111111
                    solve( state_1111111( h2, m ) ▶₀ #t2.2 )
                      case eventNewKeyhk_0_111111
                      solve( Insert( <'key', h1>, ~n.1 ) @ #t2.3 )
                        case insertkeyhk_0_1111111
                        solve( state_1111111( h1, ~n.1 ) ▶₀ #t2.3 )
                          case eventNewKeyhk_0_111111
                          solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3)  ∥ (#vr.15 < #t2.1) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by solve( Insert( <'att', ~n.2>, 'wrap' ) @ #t2.1 )
                          next
                            case case_3
                            solve( Insert( <'att', ~n.2>, 'wrap' ) @ #t2.3 )
                              case insertatthwrap_0_111211
                              solve( state_111211( ~n.2, lock ) ▶₀ #t2.3 )
                                case lockh_0_11121
                                solve( !KU( ~n.2 ) @ #vk.2 )
                                  case outh_0_111111111
                                  by contradiction /* cyclic */
                                next
                                  case outsdecck_0_112111111
                                  by contradiction /* from formulas */
                                next
                                  case outsenckk_0_12111111
                                  solve( !KU( ~n.3 ) @ #vk.4 )
                                    case outh_0_111111111
                                    solve( Insert( <'key', h2>, k2 ) @ #t2.4 )
                                      case insertkeyhk_0_1111111
                                      solve( state_1111111( h2, k2 ) ▶₀ #t2.4 )
                                        case eventNewKeyhk_0_111111
                                        by solve( (#vr.40, 0) ~~> (#vk.1, 0) )
                                      qed
                                    qed
                                  next
                                    case outsdecck_0_112111111
                                    by contradiction /* from formulas */
                                  next
                                    case outsenckk_0_12111111
                                    solve( Insert( <'key', h2>, k2 ) @ #t2.4 )
                                      case insertkeyhk_0_1111111
                                      solve( state_1111111( h2, k2 ) ▶₀ #t2.4 )
                                        case eventNewKeyhk_0_111111
                                        by solve( (#vr.40, 0) ~~> (#vk.1, 0) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case outsenckk_0_12111111_case_2
          solve( Insert( <'key', h>, k ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( state_1111111( h, k ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( Insert( <'att', ~n.1>, 'dec' ) @ #t2.1 )
                case insertatthdec_0_11111111
                solve( state_11111111( ~n.1, k ) ▶₀ #t2.1 )
                  case insertkeyhk_0_1111111
                  solve( Insert( <'key', h2>, k2 ) @ #t2.2 )
                    case insertkeyhk_0_1111111
                    solve( state_1111111( h2, k2 ) ▶₀ #t2.2 )
                      case eventNewKeyhk_0_111111
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (#t1.1 = #t2)  ∥ (#t2 < #t1.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n.1, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case case_3
          solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #i #j h k.
           (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j) ⇒ ((last(#j)) ∨ (last(#i))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#j))  ∥ (last(#i)) )
      case case_1
      solve( state_111111( h, k ) ▶₀ #i )
        case newk_0_11111
        solve( !KU( ~n.1 ) @ #j )
          case outsdecck_0_112111111
          by contradiction /* from formulas */
        next
          case outsenckk_0_12111111
          solve( Insert( <'key', h2>, k2 ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( state_1111111( h2, k2 ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( (#vr.9, 0) ~~> (#j, 0) )
                case Var_fresh_3_n
                solve( Insert( <'key', h1>, k1 ) @ #t2.1 )
                  case insertkeyhk_0_1111111
                  solve( state_1111111( h1, k1 ) ▶₀ #t2.1 )
                    case eventNewKeyhk_0_111111
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( state_111111( h, k ) ▶₀ #i )
        case newk_0_11111
        solve( !KU( ~n.1 ) @ #j )
          case outsdecck_0_112111111
          by contradiction /* from formulas */
        next
          case outsenckk_0_12111111
          solve( Insert( <'key', h2>, k2 ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( state_1111111( h2, k2 ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( (#vr.9, 0) ~~> (#j, 0) )
                case Var_fresh_3_n
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case case_3
          solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j)"
*/
simplify
by contradiction /* from formulas */

rule (modulo E) Init[color=#ffffff process=!]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_[color=#ffffff process=!]:
   [ state_( ) ] --> [ !semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_[color=#ffffff process=!]:
   [ !semistate_1( ) ] --> [ state_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1[color=#ffffff process=|]:
   [ state_1( ) ] --> [ state_11( ), state_12( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11[color=#ffffff process=|]:
   [ state_11( ) ] --> [ state_111( ), state_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111[color=#ffffff process=|]:
   [ state_111( ) ] --> [ state_1111( ), state_1112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newh_0_1111[color=#ffffff process=new h;]:
   [ state_1111( ), Fr( h ) ] --> [ state_11111( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_11111[color=#ffffff process=new k;]:
   [ state_11111( h ), Fr( k ) ] --> [ state_111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNewKeyhk_0_111111[color=#ffffff process=event NewKey( h, k );]:
   [ state_111111( h, k ) ] --[ NewKey( h, k ) ]-> [ state_1111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertkeyhk_0_1111111[color=#ffffff process=insert <'key', h>,k;]:
   [ state_1111111( h, k ) ]
  --[ Insert( <'key', h>, k ) ]->
   [ state_11111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertatthdec_0_11111111[color=#ffffff process=insert <'att', h>,'dec';]:
   [ state_11111111( h, k ) ]
  --[ Insert( <'att', h>, 'dec' ) ]->
   [ state_111111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outh_0_111111111[color=#ffffff process=out(h);]:
   [ state_111111111( h, k ) ] --> [ state_1111111111( h, k ), Out( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111[color=#ffffff process=0]:
   [ state_1111111111( h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inh_0_1112[color=#ffffff process=in(h);]:
   [ state_1112( ), In( h ) ] --> [ state_11121( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockh_0_11121[color=#ffffff process=lock h;]:
   [ state_11121( h ), Fr( lock ) ]
  --[ Lock_0( '0', lock, h ), Lock( '0', lock, h ) ]->
   [ state_111211( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertatthwrap_0_111211[color=#ffffff process=insert <'att', h>,'wrap';]:
   [ state_111211( h, lock ) ]
  --[ Insert( <'att', h>, 'wrap' ) ]->
   [ state_1112111( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlockh_0_1112111[color=#ffffff process=unlock h;]:
   [ state_1112111( h, lock ) ]
  --[ Unlock_0( '0', lock, h ), Unlock( '0', lock, h ) ]->
   [ state_11121111( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11121111[color=#ffffff process=0]:
   [ state_11121111( h, lock ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inhc_0_112[color=#ffffff process=in(<h, c>);]:
   [ state_112( ), In( <h, c> ) ] --> [ state_1121( c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_0_1121[color=#ffffff process=lookup <'att', h> as a]:
   [ state_1121( c, h ) ]
  --[ IsIn( <'att', h>, a ) ]->
   [ state_11211( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_1_1121[color=#ffffff process=lookup <'att', h> as a]:
   [ state_1121( c, h ) ]
  --[ IsNotSet( <'att', h> ) ]->
   [ state_11212( c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifadec_0_11211[color=#ffffff process=if a='dec']:
   [ state_11211( a, c, h ) ]
  --[ Pred_Eq( a, 'dec' ) ]->
   [ state_112111( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifadec_1_11211[color=#ffffff process=if a='dec']:
   [ state_11211( a, c, h ) ]
  --[ Pred_Not_Eq( a, 'dec' ) ]->
   [ state_112112( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_112111[color=#ffffff process=lookup <'key', h> as k]:
   [ state_112111( a, c, h ) ]
  --[ IsIn( <'key', h>, k ) ]->
   [ state_1121111( a, c, h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_112111[color=#ffffff process=lookup <'key', h> as k]:
   [ state_112111( a, c, h ) ]
  --[ IsNotSet( <'key', h> ) ]->
   [ state_1121112( a, c, h ) ]

  /* has exactly the trivial AC variant */

restriction restr_ifIsTrueencSuccck_0_1121111_1:
  "∀ x #NOW.
    (restr_ifIsTrueencSuccck_0_1121111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifIsTrueencSuccck_0_1121111[color=#ffffff process=if IsTrue( encSucc(c, k) )]:
   [ state_1121111( a, c, h, k ) ]
  --[ restr_ifIsTrueencSuccck_0_1121111_1( encSucc(c, k) ) ]->
   [ state_11211111( a, c, h, k ) ]

  /*
  rule (modulo AC) ifIsTrueencSuccck_0_1121111[color=#ffffff process=if IsTrue( encSucc(c, k) )]:
     [ state_1121111( a, c, h, k ) ]
    --[ restr_ifIsTrueencSuccck_0_1121111_1( z ) ]->
     [ state_11211111( a, c, h, k ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = encSucc(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = true
  */

restriction restr_ifIsTrueencSuccck_1_1121111_1:
  "∀ x #NOW.
    (restr_ifIsTrueencSuccck_1_1121111_1( x ) @ #NOW) ⇒ (¬(x = true))"
  // safety formula

rule (modulo E) ifIsTrueencSuccck_1_1121111[color=#ffffff process=if IsTrue( encSucc(c, k) )]:
   [ state_1121111( a, c, h, k ) ]
  --[ restr_ifIsTrueencSuccck_1_1121111_1( encSucc(c, k) ) ]->
   [ state_11211112( a, c, h, k ) ]

  /*
  rule (modulo AC) ifIsTrueencSuccck_1_1121111[color=#ffffff process=if IsTrue( encSucc(c, k) )]:
     [ state_1121111( a, c, h, k ) ]
    --[ restr_ifIsTrueencSuccck_1_1121111_1( z ) ]->
     [ state_11211112( a, c, h, k ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = encSucc(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = true
  */

rule (modulo E) eventDecUsingksdecck_0_11211111[color=#ffffff process=event DecUsing( k, sdec(c, k) );]:
   [ state_11211111( a, c, h, k ) ]
  --[ DecUsing( k, sdec(c, k) ) ]->
   [ state_112111111( a, c, h, k ) ]

  /*
  rule (modulo AC) eventDecUsingksdecck_0_11211111[color=#ffffff process=event DecUsing( k, sdec(c, k) );]:
     [ state_11211111( a, c, h, k ) ]
    --[ DecUsing( k, z ) ]->
     [ state_112111111( a, c, h, k ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = sdec(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = x.6
  */

rule (modulo E) outsdecck_0_112111111[color=#ffffff process=out(sdec(c, k));]:
   [ state_112111111( a, c, h, k ) ]
  -->
   [ state_1121111111( a, c, h, k ), Out( sdec(c, k) ) ]

  /*
  rule (modulo AC) outsdecck_0_112111111[color=#ffffff process=out(sdec(c, k));]:
     [ state_112111111( a, c, h, k ) ]
    -->
     [ state_1121111111( a, c, h, k ), Out( z ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = sdec(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = x.6
  */

rule (modulo E) __0_1121111111[color=#ffffff process=0]:
   [ state_1121111111( a, c, h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11211112[color=#ffffff process=0]:
   [ state_11211112( a, c, h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121112[color=#ffffff process=0]:
   [ state_1121112( a, c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112112[color=#ffffff process=0]:
   [ state_112112( a, c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11212[color=#ffffff process=0]:
   [ state_11212( c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inhh_0_12[color=#ffffff process=in(<h1, h2>);]:
   [ state_12( ), In( <h1, h2> ) ] --> [ state_121( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_0_121[color=#ffffff process=lookup <'att', h1> as a1]:
   [ state_121( h1, h2 ) ]
  --[ IsIn( <'att', h1>, a1 ) ]->
   [ state_1211( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_1_121[color=#ffffff process=lookup <'att', h1> as a1]:
   [ state_121( h1, h2 ) ]
  --[ IsNotSet( <'att', h1> ) ]->
   [ state_1212( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifawrap_0_1211[color=#ffffff process=if a1='wrap']:
   [ state_1211( a1, h1, h2 ) ]
  --[ Pred_Eq( a1, 'wrap' ) ]->
   [ state_12111( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifawrap_1_1211[color=#ffffff process=if a1='wrap']:
   [ state_1211( a1, h1, h2 ) ]
  --[ Pred_Not_Eq( a1, 'wrap' ) ]->
   [ state_12112( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_12111[color=#ffffff process=lookup <'key', h1> as k1]:
   [ state_12111( a1, h1, h2 ) ]
  --[ IsIn( <'key', h1>, k1 ) ]->
   [ state_121111( a1, h1, h2, k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_12111[color=#ffffff process=lookup <'key', h1> as k1]:
   [ state_12111( a1, h1, h2 ) ]
  --[ IsNotSet( <'key', h1> ) ]->
   [ state_121112( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_121111[color=#ffffff process=lookup <'key', h2> as k2]:
   [ state_121111( a1, h1, h2, k1 ) ]
  --[ IsIn( <'key', h2>, k2 ) ]->
   [ state_1211111( a1, h1, h2, k1, k2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_121111[color=#ffffff process=lookup <'key', h2> as k2]:
   [ state_121111( a1, h1, h2, k1 ) ]
  --[ IsNotSet( <'key', h2> ) ]->
   [ state_1211112( a1, h1, h2, k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventWrapkk_0_1211111[color=#ffffff process=event Wrap( k1, k2 );]:
   [ state_1211111( a1, h1, h2, k1, k2 ) ]
  --[ Wrap( k1, k2 ) ]->
   [ state_12111111( a1, h1, h2, k1, k2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsenckk_0_12111111[color=#ffffff process=out(senc(k2, k1));]:
   [ state_12111111( a1, h1, h2, k1, k2 ) ]
  -->
   [ state_121111111( a1, h1, h2, k1, k2 ), Out( senc(k2, k1) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_121111111[color=#ffffff process=0]:
   [ state_121111111( a1, h1, h2, k1, k2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1211112[color=#ffffff process=0]:
   [ state_1211112( a1, h1, h2, k1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_121112[color=#ffffff process=0]:
   [ state_121112( a1, h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_12112[color=#ffffff process=0]:
   [ state_12112( a1, h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1212[color=#ffffff process=0]:
   [ state_1212( h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-predicates/decwrap-destr-restrict.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-predicates/decwrap-destr-restrict.spthy

  output:          examples/sapic/fast/feature-predicates/decwrap-destr-restrict.spthy.tmp
  processing time: 2.232322s
  can_create_key (exists-trace): verified (3 steps)
  can_obtain_wrapping (exists-trace): verified (11 steps)
  dec_limits (all-traces): verified (59 steps)
  cannot_obtain_key_ind (all-traces): verified (37 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-predicates/decwrap-destr-restrict.spthy

  output:          examples/sapic/fast/feature-predicates/decwrap-destr-restrict.spthy.tmp
  processing time: 2.232322s
  can_create_key (exists-trace): verified (3 steps)
  can_obtain_wrapping (exists-trace): verified (11 steps)
  dec_limits (all-traces): verified (59 steps)
  cannot_obtain_key_ind (all-traces): verified (37 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

==============================================================================
*/
