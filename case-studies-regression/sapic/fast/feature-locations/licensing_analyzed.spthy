theory licensing begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, ask/2, check_rep/2, dec/1, dec1/1, dec2/1,
           fst/1, get_rep/1, ok/2, pair/2, pk/1, prg/1, rep/2 [private], report/1,
           run/2, sdec/2, senc/2, snd/1, tkn/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = true,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: Report( x, y )<->¬(∃ z. y = <'loc', z>)

lemma attested_comput [reuse]:
  all-traces
  "∀ #t1 inp pk.
    (Poutput( inp, pk ) @ #t1) ⇒ (∃ #t2. (Token( pk ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 inp pk.
  (Poutput( inp, pk ) @ #t1) ∧ ∀ #t2. (Token( pk ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( state_111111111111111( inp, prog, prog2, shared_key, skV, pk, x
       ) ▶₀ #t1 )
  case insencokxtkntokensharedkey_0_11111111111111
  solve( !KU( senc(ok(~n.2, tkn(pk)), ~n.1) ) @ #vk )
    case c_senc
    solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.5 )
      case c_ok
      solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.2 )
        case c_senc
        solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.4 )
          case c_senc
          solve( !KU( ~n.1 ) @ #vk.6 )
            case outaencsharedkeypkskVrepaencsharedkeypkskVlocpkskV_0_1111111_case_1
            by solve( !KU( ~n.2 ) @ #vk.7 )
          next
            case outaencsharedkeypkskVrepaencsharedkeypkskVlocpkskV_0_1111111_case_2
            by solve( !KU( ~n.2 ) @ #vk.7 )
          qed
        qed
      qed
    qed
  qed
qed

lemma unique [reuse]:
  all-traces
  "¬(∃ #t1 #t2 pk inp inp2.
      ((Poutput( inp, pk ) @ #t1) ∧ (Poutput( inp2, pk ) @ #t2)) ∧
      (¬(inp = inp2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pk inp inp2.
  (Poutput( inp, pk ) @ #t1) ∧ (Poutput( inp2, pk ) @ #t2) ∧ ¬(inp = inp2)"
*/
simplify
solve( state_111111111111111( inp, prog, prog2, shared_key, skV, pk, x
       ) ▶₀ #t1 )
  case insencokxtkntokensharedkey_0_11111111111111
  solve( state_111111111111111( inp2, prog, prog2.1, shared_key, skV.1, pk,
                                x
         ) ▶₀ #t2 )
    case insencokxtkntokensharedkey_0_11111111111111
    by solve( state_1121111111111( prog, shared_key, signed, skV.2, pk
              ) ▶₀ #t2.1 )
  qed
qed

lemma final:
  all-traces
  "∀ #t1 #t2 prog inp.
    ((K( run(prog, inp) ) @ #t1) ∧ (Auth( prog ) @ #t2)) ⇒
    (∃ #t3 #t4 pk.
      ((((Token( pk ) @ #t4) ∧ (#t4 < #t1)) ∧ (Poutput( inp, pk ) @ #t3)) ∧
       (#t3 < #t1)) ∧
      (¬(∃ #t5 inp2. (Poutput( inp2, pk ) @ #t5) ∧ (¬(inp = inp2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 prog inp.
  (K( run(prog, inp) ) @ #t1) ∧ (Auth( prog ) @ #t2)
 ∧
  ∀ #t3 #t4 pk.
   (Token( pk ) @ #t4) ∧ (Poutput( inp, pk ) @ #t3)
  ⇒
   ((¬(#t4 < #t1)) ∨
    (¬(#t3 < #t1)) ∨
    (∃ #t5 inp2. (Poutput( inp2, pk ) @ #t5) ∧ ¬(inp = inp2)))"
*/
simplify
solve( state_1( prog ) ▶₀ #t2 )
  case newprog_0_
  solve( !KU( run(~n, inp) ) @ #vk )
    case c_run
    by solve( !KU( ~n ) @ #vk.1 )
  next
    case outrunproginput_0_1111111111111111
    by contradiction /* from formulas */
  qed
qed

rule (modulo E) Report-rule[color=#ffffff process=new prog;]:
   [ In( <x, loc> ) ] --[ Report( x, loc ) ]-> [ Out( rep(x, loc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff process=new prog;]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newprog_0_[color=#ffffff process=new prog;]:
   [ state_( ), Fr( prog ) ] --> [ state_1( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAuthprog_0_1[color=#ffffff process=event Auth( prog );]:
   [ state_1( prog ) ] --[ Auth( prog ) ]-> [ state_11( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11[color=#ffffff process=|]:
   [ state_11( prog ) ] --> [ state_111( prog ), state_112( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111[color=#ffffff process=!]:
   [ state_111( prog ) ] --> [ !semistate_1111( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_111[color=#ffffff process=!]:
   [ !semistate_1111( prog ) ] --> [ state_1111( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inpkskV_0_1111[color=#804046 process=in(pk(skV));]:
   [ state_1111( prog ), In( pk(skV) ) ] --> [ state_11111( prog, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newsharedkey_0_11111[color=#804046 process=new shared_key;]:
   [ state_11111( prog, skV ), Fr( shared_key ) ]
  -->
   [ state_111111( prog, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionPpkskVsharedkey_0_111111[color=#804046 process=event SessionP( pk(skV), shared_key );]:
   [ state_111111( prog, shared_key, skV ) ]
  --[ SessionP( pk(skV), shared_key ) ]->
   [ state_1111111( prog, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outaencsharedkeypkskVrepaencsharedkeypkskVlocpkskV_0_1111111[color=#804046 process=out(<aenc(shared_key, pk(skV)), 
 rep(aenc(shared_key, pk(skV)), <'loc', pk(skV)>)>);]:
   [ state_1111111( prog, shared_key, skV ) ]
  -->
   [
   state_11111111( prog, shared_key, skV ),
   Out( <aenc(shared_key, pk(skV)), 
         rep(aenc(shared_key, pk(skV)), <'loc', pk(skV)>)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insencprgprogsharedkey_0_11111111[color=#804046 process=in(senc(prg(prog2), shared_key));]:
   [
   state_11111111( prog, shared_key, skV ),
   In( senc(prg(prog2), shared_key) )
   ]
  -->
   [ state_111111111( prog, prog2, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_111111111[color=#804046 process=!]:
   [ state_111111111( prog, prog2, shared_key, skV ) ]
  -->
   [ !semistate_1111111111( prog, prog2, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_111111111[color=#804046 process=!]:
   [ !semistate_1111111111( prog, prog2, shared_key, skV ) ]
  -->
   [ state_1111111111( prog, prog2, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ininput_0_1111111111[color=#804046 process=in(input);]:
   [ state_1111111111( prog, prog2, shared_key, skV ), In( input ) ]
  -->
   [ state_11111111111( input, prog, prog2, shared_key, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insenctkntokensharedkey_0_11111111111[color=#804046 process=in(senc(tkn(token), shared_key));]:
   [
   state_11111111111( input, prog, prog2, shared_key, skV ),
   In( senc(tkn(token), shared_key) )
   ]
  -->
   [ state_111111111111( input, prog, prog2, shared_key, skV, token ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newx_0_111111111111[color=#804046 process=new x;]:
   [
   state_111111111111( input, prog, prog2, shared_key, skV, token ), Fr( x )
   ]
  -->
   [ state_1111111111111( input, prog, prog2, shared_key, skV, token, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsencaskxtkntokensharedkey_0_1111111111111[color=#804046 process=out(senc(ask(x, tkn(token)), shared_key));]:
   [ state_1111111111111( input, prog, prog2, shared_key, skV, token, x ) ]
  -->
   [
   state_11111111111111( input, prog, prog2, shared_key, skV, token, x ),
   Out( senc(ask(x, tkn(token)), shared_key) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insencokxtkntokensharedkey_0_11111111111111[color=#804046 process=in(senc(ok(x, tkn(token)), shared_key));]:
   [
   state_11111111111111( input, prog, prog2, shared_key, skV, token, x ),
   In( senc(ok(x, tkn(token)), shared_key) )
   ]
  -->
   [ state_111111111111111( input, prog, prog2, shared_key, skV, token, x )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventPoutputinputtoken_0_111111111111111[color=#804046 process=event Poutput( input, token );]:
   [ state_111111111111111( input, prog, prog2, shared_key, skV, token, x )
   ]
  --[ Poutput( input, token ) ]->
   [ state_1111111111111111( input, prog, prog2, shared_key, skV, token, x )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outrunproginput_0_1111111111111111[color=#804046 process=out(run(prog2, input));]:
   [ state_1111111111111111( input, prog, prog2, shared_key, skV, token, x )
   ]
  -->
   [
   state_11111111111111111( input, prog, prog2, shared_key, skV, token, x ),
   Out( run(prog2, input) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111111111111[color=#804046 process=0]:
   [
   state_11111111111111111( input, prog, prog2, shared_key, skV, token, x )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112[color=#ffffff process=!]:
   [ state_112( prog ) ] --> [ !semistate_1121( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112[color=#ffffff process=!]:
   [ !semistate_1121( prog ) ] --> [ state_1121( prog ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newskV_0_1121[color=#406880 process=new skV;]:
   [ state_1121( prog ), Fr( skV ) ] --> [ state_11211( prog, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventHonestPpkskV_0_11211[color=#406880 process=event HonestP( pk(skV) );]:
   [ state_11211( prog, skV ) ]
  --[ HonestP( pk(skV) ) ]->
   [ state_112111( prog, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpkskV_0_112111[color=#406880 process=out(pk(skV));]:
   [ state_112111( prog, skV ) ]
  -->
   [ state_1121111( prog, skV ), Out( pk(skV) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inaencsharedkeypkskVsigned_0_1121111[color=#406880 process=in(<aenc(shared_key, pk(skV)), signed>);]:
   [ state_1121111( prog, skV ), In( <aenc(shared_key, pk(skV)), signed> ) ]
  -->
   [ state_11211111( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifaencsharedkeypkskVcheckrepsignedlocpkskV_0_11211111[color=#406880 process=if aenc(shared_key, pk(skV))=check_rep(signed, <'loc', pk(skV)>)]:
   [ state_11211111( prog, shared_key, signed, skV ) ]
  --[
  Pred_Eq( aenc(shared_key, pk(skV)), check_rep(signed, <'loc', pk(skV)>) )
  ]->
   [ state_112111111( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifaencsharedkeypkskVcheckrepsignedlocpkskV_1_11211111[color=#406880 process=if aenc(shared_key, pk(skV))=check_rep(signed, <'loc', pk(skV)>)]:
   [ state_11211111( prog, shared_key, signed, skV ) ]
  --[
  Pred_Not_Eq( aenc(shared_key, pk(skV)),
               check_rep(signed, <'loc', pk(skV)>)
  )
  ]->
   [ state_112111112( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionVpkskVsharedkey_0_112111111[color=#406880 process=event SessionV( pk(skV), shared_key );]:
   [ state_112111111( prog, shared_key, signed, skV ) ]
  --[ SessionV( pk(skV), shared_key ) ]->
   [ state_1121111111( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsencprgprogsharedkey_0_1121111111[color=#406880 process=out(senc(prg(prog), shared_key));]:
   [ state_1121111111( prog, shared_key, signed, skV ) ]
  -->
   [
   state_11211111111( prog, shared_key, signed, skV ),
   Out( senc(prg(prog), shared_key) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11211111111[color=#406880 process=!]:
   [ state_11211111111( prog, shared_key, signed, skV ) ]
  -->
   [ !semistate_112111111111( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11211111111[color=#406880 process=!]:
   [ !semistate_112111111111( prog, shared_key, signed, skV ) ]
  -->
   [ state_112111111111( prog, shared_key, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newtoken_0_112111111111[color=#406880 process=new token;]:
   [ state_112111111111( prog, shared_key, signed, skV ), Fr( token ) ]
  -->
   [ state_1121111111111( prog, shared_key, signed, skV, token ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventTokentoken_0_1121111111111[color=#406880 process=event Token( token );]:
   [ state_1121111111111( prog, shared_key, signed, skV, token ) ]
  --[ Token( token ) ]->
   [ state_11211111111111( prog, shared_key, signed, skV, token ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsenctkntokensharedkey_0_11211111111111[color=#406880 process=out(senc(tkn(token), shared_key));]:
   [ state_11211111111111( prog, shared_key, signed, skV, token ) ]
  -->
   [
   state_112111111111111( prog, shared_key, signed, skV, token ),
   Out( senc(tkn(token), shared_key) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insencaskxtkntokensharedkey_0_112111111111111[color=#406880 process=in(senc(ask(x, tkn(token2)), shared_key));]:
   [
   state_112111111111111( prog, shared_key, signed, skV, token ),
   In( senc(ask(x, tkn(token2)), shared_key) )
   ]
  -->
   [
   state_1121111111111111( prog, shared_key, signed, skV, token, token2, x )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) iftkntokentkntoken_0_1121111111111111[color=#406880 process=if tkn(token)=tkn(token2)]:
   [
   state_1121111111111111( prog, shared_key, signed, skV, token, token2, x )
   ]
  --[ Pred_Eq( tkn(token), tkn(token2) ) ]->
   [
   state_11211111111111111( prog, shared_key, signed, skV, token, token2, x
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) iftkntokentkntoken_1_1121111111111111[color=#406880 process=if tkn(token)=tkn(token2)]:
   [
   state_1121111111111111( prog, shared_key, signed, skV, token, token2, x )
   ]
  --[ Pred_Not_Eq( tkn(token), tkn(token2) ) ]->
   [
   state_11211111111111112( prog, shared_key, signed, skV, token, token2, x
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsencokxtkntokensharedkey_0_11211111111111111[color=#406880 process=out(senc(ok(x, tkn(token)), shared_key));]:
   [
   state_11211111111111111( prog, shared_key, signed, skV, token, token2, x
   )
   ]
  -->
   [
   state_112111111111111111( prog, shared_key, signed, skV, token, token2, x
   ),
   Out( senc(ok(x, tkn(token)), shared_key) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112111111111111111[color=#406880 process=0]:
   [
   state_112111111111111111( prog, shared_key, signed, skV, token, token2, x
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11211111111111112[color=#406880 process=0]:
   [
   state_11211111111111112( prog, shared_key, signed, skV, token, token2, x
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112111112[color=#406880 process=0]:
   [ state_112111112( prog, shared_key, signed, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-locations/licensing.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-locations/licensing.spthy

  output:          examples/sapic/fast/feature-locations/licensing.spthy.tmp
  processing time: 0.951935s
  attested_comput (all-traces): verified (9 steps)
  unique (all-traces): verified (4 steps)
  final (all-traces): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/licensing.spthy

  output:          examples/sapic/fast/feature-locations/licensing.spthy.tmp
  processing time: 0.951935s
  attested_comput (all-traces): verified (9 steps)
  unique (all-traces): verified (4 steps)
  final (all-traces): verified (5 steps)

==============================================================================
*/
