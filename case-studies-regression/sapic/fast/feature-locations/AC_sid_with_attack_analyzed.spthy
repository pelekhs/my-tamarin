theory AC_sid begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, list/2, pair/2, prog/3,
           rep/2 [private], report/1, snd/1
equations:
    check_rep(rep(x.1, x.2), x.2) = true,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: Report( x, y )<->¬(y = 'l')

lemma attested_comput:
  all-traces
  "∀ #t1 h.
    (Voutput( h ) @ #t1) ⇒ (∃ #t2. (Poutput( h ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 h.
  (Voutput( h ) @ #t1) ∧ ∀ #t2. (Poutput( h ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
by solve( state_112111111111111( init, ip, ipo, o, r_sid, sid, signedios,
                                 state, lock
          ) ▶₀ #t1 )

rule (modulo E) Report-rule[color=#ffffff process=new init;]:
   [ In( <x, loc> ) ] --[ Report( x, loc ) ]-> [ Out( rep(x, loc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff process=new init;]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newinit_0_[color=#ffffff process=new init;]:
   [ state_( ), Fr( init ) ] --> [ state_1( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1[color=#ffffff process=!]:
   [ state_1( init ) ] --> [ !semistate_11( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1[color=#ffffff process=!]:
   [ !semistate_11( init ) ] --> [ state_11( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11[color=#ffffff process=|]:
   [ state_11( init ) ] --> [ state_111( init ), state_112( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newstate_0_111[color=#ffffff process=new state;]:
   [ state_111( init ), Fr( state ) ] --> [ state_1111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertstateinit_0_1111[color=#ffffff process=insert state,init;]:
   [ state_1111( init, state ) ]
  --[ Insert( state, init ) ]->
   [ state_11111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111[color=#ffffff process=!]:
   [ state_11111( init, state ) ] --> [ !semistate_111111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11111[color=#ffffff process=!]:
   [ !semistate_111111( init, state ) ] --> [ state_111111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newsid_0_111111[color=#405280 process=new sid;]:
   [ state_111111( init, state ), Fr( sid ) ]
  -->
   [ state_1111111( init, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsidrepsidl_0_1111111[color=#405280 process=out(<sid, rep(sid, 'l')>);]:
   [ state_1111111( init, sid, state ) ]
  -->
   [ state_11111111( init, sid, state ), Out( <sid, rep(sid, 'l')> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111[color=#405280 process=!]:
   [ state_11111111( init, sid, state ) ]
  -->
   [ !semistate_111111111( init, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11111111[color=#405280 process=!]:
   [ !semistate_111111111( init, sid, state ) ]
  -->
   [ state_111111111( init, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockstate_0_111111111[color=#405280 process=lock state;]:
   [ state_111111111( init, sid, state ), Fr( lock ) ]
  --[ Lock_0( '0', lock, state ), Lock( '0', lock, state ) ]->
   [ state_1111111111( init, lock, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupstateasipo_0_1111111111[color=#405280 process=lookup state as ipo]:
   [ state_1111111111( init, lock, sid, state ) ]
  --[ IsIn( state, ipo ) ]->
   [ state_11111111111( init, ipo, lock, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupstateasipo_1_1111111111[color=#405280 process=lookup state as ipo]:
   [ state_1111111111( init, lock, sid, state ) ]
  --[ IsNotSet( state ) ]->
   [ state_11111111112( init, lock, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inip_0_11111111111[color=#405280 process=in(ip);]:
   [ state_11111111111( init, ipo, lock, sid, state ), In( ip ) ]
  -->
   [ state_111111111111( init, ip, ipo, lock, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newr_0_111111111111[color=#405280 process=new r;]:
   [ state_111111111111( init, ip, ipo, lock, sid, state ), Fr( r ) ]
  -->
   [ state_1111111111111( init, ip, ipo, lock, r, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventPoutputprogripipoipipo_0_1111111111111[color=#405280 process=event Poutput( <prog(r, ip, ipo), ip, ipo> );]:
   [ state_1111111111111( init, ip, ipo, lock, r, sid, state ) ]
  --[ Poutput( <prog(r, ip, ipo), ip, ipo> ) ]->
   [ state_11111111111111( init, ip, ipo, lock, r, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outprogripiporepprogripipoipsidl_0_11111111111111[color=#405280 process=out(<prog(r, ip, ipo), rep(<prog(r, ip, ipo), ip, sid>, 'l')>);]:
   [ state_11111111111111( init, ip, ipo, lock, r, sid, state ) ]
  -->
   [
   state_111111111111111( init, ip, ipo, lock, r, sid, state ),
   Out( <prog(r, ip, ipo), rep(<prog(r, ip, ipo), ip, sid>, 'l')> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertstateprogripipolistipipo_0_111111111111111[color=#405280 process=insert state,<prog(r, ip, ipo), list(ip, ipo)>;]:
   [ state_111111111111111( init, ip, ipo, lock, r, sid, state ) ]
  --[ Insert( state, <prog(r, ip, ipo), list(ip, ipo)> ) ]->
   [ state_1111111111111111( init, ip, ipo, lock, r, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlockstate_0_1111111111111111[color=#405280 process=unlock state;]:
   [ state_1111111111111111( init, ip, ipo, lock, r, sid, state ) ]
  --[ Unlock_0( '0', lock, state ), Unlock( '0', lock, state ) ]->
   [ state_11111111111111111( init, ip, ipo, lock, r, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111111111111[color=#405280 process=0]:
   [ state_11111111111111111( init, ip, ipo, lock, r, sid, state ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111112[color=#405280 process=0]:
   [ state_11111111112( init, lock, sid, state ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112[color=#ffffff process=!]:
   [ state_112( init ) ] --> [ !semistate_1121( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112[color=#ffffff process=!]:
   [ !semistate_1121( init ) ] --> [ state_1121( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newstate_0_1121[color=#ffffff process=new state;]:
   [ state_1121( init ), Fr( state ) ] --> [ state_11211( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertstateinit_0_11211[color=#ffffff process=insert state,init;]:
   [ state_11211( init, state ) ]
  --[ Insert( state, init ) ]->
   [ state_112111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112111[color=#ffffff process=!]:
   [ state_112111( init, state ) ] --> [ !semistate_1121111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112111[color=#ffffff process=!]:
   [ !semistate_1121111( init, state ) ]
  -->
   [ state_1121111( init, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insidrsid_0_1121111[color=#658040 process=in(<sid, r_sid>);]:
   [ state_1121111( init, state ), In( <sid, r_sid> ) ]
  -->
   [ state_11211111( init, r_sid, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifsidcheckreprsidl_0_11211111[color=#658040 process=if sid=check_rep(r_sid, 'l')]:
   [ state_11211111( init, r_sid, sid, state ) ]
  --[ Pred_Eq( sid, check_rep(r_sid, 'l') ) ]->
   [ state_112111111( init, r_sid, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifsidcheckreprsidl_1_11211111[color=#658040 process=if sid=check_rep(r_sid, 'l')]:
   [ state_11211111( init, r_sid, sid, state ) ]
  --[ Pred_Not_Eq( sid, check_rep(r_sid, 'l') ) ]->
   [ state_112111112( init, r_sid, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112111111[color=#658040 process=!]:
   [ state_112111111( init, r_sid, sid, state ) ]
  -->
   [ !semistate_1121111111( init, r_sid, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112111111[color=#658040 process=!]:
   [ !semistate_1121111111( init, r_sid, sid, state ) ]
  -->
   [ state_1121111111( init, r_sid, sid, state ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockstate_0_1121111111[color=#658040 process=lock state;]:
   [ state_1121111111( init, r_sid, sid, state ), Fr( lock.1 ) ]
  --[ Lock_1( '1', lock.1, state ), Lock( '1', lock.1, state ) ]->
   [ state_11211111111( init, r_sid, sid, state, lock.1 ) ]

  /*
  rule (modulo AC) lockstate_0_1121111111[color=#658040 process=lock state;]:
     [ state_1121111111( init, r_sid, sid, state ), Fr( lock ) ]
    --[ Lock_1( '1', lock, state ), Lock( '1', lock, state ) ]->
     [ state_11211111111( init, r_sid, sid, state, lock ) ]
  */

rule (modulo E) lookupstateasipo_0_11211111111[color=#658040 process=lookup state as ipo]:
   [ state_11211111111( init, r_sid, sid, state, lock.1 ) ]
  --[ IsIn( state, ipo ) ]->
   [ state_112111111111( init, ipo, r_sid, sid, state, lock.1 ) ]

  /*
  rule (modulo AC) lookupstateasipo_0_11211111111[color=#658040 process=lookup state as ipo]:
     [ state_11211111111( init, r_sid, sid, state, lock ) ]
    --[ IsIn( state, ipo ) ]->
     [ state_112111111111( init, ipo, r_sid, sid, state, lock ) ]
  */

rule (modulo E) lookupstateasipo_1_11211111111[color=#658040 process=lookup state as ipo]:
   [ state_11211111111( init, r_sid, sid, state, lock.1 ) ]
  --[ IsNotSet( state ) ]->
   [ state_112111111112( init, r_sid, sid, state, lock.1 ) ]

  /*
  rule (modulo AC) lookupstateasipo_1_11211111111[color=#658040 process=lookup state as ipo]:
     [ state_11211111111( init, r_sid, sid, state, lock ) ]
    --[ IsNotSet( state ) ]->
     [ state_112111111112( init, r_sid, sid, state, lock ) ]
  */

rule (modulo E) inip_0_112111111111[color=#658040 process=in(ip);]:
   [ state_112111111111( init, ipo, r_sid, sid, state, lock.1 ), In( ip ) ]
  -->
   [ state_1121111111111( init, ip, ipo, r_sid, sid, state, lock.1 ) ]

  /*
  rule (modulo AC) inip_0_112111111111[color=#658040 process=in(ip);]:
     [ state_112111111111( init, ipo, r_sid, sid, state, lock ), In( ip ) ]
    -->
     [ state_1121111111111( init, ip, ipo, r_sid, sid, state, lock ) ]
  */

rule (modulo E) inosignedios_0_1121111111111[color=#658040 process=in(<o, signedios>);]:
   [
   state_1121111111111( init, ip, ipo, r_sid, sid, state, lock.1 ),
   In( <o, signedios> )
   ]
  -->
   [
   state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                         lock.1
   )
   ]

  /*
  rule (modulo AC) inosignedios_0_1121111111111[color=#658040 process=in(<o, signedios>);]:
     [
     state_1121111111111( init, ip, ipo, r_sid, sid, state, lock ),
     In( <o, signedios> )
     ]
    -->
     [
     state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock
     )
     ]
  */

rule (modulo E) ifoipsidcheckrepsignediosl_0_11211111111111[color=#658040 process=if <o, ip, sid>=check_rep(signedios, 'l')]:
   [
   state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                         lock.1
   )
   ]
  --[ Pred_Eq( <o, ip, sid>, check_rep(signedios, 'l') ) ]->
   [
   state_112111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                          lock.1
   )
   ]

  /*
  rule (modulo AC) ifoipsidcheckrepsignediosl_0_11211111111111[color=#658040 process=if <o, ip, sid>=check_rep(signedios, 'l')]:
     [
     state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock
     )
     ]
    --[ Pred_Eq( <o, ip, sid>, check_rep(signedios, 'l') ) ]->
     [
     state_112111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock
     )
     ]
  */

rule (modulo E) ifoipsidcheckrepsignediosl_1_11211111111111[color=#658040 process=if <o, ip, sid>=check_rep(signedios, 'l')]:
   [
   state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                         lock.1
   )
   ]
  --[ Pred_Not_Eq( <o, ip, sid>, check_rep(signedios, 'l') ) ]->
   [
   state_112111111111112( init, ip, ipo, o, r_sid, sid, signedios, state,
                          lock.1
   )
   ]

  /*
  rule (modulo AC) ifoipsidcheckrepsignediosl_1_11211111111111[color=#658040 process=if <o, ip, sid>=check_rep(signedios, 'l')]:
     [
     state_11211111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock
     )
     ]
    --[ Pred_Not_Eq( <o, ip, sid>, check_rep(signedios, 'l') ) ]->
     [
     state_112111111111112( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock
     )
     ]
  */

rule (modulo E) eventVoutputoipipo_0_112111111111111[color=#658040 process=event Voutput( <o, ip, ipo> );]:
   [
   state_112111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                          lock.1
   )
   ]
  --[ Voutput( <o, ip, ipo> ) ]->
   [
   state_1121111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock.1
   )
   ]

  /*
  rule (modulo AC) eventVoutputoipipo_0_112111111111111[color=#658040 process=event Voutput( <o, ip, ipo> );]:
     [
     state_112111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock
     )
     ]
    --[ Voutput( <o, ip, ipo> ) ]->
     [
     state_1121111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock
     )
     ]
  */

rule (modulo E) insertstateolistipipo_0_1121111111111111[color=#658040 process=insert state,<o, list(ip, ipo)>;]:
   [
   state_1121111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock.1
   )
   ]
  --[ Insert( state, <o, list(ip, ipo)> ) ]->
   [
   state_11211111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock.1
   )
   ]

  /*
  rule (modulo AC) insertstateolistipipo_0_1121111111111111[color=#658040 process=insert state,<o, list(ip, ipo)>;]:
     [
     state_1121111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock
     )
     ]
    --[ Insert( state, <o, list(ip, ipo)> ) ]->
     [
     state_11211111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                              lock
     )
     ]
  */

rule (modulo E) unlockstate_0_11211111111111111[color=#658040 process=unlock state;]:
   [
   state_11211111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock.1
   )
   ]
  --[ Unlock_1( '1', lock.1, state ), Unlock( '1', lock.1, state ) ]->
   [
   state_112111111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock.1
   )
   ]

  /*
  rule (modulo AC) unlockstate_0_11211111111111111[color=#658040 process=unlock state;]:
     [
     state_11211111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                              lock
     )
     ]
    --[ Unlock_1( '1', lock, state ), Unlock( '1', lock, state ) ]->
     [
     state_112111111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                               lock
     )
     ]
  */

rule (modulo E) __0_112111111111111111[color=#658040 process=0]:
   [
   state_112111111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) __0_112111111111111111[color=#658040 process=0]:
     [
     state_112111111111111111( init, ip, ipo, o, r_sid, sid, signedios, state,
                               lock
     )
     ]
    -->
     [ ]
  */

rule (modulo E) eventFail_0_112111111111112[color=#658040 process=event Fail( );]:
   [
   state_112111111111112( init, ip, ipo, o, r_sid, sid, signedios, state,
                          lock.1
   )
   ]
  --[ Fail( ) ]->
   [
   state_1121111111111121( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock.1
   )
   ]

  /*
  rule (modulo AC) eventFail_0_112111111111112[color=#658040 process=event Fail( );]:
     [
     state_112111111111112( init, ip, ipo, o, r_sid, sid, signedios, state,
                            lock
     )
     ]
    --[ Fail( ) ]->
     [
     state_1121111111111121( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock
     )
     ]
  */

rule (modulo E) __0_1121111111111121[color=#658040 process=0]:
   [
   state_1121111111111121( init, ip, ipo, o, r_sid, sid, signedios, state,
                           lock.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) __0_1121111111111121[color=#658040 process=0]:
     [
     state_1121111111111121( init, ip, ipo, o, r_sid, sid, signedios, state,
                             lock
     )
     ]
    -->
     [ ]
  */

rule (modulo E) __0_112111111112[color=#658040 process=0]:
   [ state_112111111112( init, r_sid, sid, state, lock.1 ) ] --> [ ]

  /*
  rule (modulo AC) __0_112111111112[color=#658040 process=0]:
     [ state_112111111112( init, r_sid, sid, state, lock ) ] --> [ ]
  */

rule (modulo E) __0_112111112[color=#658040 process=0]:
   [ state_112111112( init, r_sid, sid, state ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-locations/AC_sid_with_attack.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-locations/AC_sid_with_attack.spthy

  output:          examples/sapic/fast/feature-locations/AC_sid_with_attack.spthy.tmp
  processing time: 1.023172s
  attested_comput (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/AC_sid_with_attack.spthy

  output:          examples/sapic/fast/feature-locations/AC_sid_with_attack.spthy.tmp
  processing time: 1.023172s
  attested_comput (all-traces): verified (2 steps)

==============================================================================
*/
